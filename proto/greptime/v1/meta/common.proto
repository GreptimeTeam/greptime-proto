syntax = "proto3";

package greptime.v1.meta;

option go_package = "github.com/GreptimeTeam/greptime-proto/go/greptime/v1/meta";

message RequestHeader {
  uint64 protocol_version = 1;
  // cluster_id is the ID of the cluster which be sent to.
  uint64 cluster_id = 2;
  // member_id is the ID of the sender server.
  uint64 member_id = 3;
}

message ResponseHeader {
  uint64 protocol_version = 1;
  // cluster_id is the ID of the cluster which sent the response.
  uint64 cluster_id = 2;
  Error error = 3;
}

message Error {
  int32 code = 1;
  string err_msg = 2;
}

message Peer {
  uint64 id = 1;
  string addr = 2;
}

message TableName {
  string catalog_name = 1;
  string schema_name = 2;
  string table_name = 3;
}

message TimeInterval {
  // The unix timestamp in millis of the start of this period.
  uint64 start_timestamp_millis = 1;
  // The unix timestamp in millis of the end of this period.
  uint64 end_timestamp_millis = 2;
}

message KeyValue {
  // key is the key in bytes. An empty key is not allowed.
  bytes key = 1;
  // value is the value held by the key, in bytes.
  bytes value = 2;
}

message KeyRange {
  // key is the first key for the range
  bytes key = 1;
  // range_end is the upper bound on the requested range [key, range_end).
  // If range_end is '\0', the range is all keys >= key.
  // If range_end is key plus one (e.g., "aa"+1 == "ab", "a\xff"+1 == "b"),
  // then the range request gets all keys prefixed with key.
  // If both key and range_end are '\0', then the range request returns all
  // keys.
  bytes range_end = 2;
}
