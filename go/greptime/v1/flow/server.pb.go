// Copyright 2023 Greptime Team
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: greptime/v1/flow/server.proto

package flow

import (
	v1 "github.com/GreptimeTeam/greptime-proto/go/greptime/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DirtyWindowRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The dirty time window requests.
	// Each request contains a table_id and a list of dirty timestamps.
	Requests []*DirtyWindowRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *DirtyWindowRequests) Reset() {
	*x = DirtyWindowRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_flow_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirtyWindowRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirtyWindowRequests) ProtoMessage() {}

func (x *DirtyWindowRequests) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_flow_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirtyWindowRequests.ProtoReflect.Descriptor instead.
func (*DirtyWindowRequests) Descriptor() ([]byte, []int) {
	return file_greptime_v1_flow_server_proto_rawDescGZIP(), []int{0}
}

func (x *DirtyWindowRequests) GetRequests() []*DirtyWindowRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type DirtyWindowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Dirty timestamps. Used to mark this point in time as dirty,
	// so that the flow can be triggered to process the data.
	Timestamps []int64 `protobuf:"varint,2,rep,packed,name=timestamps,proto3" json:"timestamps,omitempty"`
}

func (x *DirtyWindowRequest) Reset() {
	*x = DirtyWindowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_flow_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirtyWindowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirtyWindowRequest) ProtoMessage() {}

func (x *DirtyWindowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_flow_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirtyWindowRequest.ProtoReflect.Descriptor instead.
func (*DirtyWindowRequest) Descriptor() ([]byte, []int) {
	return file_greptime_v1_flow_server_proto_rawDescGZIP(), []int{1}
}

func (x *DirtyWindowRequest) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *DirtyWindowRequest) GetTimestamps() []int64 {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

type FlowRequestHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Encoded trace_id & span_id, follow the w3c Trace Context
	// https://www.w3.org/TR/trace-context/#header-name
	TracingContext map[string]string `protobuf:"bytes,1,rep,name=tracing_context,json=tracingContext,proto3" json:"tracing_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The contextual information of the query
	QueryContext *v1.QueryContext `protobuf:"bytes,2,opt,name=query_context,json=queryContext,proto3" json:"query_context,omitempty"`
}

func (x *FlowRequestHeader) Reset() {
	*x = FlowRequestHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_flow_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowRequestHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowRequestHeader) ProtoMessage() {}

func (x *FlowRequestHeader) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_flow_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowRequestHeader.ProtoReflect.Descriptor instead.
func (*FlowRequestHeader) Descriptor() ([]byte, []int) {
	return file_greptime_v1_flow_server_proto_rawDescGZIP(), []int{2}
}

func (x *FlowRequestHeader) GetTracingContext() map[string]string {
	if x != nil {
		return x.TracingContext
	}
	return nil
}

func (x *FlowRequestHeader) GetQueryContext() *v1.QueryContext {
	if x != nil {
		return x.QueryContext
	}
	return nil
}

type InsertRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*InsertRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *InsertRequests) Reset() {
	*x = InsertRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_flow_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertRequests) ProtoMessage() {}

func (x *InsertRequests) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_flow_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertRequests.ProtoReflect.Descriptor instead.
func (*InsertRequests) Descriptor() ([]byte, []int) {
	return file_greptime_v1_flow_server_proto_rawDescGZIP(), []int{3}
}

func (x *InsertRequests) GetRequests() []*InsertRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type InsertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId uint64   `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	Rows     *v1.Rows `protobuf:"bytes,2,opt,name=rows,proto3" json:"rows,omitempty"`
}

func (x *InsertRequest) Reset() {
	*x = InsertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_flow_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertRequest) ProtoMessage() {}

func (x *InsertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_flow_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertRequest.ProtoReflect.Descriptor instead.
func (*InsertRequest) Descriptor() ([]byte, []int) {
	return file_greptime_v1_flow_server_proto_rawDescGZIP(), []int{4}
}

func (x *InsertRequest) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *InsertRequest) GetRows() *v1.Rows {
	if x != nil {
		return x.Rows
	}
	return nil
}

type FlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *FlowRequestHeader `protobuf:"bytes,64,opt,name=header,proto3" json:"header,omitempty"`
	// Types that are assignable to Body:
	//
	//	*FlowRequest_Create
	//	*FlowRequest_Drop
	//	*FlowRequest_Flush
	Body isFlowRequest_Body `protobuf_oneof:"body"`
}

func (x *FlowRequest) Reset() {
	*x = FlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_flow_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowRequest) ProtoMessage() {}

func (x *FlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_flow_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowRequest.ProtoReflect.Descriptor instead.
func (*FlowRequest) Descriptor() ([]byte, []int) {
	return file_greptime_v1_flow_server_proto_rawDescGZIP(), []int{5}
}

func (x *FlowRequest) GetHeader() *FlowRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (m *FlowRequest) GetBody() isFlowRequest_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *FlowRequest) GetCreate() *CreateRequest {
	if x, ok := x.GetBody().(*FlowRequest_Create); ok {
		return x.Create
	}
	return nil
}

func (x *FlowRequest) GetDrop() *DropRequest {
	if x, ok := x.GetBody().(*FlowRequest_Drop); ok {
		return x.Drop
	}
	return nil
}

func (x *FlowRequest) GetFlush() *FlushFlow {
	if x, ok := x.GetBody().(*FlowRequest_Flush); ok {
		return x.Flush
	}
	return nil
}

type isFlowRequest_Body interface {
	isFlowRequest_Body()
}

type FlowRequest_Create struct {
	Create *CreateRequest `protobuf:"bytes,1,opt,name=create,proto3,oneof"`
}

type FlowRequest_Drop struct {
	Drop *DropRequest `protobuf:"bytes,2,opt,name=drop,proto3,oneof"`
}

type FlowRequest_Flush struct {
	Flush *FlushFlow `protobuf:"bytes,3,opt,name=flush,proto3,oneof"`
}

func (*FlowRequest_Create) isFlowRequest_Body() {}

func (*FlowRequest_Drop) isFlowRequest_Body() {}

func (*FlowRequest_Flush) isFlowRequest_Body() {}

type FlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *v1.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	AffectedRows uint64             `protobuf:"varint,2,opt,name=affected_rows,json=affectedRows,proto3" json:"affected_rows,omitempty"`
	// affected flow ids
	AffectedFlows []*v1.FlowId      `protobuf:"bytes,3,rep,name=affected_flows,json=affectedFlows,proto3" json:"affected_flows,omitempty"`
	Extensions    map[string][]byte `protobuf:"bytes,4,rep,name=extensions,proto3" json:"extensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FlowResponse) Reset() {
	*x = FlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_flow_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowResponse) ProtoMessage() {}

func (x *FlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_flow_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowResponse.ProtoReflect.Descriptor instead.
func (*FlowResponse) Descriptor() ([]byte, []int) {
	return file_greptime_v1_flow_server_proto_rawDescGZIP(), []int{6}
}

func (x *FlowResponse) GetHeader() *v1.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *FlowResponse) GetAffectedRows() uint64 {
	if x != nil {
		return x.AffectedRows
	}
	return 0
}

func (x *FlowResponse) GetAffectedFlows() []*v1.FlowId {
	if x != nil {
		return x.AffectedFlows
	}
	return nil
}

func (x *FlowResponse) GetExtensions() map[string][]byte {
	if x != nil {
		return x.Extensions
	}
	return nil
}

// Create a flow
//
// Very similar to `ddl.CreateTaskExpr`,
// replace `source_table_names` with `source_table_ids`
type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId            *v1.FlowId    `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	SourceTableIds    []*v1.TableId `protobuf:"bytes,2,rep,name=source_table_ids,json=sourceTableIds,proto3" json:"source_table_ids,omitempty"`
	SinkTableName     *v1.TableName `protobuf:"bytes,3,opt,name=sink_table_name,json=sinkTableName,proto3" json:"sink_table_name,omitempty"`
	CreateIfNotExists bool          `protobuf:"varint,4,opt,name=create_if_not_exists,json=createIfNotExists,proto3" json:"create_if_not_exists,omitempty"`
	// Expire data older than the given duration seconds.
	ExpireAfter  *v1.ExpireAfter   `protobuf:"bytes,5,opt,name=expire_after,json=expireAfter,proto3" json:"expire_after,omitempty"`
	EvalInterval *v1.EvalInterval  `protobuf:"bytes,10,opt,name=eval_interval,json=evalInterval,proto3" json:"eval_interval,omitempty"`
	Comment      string            `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
	Sql          string            `protobuf:"bytes,7,opt,name=sql,proto3" json:"sql,omitempty"`
	FlowOptions  map[string]string `protobuf:"bytes,8,rep,name=flow_options,json=flowOptions,proto3" json:"flow_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Set to true if the flow should be created or replaced.
	OrReplace bool `protobuf:"varint,9,opt,name=or_replace,json=orReplace,proto3" json:"or_replace,omitempty"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_flow_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_flow_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_greptime_v1_flow_server_proto_rawDescGZIP(), []int{7}
}

func (x *CreateRequest) GetFlowId() *v1.FlowId {
	if x != nil {
		return x.FlowId
	}
	return nil
}

func (x *CreateRequest) GetSourceTableIds() []*v1.TableId {
	if x != nil {
		return x.SourceTableIds
	}
	return nil
}

func (x *CreateRequest) GetSinkTableName() *v1.TableName {
	if x != nil {
		return x.SinkTableName
	}
	return nil
}

func (x *CreateRequest) GetCreateIfNotExists() bool {
	if x != nil {
		return x.CreateIfNotExists
	}
	return false
}

func (x *CreateRequest) GetExpireAfter() *v1.ExpireAfter {
	if x != nil {
		return x.ExpireAfter
	}
	return nil
}

func (x *CreateRequest) GetEvalInterval() *v1.EvalInterval {
	if x != nil {
		return x.EvalInterval
	}
	return nil
}

func (x *CreateRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *CreateRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *CreateRequest) GetFlowOptions() map[string]string {
	if x != nil {
		return x.FlowOptions
	}
	return nil
}

func (x *CreateRequest) GetOrReplace() bool {
	if x != nil {
		return x.OrReplace
	}
	return false
}

type DropRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId *v1.FlowId `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
}

func (x *DropRequest) Reset() {
	*x = DropRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_flow_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropRequest) ProtoMessage() {}

func (x *DropRequest) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_flow_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropRequest.ProtoReflect.Descriptor instead.
func (*DropRequest) Descriptor() ([]byte, []int) {
	return file_greptime_v1_flow_server_proto_rawDescGZIP(), []int{8}
}

func (x *DropRequest) GetFlowId() *v1.FlowId {
	if x != nil {
		return x.FlowId
	}
	return nil
}

type FlushFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId *v1.FlowId `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
}

func (x *FlushFlow) Reset() {
	*x = FlushFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_flow_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushFlow) ProtoMessage() {}

func (x *FlushFlow) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_flow_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushFlow.ProtoReflect.Descriptor instead.
func (*FlushFlow) Descriptor() ([]byte, []int) {
	return file_greptime_v1_flow_server_proto_rawDescGZIP(), []int{9}
}

func (x *FlushFlow) GetFlowId() *v1.FlowId {
	if x != nil {
		return x.FlowId
	}
	return nil
}

var File_greptime_v1_flow_server_proto protoreflect.FileDescriptor

var file_greptime_v1_flow_server_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x1a, 0x18, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x72, 0x65,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x64, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x13, 0x44, 0x69, 0x72,
	0x74, 0x79, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x40, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x69, 0x72, 0x74, 0x79, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x22, 0x4f, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x74, 0x79, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x73, 0x22, 0xf8, 0x01, 0x0a, 0x11, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x41, 0x0a, 0x13, 0x54,
	0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d,
	0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x53, 0x0a,
	0x0d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x72, 0x65, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x04, 0x72, 0x6f,
	0x77, 0x73, 0x22, 0xf7, 0x01, 0x0a, 0x0b, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x39, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x72,
	0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x72, 0x6f, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x12,
	0x33, 0x0a, 0x05, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x05, 0x66,
	0x6c, 0x75, 0x73, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xb3, 0x02, 0x0a,
	0x0c, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x61, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x52, 0x0d, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x6c,
	0x6f, 0x77, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xcb, 0x04, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x12, 0x3e, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x3e, 0x0a, 0x0f, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x72,
	0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x0d, 0x73, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x66, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x72, 0x65, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x12, 0x3e, 0x0a, 0x0d, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x52, 0x0c, 0x65, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x71,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12, 0x53, 0x0a, 0x0c,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x1a, 0x3e, 0x0a, 0x10, 0x46, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x3b, 0x0a, 0x0b, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x64, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x39, 0x0a,
	0x09, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x2c, 0x0a, 0x07, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x72,
	0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64,
	0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x32, 0x98, 0x02, 0x0a, 0x04, 0x46, 0x6c, 0x6f,
	0x77, 0x12, 0x53, 0x0a, 0x12, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x13, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x2e,
	0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a,
	0x1e, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x62, 0x0a, 0x19, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x44, 0x69, 0x72,
	0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x25, 0x2e, 0x67,
	0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x44, 0x69, 0x72, 0x74, 0x79, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x59, 0x0a, 0x13, 0x69, 0x6f, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x06, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47,
	0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x2f, 0x67, 0x72, 0x65, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x72,
	0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_greptime_v1_flow_server_proto_rawDescOnce sync.Once
	file_greptime_v1_flow_server_proto_rawDescData = file_greptime_v1_flow_server_proto_rawDesc
)

func file_greptime_v1_flow_server_proto_rawDescGZIP() []byte {
	file_greptime_v1_flow_server_proto_rawDescOnce.Do(func() {
		file_greptime_v1_flow_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_greptime_v1_flow_server_proto_rawDescData)
	})
	return file_greptime_v1_flow_server_proto_rawDescData
}

var file_greptime_v1_flow_server_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_greptime_v1_flow_server_proto_goTypes = []interface{}{
	(*DirtyWindowRequests)(nil), // 0: greptime.v1.flow.DirtyWindowRequests
	(*DirtyWindowRequest)(nil),  // 1: greptime.v1.flow.DirtyWindowRequest
	(*FlowRequestHeader)(nil),   // 2: greptime.v1.flow.FlowRequestHeader
	(*InsertRequests)(nil),      // 3: greptime.v1.flow.InsertRequests
	(*InsertRequest)(nil),       // 4: greptime.v1.flow.InsertRequest
	(*FlowRequest)(nil),         // 5: greptime.v1.flow.FlowRequest
	(*FlowResponse)(nil),        // 6: greptime.v1.flow.FlowResponse
	(*CreateRequest)(nil),       // 7: greptime.v1.flow.CreateRequest
	(*DropRequest)(nil),         // 8: greptime.v1.flow.DropRequest
	(*FlushFlow)(nil),           // 9: greptime.v1.flow.FlushFlow
	nil,                         // 10: greptime.v1.flow.FlowRequestHeader.TracingContextEntry
	nil,                         // 11: greptime.v1.flow.FlowResponse.ExtensionsEntry
	nil,                         // 12: greptime.v1.flow.CreateRequest.FlowOptionsEntry
	(*v1.QueryContext)(nil),     // 13: greptime.v1.QueryContext
	(*v1.Rows)(nil),             // 14: greptime.v1.Rows
	(*v1.ResponseHeader)(nil),   // 15: greptime.v1.ResponseHeader
	(*v1.FlowId)(nil),           // 16: greptime.v1.FlowId
	(*v1.TableId)(nil),          // 17: greptime.v1.TableId
	(*v1.TableName)(nil),        // 18: greptime.v1.TableName
	(*v1.ExpireAfter)(nil),      // 19: greptime.v1.ExpireAfter
	(*v1.EvalInterval)(nil),     // 20: greptime.v1.EvalInterval
}
var file_greptime_v1_flow_server_proto_depIdxs = []int32{
	1,  // 0: greptime.v1.flow.DirtyWindowRequests.requests:type_name -> greptime.v1.flow.DirtyWindowRequest
	10, // 1: greptime.v1.flow.FlowRequestHeader.tracing_context:type_name -> greptime.v1.flow.FlowRequestHeader.TracingContextEntry
	13, // 2: greptime.v1.flow.FlowRequestHeader.query_context:type_name -> greptime.v1.QueryContext
	4,  // 3: greptime.v1.flow.InsertRequests.requests:type_name -> greptime.v1.flow.InsertRequest
	14, // 4: greptime.v1.flow.InsertRequest.rows:type_name -> greptime.v1.Rows
	2,  // 5: greptime.v1.flow.FlowRequest.header:type_name -> greptime.v1.flow.FlowRequestHeader
	7,  // 6: greptime.v1.flow.FlowRequest.create:type_name -> greptime.v1.flow.CreateRequest
	8,  // 7: greptime.v1.flow.FlowRequest.drop:type_name -> greptime.v1.flow.DropRequest
	9,  // 8: greptime.v1.flow.FlowRequest.flush:type_name -> greptime.v1.flow.FlushFlow
	15, // 9: greptime.v1.flow.FlowResponse.header:type_name -> greptime.v1.ResponseHeader
	16, // 10: greptime.v1.flow.FlowResponse.affected_flows:type_name -> greptime.v1.FlowId
	11, // 11: greptime.v1.flow.FlowResponse.extensions:type_name -> greptime.v1.flow.FlowResponse.ExtensionsEntry
	16, // 12: greptime.v1.flow.CreateRequest.flow_id:type_name -> greptime.v1.FlowId
	17, // 13: greptime.v1.flow.CreateRequest.source_table_ids:type_name -> greptime.v1.TableId
	18, // 14: greptime.v1.flow.CreateRequest.sink_table_name:type_name -> greptime.v1.TableName
	19, // 15: greptime.v1.flow.CreateRequest.expire_after:type_name -> greptime.v1.ExpireAfter
	20, // 16: greptime.v1.flow.CreateRequest.eval_interval:type_name -> greptime.v1.EvalInterval
	12, // 17: greptime.v1.flow.CreateRequest.flow_options:type_name -> greptime.v1.flow.CreateRequest.FlowOptionsEntry
	16, // 18: greptime.v1.flow.DropRequest.flow_id:type_name -> greptime.v1.FlowId
	16, // 19: greptime.v1.flow.FlushFlow.flow_id:type_name -> greptime.v1.FlowId
	5,  // 20: greptime.v1.flow.Flow.HandleCreateRemove:input_type -> greptime.v1.flow.FlowRequest
	3,  // 21: greptime.v1.flow.Flow.HandleMirrorRequest:input_type -> greptime.v1.flow.InsertRequests
	0,  // 22: greptime.v1.flow.Flow.HandleMarkDirtyTimeWindow:input_type -> greptime.v1.flow.DirtyWindowRequests
	6,  // 23: greptime.v1.flow.Flow.HandleCreateRemove:output_type -> greptime.v1.flow.FlowResponse
	6,  // 24: greptime.v1.flow.Flow.HandleMirrorRequest:output_type -> greptime.v1.flow.FlowResponse
	6,  // 25: greptime.v1.flow.Flow.HandleMarkDirtyTimeWindow:output_type -> greptime.v1.flow.FlowResponse
	23, // [23:26] is the sub-list for method output_type
	20, // [20:23] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_greptime_v1_flow_server_proto_init() }
func file_greptime_v1_flow_server_proto_init() {
	if File_greptime_v1_flow_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_greptime_v1_flow_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirtyWindowRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_flow_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirtyWindowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_flow_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowRequestHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_flow_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_flow_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_flow_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_flow_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_flow_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_flow_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_flow_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_greptime_v1_flow_server_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*FlowRequest_Create)(nil),
		(*FlowRequest_Drop)(nil),
		(*FlowRequest_Flush)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_greptime_v1_flow_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_greptime_v1_flow_server_proto_goTypes,
		DependencyIndexes: file_greptime_v1_flow_server_proto_depIdxs,
		MessageInfos:      file_greptime_v1_flow_server_proto_msgTypes,
	}.Build()
	File_greptime_v1_flow_server_proto = out.File
	file_greptime_v1_flow_server_proto_rawDesc = nil
	file_greptime_v1_flow_server_proto_goTypes = nil
	file_greptime_v1_flow_server_proto_depIdxs = nil
}
