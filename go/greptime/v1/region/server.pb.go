// Copyright 2023 Greptime Team
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: greptime/v1/region/server.proto

package region

import (
	v1 "github.com/GreptimeTeam/greptime-proto/go/greptime/v1"
	meta "github.com/GreptimeTeam/greptime-proto/go/greptime/v1/meta"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegionRequestHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Encoded trace_id & span_id, follow the w3c Trace Context
	// https://www.w3.org/TR/trace-context/#header-name
	TracingContext map[string]string `protobuf:"bytes,5,rep,name=tracing_context,json=tracingContext,proto3" json:"tracing_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// DB Name of request, tracking only
	Dbname string `protobuf:"bytes,3,opt,name=dbname,proto3" json:"dbname,omitempty"`
	// The contextual information of the query
	QueryContext *v1.QueryContext `protobuf:"bytes,6,opt,name=query_context,json=queryContext,proto3" json:"query_context,omitempty"`
}

func (x *RegionRequestHeader) Reset() {
	*x = RegionRequestHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionRequestHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionRequestHeader) ProtoMessage() {}

func (x *RegionRequestHeader) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionRequestHeader.ProtoReflect.Descriptor instead.
func (*RegionRequestHeader) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{0}
}

func (x *RegionRequestHeader) GetTracingContext() map[string]string {
	if x != nil {
		return x.TracingContext
	}
	return nil
}

func (x *RegionRequestHeader) GetDbname() string {
	if x != nil {
		return x.Dbname
	}
	return ""
}

func (x *RegionRequestHeader) GetQueryContext() *v1.QueryContext {
	if x != nil {
		return x.QueryContext
	}
	return nil
}

type RegionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *RegionRequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// query request is handled in flight services.
	//
	// Types that are assignable to Body:
	//
	//	*RegionRequest_Inserts
	//	*RegionRequest_Deletes
	//	*RegionRequest_Create
	//	*RegionRequest_Drop
	//	*RegionRequest_Open
	//	*RegionRequest_Close
	//	*RegionRequest_Alter
	//	*RegionRequest_Flush
	//	*RegionRequest_Compact
	//	*RegionRequest_Truncate
	//	*RegionRequest_Creates
	//	*RegionRequest_Drops
	//	*RegionRequest_Alters
	//	*RegionRequest_BulkInsert
	//	*RegionRequest_Sync
	//	*RegionRequest_ListMetadata
	Body isRegionRequest_Body `protobuf_oneof:"body"`
}

func (x *RegionRequest) Reset() {
	*x = RegionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionRequest) ProtoMessage() {}

func (x *RegionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionRequest.ProtoReflect.Descriptor instead.
func (*RegionRequest) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{1}
}

func (x *RegionRequest) GetHeader() *RegionRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (m *RegionRequest) GetBody() isRegionRequest_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *RegionRequest) GetInserts() *InsertRequests {
	if x, ok := x.GetBody().(*RegionRequest_Inserts); ok {
		return x.Inserts
	}
	return nil
}

func (x *RegionRequest) GetDeletes() *DeleteRequests {
	if x, ok := x.GetBody().(*RegionRequest_Deletes); ok {
		return x.Deletes
	}
	return nil
}

func (x *RegionRequest) GetCreate() *CreateRequest {
	if x, ok := x.GetBody().(*RegionRequest_Create); ok {
		return x.Create
	}
	return nil
}

func (x *RegionRequest) GetDrop() *DropRequest {
	if x, ok := x.GetBody().(*RegionRequest_Drop); ok {
		return x.Drop
	}
	return nil
}

func (x *RegionRequest) GetOpen() *OpenRequest {
	if x, ok := x.GetBody().(*RegionRequest_Open); ok {
		return x.Open
	}
	return nil
}

func (x *RegionRequest) GetClose() *CloseRequest {
	if x, ok := x.GetBody().(*RegionRequest_Close); ok {
		return x.Close
	}
	return nil
}

func (x *RegionRequest) GetAlter() *AlterRequest {
	if x, ok := x.GetBody().(*RegionRequest_Alter); ok {
		return x.Alter
	}
	return nil
}

func (x *RegionRequest) GetFlush() *FlushRequest {
	if x, ok := x.GetBody().(*RegionRequest_Flush); ok {
		return x.Flush
	}
	return nil
}

func (x *RegionRequest) GetCompact() *CompactRequest {
	if x, ok := x.GetBody().(*RegionRequest_Compact); ok {
		return x.Compact
	}
	return nil
}

func (x *RegionRequest) GetTruncate() *TruncateRequest {
	if x, ok := x.GetBody().(*RegionRequest_Truncate); ok {
		return x.Truncate
	}
	return nil
}

func (x *RegionRequest) GetCreates() *CreateRequests {
	if x, ok := x.GetBody().(*RegionRequest_Creates); ok {
		return x.Creates
	}
	return nil
}

func (x *RegionRequest) GetDrops() *DropRequests {
	if x, ok := x.GetBody().(*RegionRequest_Drops); ok {
		return x.Drops
	}
	return nil
}

func (x *RegionRequest) GetAlters() *AlterRequests {
	if x, ok := x.GetBody().(*RegionRequest_Alters); ok {
		return x.Alters
	}
	return nil
}

func (x *RegionRequest) GetBulkInsert() *BulkInsertRequest {
	if x, ok := x.GetBody().(*RegionRequest_BulkInsert); ok {
		return x.BulkInsert
	}
	return nil
}

func (x *RegionRequest) GetSync() *SyncRequest {
	if x, ok := x.GetBody().(*RegionRequest_Sync); ok {
		return x.Sync
	}
	return nil
}

func (x *RegionRequest) GetListMetadata() *ListMetadataRequest {
	if x, ok := x.GetBody().(*RegionRequest_ListMetadata); ok {
		return x.ListMetadata
	}
	return nil
}

type isRegionRequest_Body interface {
	isRegionRequest_Body()
}

type RegionRequest_Inserts struct {
	Inserts *InsertRequests `protobuf:"bytes,3,opt,name=inserts,proto3,oneof"`
}

type RegionRequest_Deletes struct {
	Deletes *DeleteRequests `protobuf:"bytes,4,opt,name=deletes,proto3,oneof"`
}

type RegionRequest_Create struct {
	Create *CreateRequest `protobuf:"bytes,5,opt,name=create,proto3,oneof"`
}

type RegionRequest_Drop struct {
	Drop *DropRequest `protobuf:"bytes,6,opt,name=drop,proto3,oneof"`
}

type RegionRequest_Open struct {
	Open *OpenRequest `protobuf:"bytes,7,opt,name=open,proto3,oneof"`
}

type RegionRequest_Close struct {
	Close *CloseRequest `protobuf:"bytes,8,opt,name=close,proto3,oneof"`
}

type RegionRequest_Alter struct {
	Alter *AlterRequest `protobuf:"bytes,9,opt,name=alter,proto3,oneof"`
}

type RegionRequest_Flush struct {
	Flush *FlushRequest `protobuf:"bytes,10,opt,name=flush,proto3,oneof"`
}

type RegionRequest_Compact struct {
	Compact *CompactRequest `protobuf:"bytes,11,opt,name=compact,proto3,oneof"`
}

type RegionRequest_Truncate struct {
	Truncate *TruncateRequest `protobuf:"bytes,12,opt,name=truncate,proto3,oneof"`
}

type RegionRequest_Creates struct {
	Creates *CreateRequests `protobuf:"bytes,13,opt,name=creates,proto3,oneof"`
}

type RegionRequest_Drops struct {
	Drops *DropRequests `protobuf:"bytes,14,opt,name=drops,proto3,oneof"`
}

type RegionRequest_Alters struct {
	Alters *AlterRequests `protobuf:"bytes,15,opt,name=alters,proto3,oneof"`
}

type RegionRequest_BulkInsert struct {
	BulkInsert *BulkInsertRequest `protobuf:"bytes,16,opt,name=bulk_insert,json=bulkInsert,proto3,oneof"`
}

type RegionRequest_Sync struct {
	Sync *SyncRequest `protobuf:"bytes,17,opt,name=sync,proto3,oneof"`
}

type RegionRequest_ListMetadata struct {
	ListMetadata *ListMetadataRequest `protobuf:"bytes,18,opt,name=list_metadata,json=listMetadata,proto3,oneof"`
}

func (*RegionRequest_Inserts) isRegionRequest_Body() {}

func (*RegionRequest_Deletes) isRegionRequest_Body() {}

func (*RegionRequest_Create) isRegionRequest_Body() {}

func (*RegionRequest_Drop) isRegionRequest_Body() {}

func (*RegionRequest_Open) isRegionRequest_Body() {}

func (*RegionRequest_Close) isRegionRequest_Body() {}

func (*RegionRequest_Alter) isRegionRequest_Body() {}

func (*RegionRequest_Flush) isRegionRequest_Body() {}

func (*RegionRequest_Compact) isRegionRequest_Body() {}

func (*RegionRequest_Truncate) isRegionRequest_Body() {}

func (*RegionRequest_Creates) isRegionRequest_Body() {}

func (*RegionRequest_Drops) isRegionRequest_Body() {}

func (*RegionRequest_Alters) isRegionRequest_Body() {}

func (*RegionRequest_BulkInsert) isRegionRequest_Body() {}

func (*RegionRequest_Sync) isRegionRequest_Body() {}

func (*RegionRequest_ListMetadata) isRegionRequest_Body() {}

type RegionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *v1.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	AffectedRows uint64             `protobuf:"varint,2,opt,name=affected_rows,json=affectedRows,proto3" json:"affected_rows,omitempty"`
	Extensions   map[string][]byte  `protobuf:"bytes,3,rep,name=extensions,proto3" json:"extensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Response for ListMetadataRequest.
	// It is a json array of region metadatas.
	// The length of the array is equal to the number of regions in the list request.
	// The element is null if the region is not found.
	Metadata []byte `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *RegionResponse) Reset() {
	*x = RegionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionResponse) ProtoMessage() {}

func (x *RegionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionResponse.ProtoReflect.Descriptor instead.
func (*RegionResponse) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{2}
}

func (x *RegionResponse) GetHeader() *v1.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RegionResponse) GetAffectedRows() uint64 {
	if x != nil {
		return x.AffectedRows
	}
	return 0
}

func (x *RegionResponse) GetExtensions() map[string][]byte {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *RegionResponse) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type InsertRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*InsertRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *InsertRequests) Reset() {
	*x = InsertRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertRequests) ProtoMessage() {}

func (x *InsertRequests) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertRequests.ProtoReflect.Descriptor instead.
func (*InsertRequests) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{3}
}

func (x *InsertRequests) GetRequests() []*InsertRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type DeleteRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*DeleteRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *DeleteRequests) Reset() {
	*x = DeleteRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequests) ProtoMessage() {}

func (x *DeleteRequests) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequests.ProtoReflect.Descriptor instead.
func (*DeleteRequests) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteRequests) GetRequests() []*DeleteRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type InsertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId uint64   `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	Rows     *v1.Rows `protobuf:"bytes,2,opt,name=rows,proto3" json:"rows,omitempty"`
}

func (x *InsertRequest) Reset() {
	*x = InsertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertRequest) ProtoMessage() {}

func (x *InsertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertRequest.ProtoReflect.Descriptor instead.
func (*InsertRequest) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{5}
}

func (x *InsertRequest) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *InsertRequest) GetRows() *v1.Rows {
	if x != nil {
		return x.Rows
	}
	return nil
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId uint64   `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	Rows     *v1.Rows `protobuf:"bytes,2,opt,name=rows,proto3" json:"rows,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteRequest) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *DeleteRequest) GetRows() *v1.Rows {
	if x != nil {
		return x.Rows
	}
	return nil
}

type QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header   *RegionRequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RegionId uint64               `protobuf:"varint,2,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// substrait plan to query
	Plan []byte `protobuf:"bytes,3,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{7}
}

func (x *QueryRequest) GetHeader() *RegionRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *QueryRequest) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *QueryRequest) GetPlan() []byte {
	if x != nil {
		return x.Plan
	}
	return nil
}

// Create a batch of regions at once, usually used to create multiple logical
// regions at once. Different engines can choose whether to support this
// request. Metric Engine needs it.
type CreateRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*CreateRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *CreateRequests) Reset() {
	*x = CreateRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequests) ProtoMessage() {}

func (x *CreateRequests) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequests.ProtoReflect.Descriptor instead.
func (*CreateRequests) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{8}
}

func (x *CreateRequests) GetRequests() []*CreateRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// Region engine name
	Engine string `protobuf:"bytes,2,opt,name=engine,proto3" json:"engine,omitempty"`
	// Columns in this region.
	ColumnDefs []*RegionColumnDef `protobuf:"bytes,3,rep,name=column_defs,json=columnDefs,proto3" json:"column_defs,omitempty"`
	// Column Id of primary keys.
	PrimaryKey []uint32 `protobuf:"varint,4,rep,packed,name=primary_key,json=primaryKey,proto3" json:"primary_key,omitempty"`
	// Region storage path
	Path string `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	// Options of the created region.
	Options map[string]string `protobuf:"bytes,6,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Partition of the created region.
	Partition *meta.Partition `protobuf:"bytes,7,opt,name=partition,proto3" json:"partition,omitempty"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{9}
}

func (x *CreateRequest) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *CreateRequest) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *CreateRequest) GetColumnDefs() []*RegionColumnDef {
	if x != nil {
		return x.ColumnDefs
	}
	return nil
}

func (x *CreateRequest) GetPrimaryKey() []uint32 {
	if x != nil {
		return x.PrimaryKey
	}
	return nil
}

func (x *CreateRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CreateRequest) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CreateRequest) GetPartition() *meta.Partition {
	if x != nil {
		return x.Partition
	}
	return nil
}

// Same as CreateRequests, but for dropping regions.
type DropRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*DropRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *DropRequests) Reset() {
	*x = DropRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropRequests) ProtoMessage() {}

func (x *DropRequests) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropRequests.ProtoReflect.Descriptor instead.
func (*DropRequests) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{10}
}

func (x *DropRequests) GetRequests() []*DropRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type DropRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// Only used by Metric Engine, for fast path drop.
	// It only works for Metric Engine, and will be ignored by other engines.
	// If true, the Metric Engine will delete logical tables in memory, and drop the physical region eventually.
	FastPath bool `protobuf:"varint,2,opt,name=fast_path,json=fastPath,proto3" json:"fast_path,omitempty"`
}

func (x *DropRequest) Reset() {
	*x = DropRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropRequest) ProtoMessage() {}

func (x *DropRequest) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropRequest.ProtoReflect.Descriptor instead.
func (*DropRequest) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{11}
}

func (x *DropRequest) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *DropRequest) GetFastPath() bool {
	if x != nil {
		return x.FastPath
	}
	return false
}

type OpenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// Region engine name
	Engine string `protobuf:"bytes,2,opt,name=engine,proto3" json:"engine,omitempty"`
	// Region storage path
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Options of the opened region.
	Options map[string]string `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OpenRequest) Reset() {
	*x = OpenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenRequest) ProtoMessage() {}

func (x *OpenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenRequest.ProtoReflect.Descriptor instead.
func (*OpenRequest) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{12}
}

func (x *OpenRequest) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *OpenRequest) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *OpenRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *OpenRequest) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type CloseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
}

func (x *CloseRequest) Reset() {
	*x = CloseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseRequest) ProtoMessage() {}

func (x *CloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseRequest.ProtoReflect.Descriptor instead.
func (*CloseRequest) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{13}
}

func (x *CloseRequest) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

type AlterRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*AlterRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *AlterRequests) Reset() {
	*x = AlterRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterRequests) ProtoMessage() {}

func (x *AlterRequests) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterRequests.ProtoReflect.Descriptor instead.
func (*AlterRequests) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{14}
}

func (x *AlterRequests) GetRequests() []*AlterRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type AlterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// Types that are assignable to Kind:
	//
	//	*AlterRequest_AddColumns
	//	*AlterRequest_DropColumns
	//	*AlterRequest_ModifyColumnTypes
	//	*AlterRequest_SetTableOptions
	//	*AlterRequest_UnsetTableOptions
	//	*AlterRequest_SetIndex
	//	*AlterRequest_UnsetIndex
	//	*AlterRequest_DropDefaults
	//	*AlterRequest_SetIndexes
	//	*AlterRequest_UnsetIndexes
	//	*AlterRequest_SetDefaults
	//	*AlterRequest_SyncColumns
	Kind isAlterRequest_Kind `protobuf_oneof:"kind"`
	// The version of the schema before applying the alteration.
	SchemaVersion uint64 `protobuf:"varint,4,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`
}

func (x *AlterRequest) Reset() {
	*x = AlterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterRequest) ProtoMessage() {}

func (x *AlterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterRequest.ProtoReflect.Descriptor instead.
func (*AlterRequest) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{15}
}

func (x *AlterRequest) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (m *AlterRequest) GetKind() isAlterRequest_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *AlterRequest) GetAddColumns() *AddColumns {
	if x, ok := x.GetKind().(*AlterRequest_AddColumns); ok {
		return x.AddColumns
	}
	return nil
}

func (x *AlterRequest) GetDropColumns() *DropColumns {
	if x, ok := x.GetKind().(*AlterRequest_DropColumns); ok {
		return x.DropColumns
	}
	return nil
}

func (x *AlterRequest) GetModifyColumnTypes() *v1.ModifyColumnTypes {
	if x, ok := x.GetKind().(*AlterRequest_ModifyColumnTypes); ok {
		return x.ModifyColumnTypes
	}
	return nil
}

func (x *AlterRequest) GetSetTableOptions() *v1.SetTableOptions {
	if x, ok := x.GetKind().(*AlterRequest_SetTableOptions); ok {
		return x.SetTableOptions
	}
	return nil
}

func (x *AlterRequest) GetUnsetTableOptions() *v1.UnsetTableOptions {
	if x, ok := x.GetKind().(*AlterRequest_UnsetTableOptions); ok {
		return x.UnsetTableOptions
	}
	return nil
}

func (x *AlterRequest) GetSetIndex() *v1.SetIndex {
	if x, ok := x.GetKind().(*AlterRequest_SetIndex); ok {
		return x.SetIndex
	}
	return nil
}

func (x *AlterRequest) GetUnsetIndex() *v1.UnsetIndex {
	if x, ok := x.GetKind().(*AlterRequest_UnsetIndex); ok {
		return x.UnsetIndex
	}
	return nil
}

func (x *AlterRequest) GetDropDefaults() *v1.DropDefaults {
	if x, ok := x.GetKind().(*AlterRequest_DropDefaults); ok {
		return x.DropDefaults
	}
	return nil
}

func (x *AlterRequest) GetSetIndexes() *v1.SetIndexes {
	if x, ok := x.GetKind().(*AlterRequest_SetIndexes); ok {
		return x.SetIndexes
	}
	return nil
}

func (x *AlterRequest) GetUnsetIndexes() *v1.UnsetIndexes {
	if x, ok := x.GetKind().(*AlterRequest_UnsetIndexes); ok {
		return x.UnsetIndexes
	}
	return nil
}

func (x *AlterRequest) GetSetDefaults() *v1.SetDefaults {
	if x, ok := x.GetKind().(*AlterRequest_SetDefaults); ok {
		return x.SetDefaults
	}
	return nil
}

func (x *AlterRequest) GetSyncColumns() *SyncColumns {
	if x, ok := x.GetKind().(*AlterRequest_SyncColumns); ok {
		return x.SyncColumns
	}
	return nil
}

func (x *AlterRequest) GetSchemaVersion() uint64 {
	if x != nil {
		return x.SchemaVersion
	}
	return 0
}

type isAlterRequest_Kind interface {
	isAlterRequest_Kind()
}

type AlterRequest_AddColumns struct {
	AddColumns *AddColumns `protobuf:"bytes,2,opt,name=add_columns,json=addColumns,proto3,oneof"`
}

type AlterRequest_DropColumns struct {
	DropColumns *DropColumns `protobuf:"bytes,3,opt,name=drop_columns,json=dropColumns,proto3,oneof"`
}

type AlterRequest_ModifyColumnTypes struct {
	ModifyColumnTypes *v1.ModifyColumnTypes `protobuf:"bytes,5,opt,name=modify_column_types,json=modifyColumnTypes,proto3,oneof"`
}

type AlterRequest_SetTableOptions struct {
	SetTableOptions *v1.SetTableOptions `protobuf:"bytes,6,opt,name=set_table_options,json=setTableOptions,proto3,oneof"`
}

type AlterRequest_UnsetTableOptions struct {
	UnsetTableOptions *v1.UnsetTableOptions `protobuf:"bytes,9,opt,name=unset_table_options,json=unsetTableOptions,proto3,oneof"`
}

type AlterRequest_SetIndex struct {
	// Deprecated: use set_indexes instead.
	SetIndex *v1.SetIndex `protobuf:"bytes,10,opt,name=set_index,json=setIndex,proto3,oneof"`
}

type AlterRequest_UnsetIndex struct {
	// Deprecated: use unset_indexes instead.
	UnsetIndex *v1.UnsetIndex `protobuf:"bytes,11,opt,name=unset_index,json=unsetIndex,proto3,oneof"`
}

type AlterRequest_DropDefaults struct {
	DropDefaults *v1.DropDefaults `protobuf:"bytes,12,opt,name=drop_defaults,json=dropDefaults,proto3,oneof"`
}

type AlterRequest_SetIndexes struct {
	SetIndexes *v1.SetIndexes `protobuf:"bytes,13,opt,name=set_indexes,json=setIndexes,proto3,oneof"`
}

type AlterRequest_UnsetIndexes struct {
	UnsetIndexes *v1.UnsetIndexes `protobuf:"bytes,14,opt,name=unset_indexes,json=unsetIndexes,proto3,oneof"`
}

type AlterRequest_SetDefaults struct {
	SetDefaults *v1.SetDefaults `protobuf:"bytes,15,opt,name=set_defaults,json=setDefaults,proto3,oneof"`
}

type AlterRequest_SyncColumns struct {
	SyncColumns *SyncColumns `protobuf:"bytes,16,opt,name=sync_columns,json=syncColumns,proto3,oneof"`
}

func (*AlterRequest_AddColumns) isAlterRequest_Kind() {}

func (*AlterRequest_DropColumns) isAlterRequest_Kind() {}

func (*AlterRequest_ModifyColumnTypes) isAlterRequest_Kind() {}

func (*AlterRequest_SetTableOptions) isAlterRequest_Kind() {}

func (*AlterRequest_UnsetTableOptions) isAlterRequest_Kind() {}

func (*AlterRequest_SetIndex) isAlterRequest_Kind() {}

func (*AlterRequest_UnsetIndex) isAlterRequest_Kind() {}

func (*AlterRequest_DropDefaults) isAlterRequest_Kind() {}

func (*AlterRequest_SetIndexes) isAlterRequest_Kind() {}

func (*AlterRequest_UnsetIndexes) isAlterRequest_Kind() {}

func (*AlterRequest_SetDefaults) isAlterRequest_Kind() {}

func (*AlterRequest_SyncColumns) isAlterRequest_Kind() {}

type SyncColumns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnDefs []*RegionColumnDef `protobuf:"bytes,1,rep,name=column_defs,json=columnDefs,proto3" json:"column_defs,omitempty"`
}

func (x *SyncColumns) Reset() {
	*x = SyncColumns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncColumns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncColumns) ProtoMessage() {}

func (x *SyncColumns) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncColumns.ProtoReflect.Descriptor instead.
func (*SyncColumns) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{16}
}

func (x *SyncColumns) GetColumnDefs() []*RegionColumnDef {
	if x != nil {
		return x.ColumnDefs
	}
	return nil
}

type AddColumns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddColumns []*AddColumn `protobuf:"bytes,1,rep,name=add_columns,json=addColumns,proto3" json:"add_columns,omitempty"`
}

func (x *AddColumns) Reset() {
	*x = AddColumns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddColumns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddColumns) ProtoMessage() {}

func (x *AddColumns) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddColumns.ProtoReflect.Descriptor instead.
func (*AddColumns) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{17}
}

func (x *AddColumns) GetAddColumns() []*AddColumn {
	if x != nil {
		return x.AddColumns
	}
	return nil
}

type DropColumns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DropColumns []*DropColumn `protobuf:"bytes,1,rep,name=drop_columns,json=dropColumns,proto3" json:"drop_columns,omitempty"`
}

func (x *DropColumns) Reset() {
	*x = DropColumns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropColumns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropColumns) ProtoMessage() {}

func (x *DropColumns) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropColumns.ProtoReflect.Descriptor instead.
func (*DropColumns) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{18}
}

func (x *DropColumns) GetDropColumns() []*DropColumn {
	if x != nil {
		return x.DropColumns
	}
	return nil
}

type AddColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnDef *RegionColumnDef      `protobuf:"bytes,1,opt,name=column_def,json=columnDef,proto3" json:"column_def,omitempty"`
	Location  *v1.AddColumnLocation `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *AddColumn) Reset() {
	*x = AddColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddColumn) ProtoMessage() {}

func (x *AddColumn) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddColumn.ProtoReflect.Descriptor instead.
func (*AddColumn) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{19}
}

func (x *AddColumn) GetColumnDef() *RegionColumnDef {
	if x != nil {
		return x.ColumnDef
	}
	return nil
}

func (x *AddColumn) GetLocation() *v1.AddColumnLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

type DropColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DropColumn) Reset() {
	*x = DropColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropColumn) ProtoMessage() {}

func (x *DropColumn) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropColumn.ProtoReflect.Descriptor instead.
func (*DropColumn) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{20}
}

func (x *DropColumn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FlushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
}

func (x *FlushRequest) Reset() {
	*x = FlushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushRequest) ProtoMessage() {}

func (x *FlushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushRequest.ProtoReflect.Descriptor instead.
func (*FlushRequest) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{21}
}

func (x *FlushRequest) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

// / Regular compaction
type Regular struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Regular) Reset() {
	*x = Regular{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Regular) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Regular) ProtoMessage() {}

func (x *Regular) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Regular.ProtoReflect.Descriptor instead.
func (*Regular) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{22}
}

// / Strictly-windowed compaction.
type StrictWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindowSeconds int64 `protobuf:"varint,1,opt,name=window_seconds,json=windowSeconds,proto3" json:"window_seconds,omitempty"`
}

func (x *StrictWindow) Reset() {
	*x = StrictWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrictWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrictWindow) ProtoMessage() {}

func (x *StrictWindow) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrictWindow.ProtoReflect.Descriptor instead.
func (*StrictWindow) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{23}
}

func (x *StrictWindow) GetWindowSeconds() int64 {
	if x != nil {
		return x.WindowSeconds
	}
	return 0
}

type CompactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// Types that are assignable to Options:
	//
	//	*CompactRequest_Regular
	//	*CompactRequest_StrictWindow
	Options isCompactRequest_Options `protobuf_oneof:"options"`
}

func (x *CompactRequest) Reset() {
	*x = CompactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactRequest) ProtoMessage() {}

func (x *CompactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactRequest.ProtoReflect.Descriptor instead.
func (*CompactRequest) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{24}
}

func (x *CompactRequest) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (m *CompactRequest) GetOptions() isCompactRequest_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

func (x *CompactRequest) GetRegular() *Regular {
	if x, ok := x.GetOptions().(*CompactRequest_Regular); ok {
		return x.Regular
	}
	return nil
}

func (x *CompactRequest) GetStrictWindow() *StrictWindow {
	if x, ok := x.GetOptions().(*CompactRequest_StrictWindow); ok {
		return x.StrictWindow
	}
	return nil
}

type isCompactRequest_Options interface {
	isCompactRequest_Options()
}

type CompactRequest_Regular struct {
	Regular *Regular `protobuf:"bytes,2,opt,name=regular,proto3,oneof"`
}

type CompactRequest_StrictWindow struct {
	StrictWindow *StrictWindow `protobuf:"bytes,3,opt,name=strict_window,json=strictWindow,proto3,oneof"`
}

func (*CompactRequest_Regular) isCompactRequest_Options() {}

func (*CompactRequest_StrictWindow) isCompactRequest_Options() {}

type TruncateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// Types that are assignable to Kind:
	//
	//	*TruncateRequest_All
	//	*TruncateRequest_TimeRanges
	Kind isTruncateRequest_Kind `protobuf_oneof:"kind"`
}

func (x *TruncateRequest) Reset() {
	*x = TruncateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TruncateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncateRequest) ProtoMessage() {}

func (x *TruncateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncateRequest.ProtoReflect.Descriptor instead.
func (*TruncateRequest) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{25}
}

func (x *TruncateRequest) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (m *TruncateRequest) GetKind() isTruncateRequest_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *TruncateRequest) GetAll() *All {
	if x, ok := x.GetKind().(*TruncateRequest_All); ok {
		return x.All
	}
	return nil
}

func (x *TruncateRequest) GetTimeRanges() *v1.TimeRanges {
	if x, ok := x.GetKind().(*TruncateRequest_TimeRanges); ok {
		return x.TimeRanges
	}
	return nil
}

type isTruncateRequest_Kind interface {
	isTruncateRequest_Kind()
}

type TruncateRequest_All struct {
	All *All `protobuf:"bytes,2,opt,name=all,proto3,oneof"`
}

type TruncateRequest_TimeRanges struct {
	TimeRanges *v1.TimeRanges `protobuf:"bytes,3,opt,name=time_ranges,json=timeRanges,proto3,oneof"`
}

func (*TruncateRequest_All) isTruncateRequest_Kind() {}

func (*TruncateRequest_TimeRanges) isTruncateRequest_Kind() {}

// Truncate all data in region
type All struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *All) Reset() {
	*x = All{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *All) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*All) ProtoMessage() {}

func (x *All) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use All.ProtoReflect.Descriptor instead.
func (*All) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{26}
}

// The column definition of a region. Unlike the message `ColumnDef` in
// `ddl.proto` which is for clients outside GreptimeDB, this `RegionColumnDef`
// is for region requests use only. So it carries an extra field `column_id`
// that is known internally.
type RegionColumnDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnDef *v1.ColumnDef `protobuf:"bytes,1,opt,name=column_def,json=columnDef,proto3" json:"column_def,omitempty"`
	ColumnId  uint32        `protobuf:"varint,2,opt,name=column_id,json=columnId,proto3" json:"column_id,omitempty"`
}

func (x *RegionColumnDef) Reset() {
	*x = RegionColumnDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionColumnDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionColumnDef) ProtoMessage() {}

func (x *RegionColumnDef) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionColumnDef.ProtoReflect.Descriptor instead.
func (*RegionColumnDef) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{27}
}

func (x *RegionColumnDef) GetColumnDef() *v1.ColumnDef {
	if x != nil {
		return x.ColumnDef
	}
	return nil
}

func (x *RegionColumnDef) GetColumnId() uint32 {
	if x != nil {
		return x.ColumnId
	}
	return 0
}

// Request of bulk ingestion API.
type BulkInsertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// Types that are assignable to Body:
	//
	//	*BulkInsertRequest_ArrowIpc
	Body isBulkInsertRequest_Body `protobuf_oneof:"body"`
}

func (x *BulkInsertRequest) Reset() {
	*x = BulkInsertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkInsertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkInsertRequest) ProtoMessage() {}

func (x *BulkInsertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkInsertRequest.ProtoReflect.Descriptor instead.
func (*BulkInsertRequest) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{28}
}

func (x *BulkInsertRequest) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (m *BulkInsertRequest) GetBody() isBulkInsertRequest_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *BulkInsertRequest) GetArrowIpc() *v1.ArrowIpc {
	if x, ok := x.GetBody().(*BulkInsertRequest_ArrowIpc); ok {
		return x.ArrowIpc
	}
	return nil
}

type isBulkInsertRequest_Body interface {
	isBulkInsertRequest_Body()
}

type BulkInsertRequest_ArrowIpc struct {
	ArrowIpc *v1.ArrowIpc `protobuf:"bytes,2,opt,name=arrow_ipc,json=arrowIpc,proto3,oneof"`
}

func (*BulkInsertRequest_ArrowIpc) isBulkInsertRequest_Body() {}

// Manifest info for mito engine.
type MitoManifestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataManifestVersion uint64 `protobuf:"varint,1,opt,name=data_manifest_version,json=dataManifestVersion,proto3" json:"data_manifest_version,omitempty"`
}

func (x *MitoManifestInfo) Reset() {
	*x = MitoManifestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MitoManifestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitoManifestInfo) ProtoMessage() {}

func (x *MitoManifestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitoManifestInfo.ProtoReflect.Descriptor instead.
func (*MitoManifestInfo) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{29}
}

func (x *MitoManifestInfo) GetDataManifestVersion() uint64 {
	if x != nil {
		return x.DataManifestVersion
	}
	return 0
}

// Manifest info for metric engine.
type MetricManifestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataManifestVersion     uint64 `protobuf:"varint,1,opt,name=data_manifest_version,json=dataManifestVersion,proto3" json:"data_manifest_version,omitempty"`
	MetadataManifestVersion uint64 `protobuf:"varint,2,opt,name=metadata_manifest_version,json=metadataManifestVersion,proto3" json:"metadata_manifest_version,omitempty"`
}

func (x *MetricManifestInfo) Reset() {
	*x = MetricManifestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricManifestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricManifestInfo) ProtoMessage() {}

func (x *MetricManifestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricManifestInfo.ProtoReflect.Descriptor instead.
func (*MetricManifestInfo) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{30}
}

func (x *MetricManifestInfo) GetDataManifestVersion() uint64 {
	if x != nil {
		return x.DataManifestVersion
	}
	return 0
}

func (x *MetricManifestInfo) GetMetadataManifestVersion() uint64 {
	if x != nil {
		return x.MetadataManifestVersion
	}
	return 0
}

// Sync request for region.
type SyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// Types that are assignable to ManifestInfo:
	//
	//	*SyncRequest_MitoManifestInfo
	//	*SyncRequest_MetricManifestInfo
	ManifestInfo isSyncRequest_ManifestInfo `protobuf_oneof:"manifest_info"`
}

func (x *SyncRequest) Reset() {
	*x = SyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRequest) ProtoMessage() {}

func (x *SyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRequest.ProtoReflect.Descriptor instead.
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{31}
}

func (x *SyncRequest) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (m *SyncRequest) GetManifestInfo() isSyncRequest_ManifestInfo {
	if m != nil {
		return m.ManifestInfo
	}
	return nil
}

func (x *SyncRequest) GetMitoManifestInfo() *MitoManifestInfo {
	if x, ok := x.GetManifestInfo().(*SyncRequest_MitoManifestInfo); ok {
		return x.MitoManifestInfo
	}
	return nil
}

func (x *SyncRequest) GetMetricManifestInfo() *MetricManifestInfo {
	if x, ok := x.GetManifestInfo().(*SyncRequest_MetricManifestInfo); ok {
		return x.MetricManifestInfo
	}
	return nil
}

type isSyncRequest_ManifestInfo interface {
	isSyncRequest_ManifestInfo()
}

type SyncRequest_MitoManifestInfo struct {
	MitoManifestInfo *MitoManifestInfo `protobuf:"bytes,2,opt,name=mito_manifest_info,json=mitoManifestInfo,proto3,oneof"`
}

type SyncRequest_MetricManifestInfo struct {
	MetricManifestInfo *MetricManifestInfo `protobuf:"bytes,3,opt,name=metric_manifest_info,json=metricManifestInfo,proto3,oneof"`
}

func (*SyncRequest_MitoManifestInfo) isSyncRequest_ManifestInfo() {}

func (*SyncRequest_MetricManifestInfo) isSyncRequest_ManifestInfo() {}

// Get region metadatas of a list of regions.
type ListMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionIds []uint64 `protobuf:"varint,1,rep,packed,name=region_ids,json=regionIds,proto3" json:"region_ids,omitempty"`
}

func (x *ListMetadataRequest) Reset() {
	*x = ListMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_region_server_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMetadataRequest) ProtoMessage() {}

func (x *ListMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_region_server_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMetadataRequest.ProtoReflect.Descriptor instead.
func (*ListMetadataRequest) Descriptor() ([]byte, []int) {
	return file_greptime_v1_region_server_proto_rawDescGZIP(), []int{32}
}

func (x *ListMetadataRequest) GetRegionIds() []uint64 {
	if x != nil {
		return x.RegionIds
	}
	return nil
}

var File_greptime_v1_region_server_proto protoreflect.FileDescriptor

var file_greptime_v1_region_server_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x15, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x64, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x02, 0x0a, 0x13,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67,
	0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x62, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x1a, 0x41, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xbc, 0x08, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x48, 0x00, 0x52, 0x07,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x48, 0x00, 0x52, 0x07,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x12, 0x35, 0x0a, 0x04, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x65, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x70,
	0x65, 0x6e, 0x12, 0x38, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72,
	0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x05, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x05, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x75, 0x73, 0x68,
	0x12, 0x3e, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x12, 0x41, 0x0a, 0x08, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x48, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x48, 0x00, 0x52, 0x05, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x3b, 0x0a,
	0x06, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x48, 0x00, 0x52, 0x06, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x0b, 0x62, 0x75,
	0x6c, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x75, 0x6c, 0x6b, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x4e, 0x0a, 0x0d, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x22, 0x99, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73,
	0x12, 0x52, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x3d, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x4f, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x3d, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x22, 0x4f, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x22, 0x53, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x77, 0x73,
	0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x53, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x0c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c,
	0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x22, 0x4f,
	0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x3d, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22,
	0x80, 0x03, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x64, 0x65, 0x66, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x72,
	0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66,
	0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x48, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x4b, 0x0a, 0x0c, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22,
	0x47, 0x0a, 0x0b, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x66, 0x61, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0xda, 0x01, 0x0a, 0x0b, 0x4f, 0x70, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x46, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2b, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x4d, 0x0a, 0x0d, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x22, 0x8a, 0x07, 0x0a, 0x0c, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x41, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x72,
	0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x72, 0x6f,
	0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x73, 0x65,
	0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x13, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x11, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x72,
	0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x0a,
	0x75, 0x6e, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x40, 0x0a, 0x0d, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x72, 0x6f, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0c,
	0x64, 0x72, 0x6f, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0b,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x75, 0x6e, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e,
	0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x6e,
	0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x65,
	0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x53,
	0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x44, 0x0a,
	0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44,
	0x65, 0x66, 0x73, 0x22, 0x4c, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x22, 0x50, 0x0a, 0x0b, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x12, 0x41, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x72, 0x6f, 0x70,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x44, 0x65, 0x66, 0x12, 0x3a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x20, 0x0a, 0x0a, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x0c, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x09, 0x0a, 0x07, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x22, 0x35, 0x0a, 0x0c, 0x53,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x25, 0x0a, 0x0e, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x12, 0x47, 0x0a, 0x0d, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x42, 0x09, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x9f, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x3a, 0x0a,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x22, 0x05, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x22, 0x65, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x12, 0x35, 0x0a, 0x0a, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44,
	0x65, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x22,
	0x6e, 0x0a, 0x11, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x09, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x70, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x49, 0x70, 0x63, 0x48, 0x00, 0x52, 0x08, 0x61,
	0x72, 0x72, 0x6f, 0x77, 0x49, 0x70, 0x63, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22,
	0x46, 0x0a, 0x10, 0x4d, 0x69, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x12, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32,
	0x0a, 0x15, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x64,
	0x61, 0x74, 0x61, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d,
	0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4d,
	0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xed,
	0x01, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x12, 0x6d,
	0x69, 0x74, 0x6f, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x74,
	0x6f, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x10, 0x6d, 0x69, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x5a, 0x0a, 0x14, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0f, 0x0a,
	0x0d, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x34,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x73, 0x32, 0x59, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x4f,
	0x0a, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x72,
	0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x5d, 0x0a, 0x15, 0x69, 0x6f, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x72, 0x65,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x2f, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x72, 0x65, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_greptime_v1_region_server_proto_rawDescOnce sync.Once
	file_greptime_v1_region_server_proto_rawDescData = file_greptime_v1_region_server_proto_rawDesc
)

func file_greptime_v1_region_server_proto_rawDescGZIP() []byte {
	file_greptime_v1_region_server_proto_rawDescOnce.Do(func() {
		file_greptime_v1_region_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_greptime_v1_region_server_proto_rawDescData)
	})
	return file_greptime_v1_region_server_proto_rawDescData
}

var file_greptime_v1_region_server_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_greptime_v1_region_server_proto_goTypes = []interface{}{
	(*RegionRequestHeader)(nil),  // 0: greptime.v1.region.RegionRequestHeader
	(*RegionRequest)(nil),        // 1: greptime.v1.region.RegionRequest
	(*RegionResponse)(nil),       // 2: greptime.v1.region.RegionResponse
	(*InsertRequests)(nil),       // 3: greptime.v1.region.InsertRequests
	(*DeleteRequests)(nil),       // 4: greptime.v1.region.DeleteRequests
	(*InsertRequest)(nil),        // 5: greptime.v1.region.InsertRequest
	(*DeleteRequest)(nil),        // 6: greptime.v1.region.DeleteRequest
	(*QueryRequest)(nil),         // 7: greptime.v1.region.QueryRequest
	(*CreateRequests)(nil),       // 8: greptime.v1.region.CreateRequests
	(*CreateRequest)(nil),        // 9: greptime.v1.region.CreateRequest
	(*DropRequests)(nil),         // 10: greptime.v1.region.DropRequests
	(*DropRequest)(nil),          // 11: greptime.v1.region.DropRequest
	(*OpenRequest)(nil),          // 12: greptime.v1.region.OpenRequest
	(*CloseRequest)(nil),         // 13: greptime.v1.region.CloseRequest
	(*AlterRequests)(nil),        // 14: greptime.v1.region.AlterRequests
	(*AlterRequest)(nil),         // 15: greptime.v1.region.AlterRequest
	(*SyncColumns)(nil),          // 16: greptime.v1.region.SyncColumns
	(*AddColumns)(nil),           // 17: greptime.v1.region.AddColumns
	(*DropColumns)(nil),          // 18: greptime.v1.region.DropColumns
	(*AddColumn)(nil),            // 19: greptime.v1.region.AddColumn
	(*DropColumn)(nil),           // 20: greptime.v1.region.DropColumn
	(*FlushRequest)(nil),         // 21: greptime.v1.region.FlushRequest
	(*Regular)(nil),              // 22: greptime.v1.region.Regular
	(*StrictWindow)(nil),         // 23: greptime.v1.region.StrictWindow
	(*CompactRequest)(nil),       // 24: greptime.v1.region.CompactRequest
	(*TruncateRequest)(nil),      // 25: greptime.v1.region.TruncateRequest
	(*All)(nil),                  // 26: greptime.v1.region.All
	(*RegionColumnDef)(nil),      // 27: greptime.v1.region.RegionColumnDef
	(*BulkInsertRequest)(nil),    // 28: greptime.v1.region.BulkInsertRequest
	(*MitoManifestInfo)(nil),     // 29: greptime.v1.region.MitoManifestInfo
	(*MetricManifestInfo)(nil),   // 30: greptime.v1.region.MetricManifestInfo
	(*SyncRequest)(nil),          // 31: greptime.v1.region.SyncRequest
	(*ListMetadataRequest)(nil),  // 32: greptime.v1.region.ListMetadataRequest
	nil,                          // 33: greptime.v1.region.RegionRequestHeader.TracingContextEntry
	nil,                          // 34: greptime.v1.region.RegionResponse.ExtensionsEntry
	nil,                          // 35: greptime.v1.region.CreateRequest.OptionsEntry
	nil,                          // 36: greptime.v1.region.OpenRequest.OptionsEntry
	(*v1.QueryContext)(nil),      // 37: greptime.v1.QueryContext
	(*v1.ResponseHeader)(nil),    // 38: greptime.v1.ResponseHeader
	(*v1.Rows)(nil),              // 39: greptime.v1.Rows
	(*meta.Partition)(nil),       // 40: greptime.v1.meta.Partition
	(*v1.ModifyColumnTypes)(nil), // 41: greptime.v1.ModifyColumnTypes
	(*v1.SetTableOptions)(nil),   // 42: greptime.v1.SetTableOptions
	(*v1.UnsetTableOptions)(nil), // 43: greptime.v1.UnsetTableOptions
	(*v1.SetIndex)(nil),          // 44: greptime.v1.SetIndex
	(*v1.UnsetIndex)(nil),        // 45: greptime.v1.UnsetIndex
	(*v1.DropDefaults)(nil),      // 46: greptime.v1.DropDefaults
	(*v1.SetIndexes)(nil),        // 47: greptime.v1.SetIndexes
	(*v1.UnsetIndexes)(nil),      // 48: greptime.v1.UnsetIndexes
	(*v1.SetDefaults)(nil),       // 49: greptime.v1.SetDefaults
	(*v1.AddColumnLocation)(nil), // 50: greptime.v1.AddColumnLocation
	(*v1.TimeRanges)(nil),        // 51: greptime.v1.TimeRanges
	(*v1.ColumnDef)(nil),         // 52: greptime.v1.ColumnDef
	(*v1.ArrowIpc)(nil),          // 53: greptime.v1.ArrowIpc
}
var file_greptime_v1_region_server_proto_depIdxs = []int32{
	33, // 0: greptime.v1.region.RegionRequestHeader.tracing_context:type_name -> greptime.v1.region.RegionRequestHeader.TracingContextEntry
	37, // 1: greptime.v1.region.RegionRequestHeader.query_context:type_name -> greptime.v1.QueryContext
	0,  // 2: greptime.v1.region.RegionRequest.header:type_name -> greptime.v1.region.RegionRequestHeader
	3,  // 3: greptime.v1.region.RegionRequest.inserts:type_name -> greptime.v1.region.InsertRequests
	4,  // 4: greptime.v1.region.RegionRequest.deletes:type_name -> greptime.v1.region.DeleteRequests
	9,  // 5: greptime.v1.region.RegionRequest.create:type_name -> greptime.v1.region.CreateRequest
	11, // 6: greptime.v1.region.RegionRequest.drop:type_name -> greptime.v1.region.DropRequest
	12, // 7: greptime.v1.region.RegionRequest.open:type_name -> greptime.v1.region.OpenRequest
	13, // 8: greptime.v1.region.RegionRequest.close:type_name -> greptime.v1.region.CloseRequest
	15, // 9: greptime.v1.region.RegionRequest.alter:type_name -> greptime.v1.region.AlterRequest
	21, // 10: greptime.v1.region.RegionRequest.flush:type_name -> greptime.v1.region.FlushRequest
	24, // 11: greptime.v1.region.RegionRequest.compact:type_name -> greptime.v1.region.CompactRequest
	25, // 12: greptime.v1.region.RegionRequest.truncate:type_name -> greptime.v1.region.TruncateRequest
	8,  // 13: greptime.v1.region.RegionRequest.creates:type_name -> greptime.v1.region.CreateRequests
	10, // 14: greptime.v1.region.RegionRequest.drops:type_name -> greptime.v1.region.DropRequests
	14, // 15: greptime.v1.region.RegionRequest.alters:type_name -> greptime.v1.region.AlterRequests
	28, // 16: greptime.v1.region.RegionRequest.bulk_insert:type_name -> greptime.v1.region.BulkInsertRequest
	31, // 17: greptime.v1.region.RegionRequest.sync:type_name -> greptime.v1.region.SyncRequest
	32, // 18: greptime.v1.region.RegionRequest.list_metadata:type_name -> greptime.v1.region.ListMetadataRequest
	38, // 19: greptime.v1.region.RegionResponse.header:type_name -> greptime.v1.ResponseHeader
	34, // 20: greptime.v1.region.RegionResponse.extensions:type_name -> greptime.v1.region.RegionResponse.ExtensionsEntry
	5,  // 21: greptime.v1.region.InsertRequests.requests:type_name -> greptime.v1.region.InsertRequest
	6,  // 22: greptime.v1.region.DeleteRequests.requests:type_name -> greptime.v1.region.DeleteRequest
	39, // 23: greptime.v1.region.InsertRequest.rows:type_name -> greptime.v1.Rows
	39, // 24: greptime.v1.region.DeleteRequest.rows:type_name -> greptime.v1.Rows
	0,  // 25: greptime.v1.region.QueryRequest.header:type_name -> greptime.v1.region.RegionRequestHeader
	9,  // 26: greptime.v1.region.CreateRequests.requests:type_name -> greptime.v1.region.CreateRequest
	27, // 27: greptime.v1.region.CreateRequest.column_defs:type_name -> greptime.v1.region.RegionColumnDef
	35, // 28: greptime.v1.region.CreateRequest.options:type_name -> greptime.v1.region.CreateRequest.OptionsEntry
	40, // 29: greptime.v1.region.CreateRequest.partition:type_name -> greptime.v1.meta.Partition
	11, // 30: greptime.v1.region.DropRequests.requests:type_name -> greptime.v1.region.DropRequest
	36, // 31: greptime.v1.region.OpenRequest.options:type_name -> greptime.v1.region.OpenRequest.OptionsEntry
	15, // 32: greptime.v1.region.AlterRequests.requests:type_name -> greptime.v1.region.AlterRequest
	17, // 33: greptime.v1.region.AlterRequest.add_columns:type_name -> greptime.v1.region.AddColumns
	18, // 34: greptime.v1.region.AlterRequest.drop_columns:type_name -> greptime.v1.region.DropColumns
	41, // 35: greptime.v1.region.AlterRequest.modify_column_types:type_name -> greptime.v1.ModifyColumnTypes
	42, // 36: greptime.v1.region.AlterRequest.set_table_options:type_name -> greptime.v1.SetTableOptions
	43, // 37: greptime.v1.region.AlterRequest.unset_table_options:type_name -> greptime.v1.UnsetTableOptions
	44, // 38: greptime.v1.region.AlterRequest.set_index:type_name -> greptime.v1.SetIndex
	45, // 39: greptime.v1.region.AlterRequest.unset_index:type_name -> greptime.v1.UnsetIndex
	46, // 40: greptime.v1.region.AlterRequest.drop_defaults:type_name -> greptime.v1.DropDefaults
	47, // 41: greptime.v1.region.AlterRequest.set_indexes:type_name -> greptime.v1.SetIndexes
	48, // 42: greptime.v1.region.AlterRequest.unset_indexes:type_name -> greptime.v1.UnsetIndexes
	49, // 43: greptime.v1.region.AlterRequest.set_defaults:type_name -> greptime.v1.SetDefaults
	16, // 44: greptime.v1.region.AlterRequest.sync_columns:type_name -> greptime.v1.region.SyncColumns
	27, // 45: greptime.v1.region.SyncColumns.column_defs:type_name -> greptime.v1.region.RegionColumnDef
	19, // 46: greptime.v1.region.AddColumns.add_columns:type_name -> greptime.v1.region.AddColumn
	20, // 47: greptime.v1.region.DropColumns.drop_columns:type_name -> greptime.v1.region.DropColumn
	27, // 48: greptime.v1.region.AddColumn.column_def:type_name -> greptime.v1.region.RegionColumnDef
	50, // 49: greptime.v1.region.AddColumn.location:type_name -> greptime.v1.AddColumnLocation
	22, // 50: greptime.v1.region.CompactRequest.regular:type_name -> greptime.v1.region.Regular
	23, // 51: greptime.v1.region.CompactRequest.strict_window:type_name -> greptime.v1.region.StrictWindow
	26, // 52: greptime.v1.region.TruncateRequest.all:type_name -> greptime.v1.region.All
	51, // 53: greptime.v1.region.TruncateRequest.time_ranges:type_name -> greptime.v1.TimeRanges
	52, // 54: greptime.v1.region.RegionColumnDef.column_def:type_name -> greptime.v1.ColumnDef
	53, // 55: greptime.v1.region.BulkInsertRequest.arrow_ipc:type_name -> greptime.v1.ArrowIpc
	29, // 56: greptime.v1.region.SyncRequest.mito_manifest_info:type_name -> greptime.v1.region.MitoManifestInfo
	30, // 57: greptime.v1.region.SyncRequest.metric_manifest_info:type_name -> greptime.v1.region.MetricManifestInfo
	1,  // 58: greptime.v1.region.Region.Handle:input_type -> greptime.v1.region.RegionRequest
	2,  // 59: greptime.v1.region.Region.Handle:output_type -> greptime.v1.region.RegionResponse
	59, // [59:60] is the sub-list for method output_type
	58, // [58:59] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_greptime_v1_region_server_proto_init() }
func file_greptime_v1_region_server_proto_init() {
	if File_greptime_v1_region_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_greptime_v1_region_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionRequestHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncColumns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddColumns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropColumns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Regular); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrictWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TruncateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*All); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionColumnDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkInsertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MitoManifestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricManifestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_region_server_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_greptime_v1_region_server_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*RegionRequest_Inserts)(nil),
		(*RegionRequest_Deletes)(nil),
		(*RegionRequest_Create)(nil),
		(*RegionRequest_Drop)(nil),
		(*RegionRequest_Open)(nil),
		(*RegionRequest_Close)(nil),
		(*RegionRequest_Alter)(nil),
		(*RegionRequest_Flush)(nil),
		(*RegionRequest_Compact)(nil),
		(*RegionRequest_Truncate)(nil),
		(*RegionRequest_Creates)(nil),
		(*RegionRequest_Drops)(nil),
		(*RegionRequest_Alters)(nil),
		(*RegionRequest_BulkInsert)(nil),
		(*RegionRequest_Sync)(nil),
		(*RegionRequest_ListMetadata)(nil),
	}
	file_greptime_v1_region_server_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*AlterRequest_AddColumns)(nil),
		(*AlterRequest_DropColumns)(nil),
		(*AlterRequest_ModifyColumnTypes)(nil),
		(*AlterRequest_SetTableOptions)(nil),
		(*AlterRequest_UnsetTableOptions)(nil),
		(*AlterRequest_SetIndex)(nil),
		(*AlterRequest_UnsetIndex)(nil),
		(*AlterRequest_DropDefaults)(nil),
		(*AlterRequest_SetIndexes)(nil),
		(*AlterRequest_UnsetIndexes)(nil),
		(*AlterRequest_SetDefaults)(nil),
		(*AlterRequest_SyncColumns)(nil),
	}
	file_greptime_v1_region_server_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*CompactRequest_Regular)(nil),
		(*CompactRequest_StrictWindow)(nil),
	}
	file_greptime_v1_region_server_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*TruncateRequest_All)(nil),
		(*TruncateRequest_TimeRanges)(nil),
	}
	file_greptime_v1_region_server_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*BulkInsertRequest_ArrowIpc)(nil),
	}
	file_greptime_v1_region_server_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*SyncRequest_MitoManifestInfo)(nil),
		(*SyncRequest_MetricManifestInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_greptime_v1_region_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_greptime_v1_region_server_proto_goTypes,
		DependencyIndexes: file_greptime_v1_region_server_proto_depIdxs,
		MessageInfos:      file_greptime_v1_region_server_proto_msgTypes,
	}.Build()
	File_greptime_v1_region_server_proto = out.File
	file_greptime_v1_region_server_proto_rawDesc = nil
	file_greptime_v1_region_server_proto_goTypes = nil
	file_greptime_v1_region_server_proto_depIdxs = nil
}
