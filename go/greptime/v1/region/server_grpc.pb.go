// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: greptime/v1/region/server.proto

package region

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegionServerClient is the client API for RegionServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegionServerClient interface {
	Handle(ctx context.Context, in *RegionRequest, opts ...grpc.CallOption) (*RegionResponse, error)
}

type regionServerClient struct {
	cc grpc.ClientConnInterface
}

func NewRegionServerClient(cc grpc.ClientConnInterface) RegionServerClient {
	return &regionServerClient{cc}
}

func (c *regionServerClient) Handle(ctx context.Context, in *RegionRequest, opts ...grpc.CallOption) (*RegionResponse, error) {
	out := new(RegionResponse)
	err := c.cc.Invoke(ctx, "/greptime.v1.region.RegionServer/Handle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegionServerServer is the server API for RegionServer service.
// All implementations must embed UnimplementedRegionServerServer
// for forward compatibility
type RegionServerServer interface {
	Handle(context.Context, *RegionRequest) (*RegionResponse, error)
	mustEmbedUnimplementedRegionServerServer()
}

// UnimplementedRegionServerServer must be embedded to have forward compatible implementations.
type UnimplementedRegionServerServer struct {
}

func (UnimplementedRegionServerServer) Handle(context.Context, *RegionRequest) (*RegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handle not implemented")
}
func (UnimplementedRegionServerServer) mustEmbedUnimplementedRegionServerServer() {}

// UnsafeRegionServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegionServerServer will
// result in compilation errors.
type UnsafeRegionServerServer interface {
	mustEmbedUnimplementedRegionServerServer()
}

func RegisterRegionServerServer(s grpc.ServiceRegistrar, srv RegionServerServer) {
	s.RegisterService(&RegionServer_ServiceDesc, srv)
}

func _RegionServer_Handle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServerServer).Handle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greptime.v1.region.RegionServer/Handle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServerServer).Handle(ctx, req.(*RegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegionServer_ServiceDesc is the grpc.ServiceDesc for RegionServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegionServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greptime.v1.region.RegionServer",
	HandlerType: (*RegionServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handle",
			Handler:    _RegionServer_Handle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "greptime/v1/region/server.proto",
}
