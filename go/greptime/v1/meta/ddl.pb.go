// Copyright 2023 Greptime Team
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: greptime/v1/meta/ddl.proto

package meta

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DdlTaskType int32

const (
	DdlTaskType_Create DdlTaskType = 0
	DdlTaskType_Drop   DdlTaskType = 1
	DdlTaskType_Alter  DdlTaskType = 2
)

// Enum value maps for DdlTaskType.
var (
	DdlTaskType_name = map[int32]string{
		0: "Create",
		1: "Drop",
		2: "Alter",
	}
	DdlTaskType_value = map[string]int32{
		"Create": 0,
		"Drop":   1,
		"Alter":  2,
	}
)

func (x DdlTaskType) Enum() *DdlTaskType {
	p := new(DdlTaskType)
	*p = x
	return p
}

func (x DdlTaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DdlTaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_greptime_v1_meta_ddl_proto_enumTypes[0].Descriptor()
}

func (DdlTaskType) Type() protoreflect.EnumType {
	return &file_greptime_v1_meta_ddl_proto_enumTypes[0]
}

func (x DdlTaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DdlTaskType.Descriptor instead.
func (DdlTaskType) EnumDescriptor() ([]byte, []int) {
	return file_greptime_v1_meta_ddl_proto_rawDescGZIP(), []int{0}
}

type DdlTaskStatus int32

const (
	DdlTaskStatus_Done      DdlTaskStatus = 0
	DdlTaskStatus_Failed    DdlTaskStatus = 1
	DdlTaskStatus_Cancelled DdlTaskStatus = 2
)

// Enum value maps for DdlTaskStatus.
var (
	DdlTaskStatus_name = map[int32]string{
		0: "Done",
		1: "Failed",
		2: "Cancelled",
	}
	DdlTaskStatus_value = map[string]int32{
		"Done":      0,
		"Failed":    1,
		"Cancelled": 2,
	}
)

func (x DdlTaskStatus) Enum() *DdlTaskStatus {
	p := new(DdlTaskStatus)
	*p = x
	return p
}

func (x DdlTaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DdlTaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_greptime_v1_meta_ddl_proto_enumTypes[1].Descriptor()
}

func (DdlTaskStatus) Type() protoreflect.EnumType {
	return &file_greptime_v1_meta_ddl_proto_enumTypes[1]
}

func (x DdlTaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DdlTaskStatus.Descriptor instead.
func (DdlTaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_greptime_v1_meta_ddl_proto_rawDescGZIP(), []int{1}
}

type AddDdlTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The following information plays a bigger role in making messages traceable
	// and facilitating debugging.
	Subject string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	From    string `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To      string `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	// The unix timestamp in milliseconds.
	TimestampMillis int64       `protobuf:"varint,5,opt,name=timestamp_millis,json=timestampMillis,proto3" json:"timestamp_millis,omitempty"`
	Type            DdlTaskType `protobuf:"varint,6,opt,name=type,proto3,enum=greptime.v1.meta.DdlTaskType" json:"type,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*AddDdlTaskRequest_Pd
	Payload isAddDdlTaskRequest_Payload `protobuf_oneof:"payload"`
}

func (x *AddDdlTaskRequest) Reset() {
	*x = AddDdlTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_meta_ddl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDdlTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDdlTaskRequest) ProtoMessage() {}

func (x *AddDdlTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_meta_ddl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDdlTaskRequest.ProtoReflect.Descriptor instead.
func (*AddDdlTaskRequest) Descriptor() ([]byte, []int) {
	return file_greptime_v1_meta_ddl_proto_rawDescGZIP(), []int{0}
}

func (x *AddDdlTaskRequest) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AddDdlTaskRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *AddDdlTaskRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *AddDdlTaskRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *AddDdlTaskRequest) GetTimestampMillis() int64 {
	if x != nil {
		return x.TimestampMillis
	}
	return 0
}

func (x *AddDdlTaskRequest) GetType() DdlTaskType {
	if x != nil {
		return x.Type
	}
	return DdlTaskType_Create
}

func (m *AddDdlTaskRequest) GetPayload() isAddDdlTaskRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *AddDdlTaskRequest) GetPd() []byte {
	if x, ok := x.GetPayload().(*AddDdlTaskRequest_Pd); ok {
		return x.Pd
	}
	return nil
}

type isAddDdlTaskRequest_Payload interface {
	isAddDdlTaskRequest_Payload()
}

type AddDdlTaskRequest_Pd struct {
	Pd []byte `protobuf:"bytes,7,opt,name=pd,proto3,oneof"`
}

func (*AddDdlTaskRequest_Pd) isAddDdlTaskRequest_Payload() {}

type AddDdlTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Key is the identifier for the ddl task.
	Key    []byte        `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Status DdlTaskStatus `protobuf:"varint,3,opt,name=status,proto3,enum=greptime.v1.meta.DdlTaskStatus" json:"status,omitempty"`
}

func (x *AddDdlTaskResponse) Reset() {
	*x = AddDdlTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_meta_ddl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDdlTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDdlTaskResponse) ProtoMessage() {}

func (x *AddDdlTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_meta_ddl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDdlTaskResponse.ProtoReflect.Descriptor instead.
func (*AddDdlTaskResponse) Descriptor() ([]byte, []int) {
	return file_greptime_v1_meta_ddl_proto_rawDescGZIP(), []int{1}
}

func (x *AddDdlTaskResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AddDdlTaskResponse) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AddDdlTaskResponse) GetStatus() DdlTaskStatus {
	if x != nil {
		return x.Status
	}
	return DdlTaskStatus_Done
}

type CancelDdlTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Key is the identifier for the ddl task.
	Key []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *CancelDdlTaskRequest) Reset() {
	*x = CancelDdlTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_meta_ddl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelDdlTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelDdlTaskRequest) ProtoMessage() {}

func (x *CancelDdlTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_meta_ddl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelDdlTaskRequest.ProtoReflect.Descriptor instead.
func (*CancelDdlTaskRequest) Descriptor() ([]byte, []int) {
	return file_greptime_v1_meta_ddl_proto_rawDescGZIP(), []int{2}
}

func (x *CancelDdlTaskRequest) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CancelDdlTaskRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type CancelDdlTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The following information plays a bigger role in making messages traceable
	// and facilitating debugging.
	Subject string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	From    string `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To      string `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	// The unix timestamp in milliseconds.
	TimestampMillis int64 `protobuf:"varint,5,opt,name=timestamp_millis,json=timestampMillis,proto3" json:"timestamp_millis,omitempty"`
	Cancelled       bool  `protobuf:"varint,6,opt,name=cancelled,proto3" json:"cancelled,omitempty"`
}

func (x *CancelDdlTaskResponse) Reset() {
	*x = CancelDdlTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_meta_ddl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelDdlTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelDdlTaskResponse) ProtoMessage() {}

func (x *CancelDdlTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_meta_ddl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelDdlTaskResponse.ProtoReflect.Descriptor instead.
func (*CancelDdlTaskResponse) Descriptor() ([]byte, []int) {
	return file_greptime_v1_meta_ddl_proto_rawDescGZIP(), []int{3}
}

func (x *CancelDdlTaskResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CancelDdlTaskResponse) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *CancelDdlTaskResponse) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *CancelDdlTaskResponse) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *CancelDdlTaskResponse) GetTimestampMillis() int64 {
	if x != nil {
		return x.TimestampMillis
	}
	return 0
}

func (x *CancelDdlTaskResponse) GetCancelled() bool {
	if x != nil {
		return x.Cancelled
	}
	return false
}

var File_greptime_v1_meta_ddl_proto protoreflect.FileDescriptor

var file_greptime_v1_meta_ddl_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x2f, 0x64, 0x64, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x67, 0x72,
	0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x1a, 0x1d,
	0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86, 0x02,
	0x0a, 0x11, 0x41, 0x64, 0x64, 0x44, 0x64, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x64, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x70, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x02, 0x70, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x44, 0x64,
	0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x65, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x64, 0x6c,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x62, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x64, 0x6c, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x65,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xd8, 0x01, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x44, 0x64, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x69, 0x6c,
	0x6c, 0x69, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65,
	0x64, 0x2a, 0x2e, 0x0a, 0x0b, 0x44, 0x64, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x72, 0x6f, 0x70, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x10,
	0x02, 0x2a, 0x34, 0x0a, 0x0d, 0x44, 0x64, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x32, 0xc7, 0x01, 0x0a, 0x07, 0x44, 0x64, 0x6c, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x5a, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x44, 0x64, 0x6c,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x64, 0x6c, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x72, 0x65, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64,
	0x44, 0x64, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x60, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x64, 0x6c, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x26, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x64, 0x6c, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x44, 0x64, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x47, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x2f, 0x67, 0x72, 0x65,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x67,
	0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_greptime_v1_meta_ddl_proto_rawDescOnce sync.Once
	file_greptime_v1_meta_ddl_proto_rawDescData = file_greptime_v1_meta_ddl_proto_rawDesc
)

func file_greptime_v1_meta_ddl_proto_rawDescGZIP() []byte {
	file_greptime_v1_meta_ddl_proto_rawDescOnce.Do(func() {
		file_greptime_v1_meta_ddl_proto_rawDescData = protoimpl.X.CompressGZIP(file_greptime_v1_meta_ddl_proto_rawDescData)
	})
	return file_greptime_v1_meta_ddl_proto_rawDescData
}

var file_greptime_v1_meta_ddl_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_greptime_v1_meta_ddl_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_greptime_v1_meta_ddl_proto_goTypes = []interface{}{
	(DdlTaskType)(0),              // 0: greptime.v1.meta.DdlTaskType
	(DdlTaskStatus)(0),            // 1: greptime.v1.meta.DdlTaskStatus
	(*AddDdlTaskRequest)(nil),     // 2: greptime.v1.meta.AddDdlTaskRequest
	(*AddDdlTaskResponse)(nil),    // 3: greptime.v1.meta.AddDdlTaskResponse
	(*CancelDdlTaskRequest)(nil),  // 4: greptime.v1.meta.CancelDdlTaskRequest
	(*CancelDdlTaskResponse)(nil), // 5: greptime.v1.meta.CancelDdlTaskResponse
	(*ResponseHeader)(nil),        // 6: greptime.v1.meta.ResponseHeader
}
var file_greptime_v1_meta_ddl_proto_depIdxs = []int32{
	6, // 0: greptime.v1.meta.AddDdlTaskRequest.header:type_name -> greptime.v1.meta.ResponseHeader
	0, // 1: greptime.v1.meta.AddDdlTaskRequest.type:type_name -> greptime.v1.meta.DdlTaskType
	6, // 2: greptime.v1.meta.AddDdlTaskResponse.header:type_name -> greptime.v1.meta.ResponseHeader
	1, // 3: greptime.v1.meta.AddDdlTaskResponse.status:type_name -> greptime.v1.meta.DdlTaskStatus
	6, // 4: greptime.v1.meta.CancelDdlTaskRequest.header:type_name -> greptime.v1.meta.ResponseHeader
	6, // 5: greptime.v1.meta.CancelDdlTaskResponse.header:type_name -> greptime.v1.meta.ResponseHeader
	2, // 6: greptime.v1.meta.DdlTask.SubmitDdlTask:input_type -> greptime.v1.meta.AddDdlTaskRequest
	4, // 7: greptime.v1.meta.DdlTask.CancelDdlTask:input_type -> greptime.v1.meta.CancelDdlTaskRequest
	3, // 8: greptime.v1.meta.DdlTask.SubmitDdlTask:output_type -> greptime.v1.meta.AddDdlTaskResponse
	5, // 9: greptime.v1.meta.DdlTask.CancelDdlTask:output_type -> greptime.v1.meta.CancelDdlTaskResponse
	8, // [8:10] is the sub-list for method output_type
	6, // [6:8] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_greptime_v1_meta_ddl_proto_init() }
func file_greptime_v1_meta_ddl_proto_init() {
	if File_greptime_v1_meta_ddl_proto != nil {
		return
	}
	file_greptime_v1_meta_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_greptime_v1_meta_ddl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDdlTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_meta_ddl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDdlTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_meta_ddl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelDdlTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_meta_ddl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelDdlTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_greptime_v1_meta_ddl_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*AddDdlTaskRequest_Pd)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_greptime_v1_meta_ddl_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_greptime_v1_meta_ddl_proto_goTypes,
		DependencyIndexes: file_greptime_v1_meta_ddl_proto_depIdxs,
		EnumInfos:         file_greptime_v1_meta_ddl_proto_enumTypes,
		MessageInfos:      file_greptime_v1_meta_ddl_proto_msgTypes,
	}.Build()
	File_greptime_v1_meta_ddl_proto = out.File
	file_greptime_v1_meta_ddl_proto_rawDesc = nil
	file_greptime_v1_meta_ddl_proto_goTypes = nil
	file_greptime_v1_meta_ddl_proto_depIdxs = nil
}
