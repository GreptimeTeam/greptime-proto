// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: greptime/v1/meta/procedure.proto

package meta

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProcedureClient is the client API for Procedure service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcedureClient interface {
	// Query a submitted procedure state
	Query(ctx context.Context, in *ProcedureId, opts ...grpc.CallOption) (*ProcedureState, error)
	// Submits a DDL task
	Ddl(ctx context.Context, in *DdlTaskRequest, opts ...grpc.CallOption) (*DdlTaskResponse, error)
	// Submits a region migration task
	Migrate(ctx context.Context, in *MigrateRegionRequest, opts ...grpc.CallOption) (*MigrateRegionResponse, error)
}

type procedureClient struct {
	cc grpc.ClientConnInterface
}

func NewProcedureClient(cc grpc.ClientConnInterface) ProcedureClient {
	return &procedureClient{cc}
}

func (c *procedureClient) Query(ctx context.Context, in *ProcedureId, opts ...grpc.CallOption) (*ProcedureState, error) {
	out := new(ProcedureState)
	err := c.cc.Invoke(ctx, "/greptime.v1.meta.Procedure/query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *procedureClient) Ddl(ctx context.Context, in *DdlTaskRequest, opts ...grpc.CallOption) (*DdlTaskResponse, error) {
	out := new(DdlTaskResponse)
	err := c.cc.Invoke(ctx, "/greptime.v1.meta.Procedure/ddl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *procedureClient) Migrate(ctx context.Context, in *MigrateRegionRequest, opts ...grpc.CallOption) (*MigrateRegionResponse, error) {
	out := new(MigrateRegionResponse)
	err := c.cc.Invoke(ctx, "/greptime.v1.meta.Procedure/migrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcedureServer is the server API for Procedure service.
// All implementations must embed UnimplementedProcedureServer
// for forward compatibility
type ProcedureServer interface {
	// Query a submitted procedure state
	Query(context.Context, *ProcedureId) (*ProcedureState, error)
	// Submits a DDL task
	Ddl(context.Context, *DdlTaskRequest) (*DdlTaskResponse, error)
	// Submits a region migration task
	Migrate(context.Context, *MigrateRegionRequest) (*MigrateRegionResponse, error)
	mustEmbedUnimplementedProcedureServer()
}

// UnimplementedProcedureServer must be embedded to have forward compatible implementations.
type UnimplementedProcedureServer struct {
}

func (UnimplementedProcedureServer) Query(context.Context, *ProcedureId) (*ProcedureState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedProcedureServer) Ddl(context.Context, *DdlTaskRequest) (*DdlTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ddl not implemented")
}
func (UnimplementedProcedureServer) Migrate(context.Context, *MigrateRegionRequest) (*MigrateRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Migrate not implemented")
}
func (UnimplementedProcedureServer) mustEmbedUnimplementedProcedureServer() {}

// UnsafeProcedureServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcedureServer will
// result in compilation errors.
type UnsafeProcedureServer interface {
	mustEmbedUnimplementedProcedureServer()
}

func RegisterProcedureServer(s grpc.ServiceRegistrar, srv ProcedureServer) {
	s.RegisterService(&Procedure_ServiceDesc, srv)
}

func _Procedure_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcedureId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcedureServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greptime.v1.meta.Procedure/query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcedureServer).Query(ctx, req.(*ProcedureId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Procedure_Ddl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DdlTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcedureServer).Ddl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greptime.v1.meta.Procedure/ddl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcedureServer).Ddl(ctx, req.(*DdlTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Procedure_Migrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcedureServer).Migrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greptime.v1.meta.Procedure/migrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcedureServer).Migrate(ctx, req.(*MigrateRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Procedure_ServiceDesc is the grpc.ServiceDesc for Procedure service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Procedure_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greptime.v1.meta.Procedure",
	HandlerType: (*ProcedureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "query",
			Handler:    _Procedure_Query_Handler,
		},
		{
			MethodName: "ddl",
			Handler:    _Procedure_Ddl_Handler,
		},
		{
			MethodName: "migrate",
			Handler:    _Procedure_Migrate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "greptime/v1/meta/procedure.proto",
}
