// Copyright 2023 Greptime Team
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: greptime/v1/row.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Rows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema []*ColumnSchema `protobuf:"bytes,1,rep,name=schema,proto3" json:"schema,omitempty"`
	Rows   []*Row          `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *Rows) Reset() {
	*x = Rows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_row_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rows) ProtoMessage() {}

func (x *Rows) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_row_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rows.ProtoReflect.Descriptor instead.
func (*Rows) Descriptor() ([]byte, []int) {
	return file_greptime_v1_row_proto_rawDescGZIP(), []int{0}
}

func (x *Rows) GetSchema() []*ColumnSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *Rows) GetRows() []*Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

type ColumnSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnName   string         `protobuf:"bytes,1,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	Datatype     ColumnDataType `protobuf:"varint,2,opt,name=datatype,proto3,enum=greptime.v1.ColumnDataType" json:"datatype,omitempty"`
	SemanticType SemanticType   `protobuf:"varint,3,opt,name=semantic_type,json=semanticType,proto3,enum=greptime.v1.SemanticType" json:"semantic_type,omitempty"`
	// Extension for ColumnDataType.
	DatatypeExtension *ColumnDataTypeExtension `protobuf:"bytes,4,opt,name=datatype_extension,json=datatypeExtension,proto3" json:"datatype_extension,omitempty"`
}

func (x *ColumnSchema) Reset() {
	*x = ColumnSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_row_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnSchema) ProtoMessage() {}

func (x *ColumnSchema) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_row_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnSchema.ProtoReflect.Descriptor instead.
func (*ColumnSchema) Descriptor() ([]byte, []int) {
	return file_greptime_v1_row_proto_rawDescGZIP(), []int{1}
}

func (x *ColumnSchema) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *ColumnSchema) GetDatatype() ColumnDataType {
	if x != nil {
		return x.Datatype
	}
	return ColumnDataType_BOOLEAN
}

func (x *ColumnSchema) GetSemanticType() SemanticType {
	if x != nil {
		return x.SemanticType
	}
	return SemanticType_TAG
}

func (x *ColumnSchema) GetDatatypeExtension() *ColumnDataTypeExtension {
	if x != nil {
		return x.DatatypeExtension
	}
	return nil
}

type Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Row) Reset() {
	*x = Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_row_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_row_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row.ProtoReflect.Descriptor instead.
func (*Row) Descriptor() ([]byte, []int) {
	return file_greptime_v1_row_proto_rawDescGZIP(), []int{2}
}

func (x *Row) GetValues() []*Value {
	if x != nil {
		return x.Values
	}
	return nil
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ValueData:
	//
	//	*Value_I8Value
	//	*Value_I16Value
	//	*Value_I32Value
	//	*Value_I64Value
	//	*Value_U8Value
	//	*Value_U16Value
	//	*Value_U32Value
	//	*Value_U64Value
	//	*Value_F32Value
	//	*Value_F64Value
	//	*Value_BoolValue
	//	*Value_BinaryValue
	//	*Value_StringValue
	//	*Value_DateValue
	//	*Value_DatetimeValue
	//	*Value_TimestampSecondValue
	//	*Value_TimestampMillisecondValue
	//	*Value_TimestampMicrosecondValue
	//	*Value_TimestampNanosecondValue
	//	*Value_TimeSecondValue
	//	*Value_TimeMillisecondValue
	//	*Value_TimeMicrosecondValue
	//	*Value_TimeNanosecondValue
	//	*Value_IntervalYearMonthValues
	//	*Value_IntervalDayTimeValues
	//	*Value_IntervalMonthDayNanoValues
	//	*Value_DurationSecondValue
	//	*Value_DurationMillisecondValue
	//	*Value_DurationMicrosecondValue
	//	*Value_DurationNanosecondValue
	//	*Value_Decimal128Value
	ValueData isValue_ValueData `protobuf_oneof:"value_data"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_row_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_row_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_greptime_v1_row_proto_rawDescGZIP(), []int{3}
}

func (m *Value) GetValueData() isValue_ValueData {
	if m != nil {
		return m.ValueData
	}
	return nil
}

func (x *Value) GetI8Value() int32 {
	if x, ok := x.GetValueData().(*Value_I8Value); ok {
		return x.I8Value
	}
	return 0
}

func (x *Value) GetI16Value() int32 {
	if x, ok := x.GetValueData().(*Value_I16Value); ok {
		return x.I16Value
	}
	return 0
}

func (x *Value) GetI32Value() int32 {
	if x, ok := x.GetValueData().(*Value_I32Value); ok {
		return x.I32Value
	}
	return 0
}

func (x *Value) GetI64Value() int64 {
	if x, ok := x.GetValueData().(*Value_I64Value); ok {
		return x.I64Value
	}
	return 0
}

func (x *Value) GetU8Value() uint32 {
	if x, ok := x.GetValueData().(*Value_U8Value); ok {
		return x.U8Value
	}
	return 0
}

func (x *Value) GetU16Value() uint32 {
	if x, ok := x.GetValueData().(*Value_U16Value); ok {
		return x.U16Value
	}
	return 0
}

func (x *Value) GetU32Value() uint32 {
	if x, ok := x.GetValueData().(*Value_U32Value); ok {
		return x.U32Value
	}
	return 0
}

func (x *Value) GetU64Value() uint64 {
	if x, ok := x.GetValueData().(*Value_U64Value); ok {
		return x.U64Value
	}
	return 0
}

func (x *Value) GetF32Value() float32 {
	if x, ok := x.GetValueData().(*Value_F32Value); ok {
		return x.F32Value
	}
	return 0
}

func (x *Value) GetF64Value() float64 {
	if x, ok := x.GetValueData().(*Value_F64Value); ok {
		return x.F64Value
	}
	return 0
}

func (x *Value) GetBoolValue() bool {
	if x, ok := x.GetValueData().(*Value_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *Value) GetBinaryValue() []byte {
	if x, ok := x.GetValueData().(*Value_BinaryValue); ok {
		return x.BinaryValue
	}
	return nil
}

func (x *Value) GetStringValue() string {
	if x, ok := x.GetValueData().(*Value_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Value) GetDateValue() int32 {
	if x, ok := x.GetValueData().(*Value_DateValue); ok {
		return x.DateValue
	}
	return 0
}

func (x *Value) GetDatetimeValue() int64 {
	if x, ok := x.GetValueData().(*Value_DatetimeValue); ok {
		return x.DatetimeValue
	}
	return 0
}

func (x *Value) GetTimestampSecondValue() int64 {
	if x, ok := x.GetValueData().(*Value_TimestampSecondValue); ok {
		return x.TimestampSecondValue
	}
	return 0
}

func (x *Value) GetTimestampMillisecondValue() int64 {
	if x, ok := x.GetValueData().(*Value_TimestampMillisecondValue); ok {
		return x.TimestampMillisecondValue
	}
	return 0
}

func (x *Value) GetTimestampMicrosecondValue() int64 {
	if x, ok := x.GetValueData().(*Value_TimestampMicrosecondValue); ok {
		return x.TimestampMicrosecondValue
	}
	return 0
}

func (x *Value) GetTimestampNanosecondValue() int64 {
	if x, ok := x.GetValueData().(*Value_TimestampNanosecondValue); ok {
		return x.TimestampNanosecondValue
	}
	return 0
}

func (x *Value) GetTimeSecondValue() int64 {
	if x, ok := x.GetValueData().(*Value_TimeSecondValue); ok {
		return x.TimeSecondValue
	}
	return 0
}

func (x *Value) GetTimeMillisecondValue() int64 {
	if x, ok := x.GetValueData().(*Value_TimeMillisecondValue); ok {
		return x.TimeMillisecondValue
	}
	return 0
}

func (x *Value) GetTimeMicrosecondValue() int64 {
	if x, ok := x.GetValueData().(*Value_TimeMicrosecondValue); ok {
		return x.TimeMicrosecondValue
	}
	return 0
}

func (x *Value) GetTimeNanosecondValue() int64 {
	if x, ok := x.GetValueData().(*Value_TimeNanosecondValue); ok {
		return x.TimeNanosecondValue
	}
	return 0
}

func (x *Value) GetIntervalYearMonthValues() int32 {
	if x, ok := x.GetValueData().(*Value_IntervalYearMonthValues); ok {
		return x.IntervalYearMonthValues
	}
	return 0
}

func (x *Value) GetIntervalDayTimeValues() int64 {
	if x, ok := x.GetValueData().(*Value_IntervalDayTimeValues); ok {
		return x.IntervalDayTimeValues
	}
	return 0
}

func (x *Value) GetIntervalMonthDayNanoValues() *IntervalMonthDayNano {
	if x, ok := x.GetValueData().(*Value_IntervalMonthDayNanoValues); ok {
		return x.IntervalMonthDayNanoValues
	}
	return nil
}

func (x *Value) GetDurationSecondValue() int64 {
	if x, ok := x.GetValueData().(*Value_DurationSecondValue); ok {
		return x.DurationSecondValue
	}
	return 0
}

func (x *Value) GetDurationMillisecondValue() int64 {
	if x, ok := x.GetValueData().(*Value_DurationMillisecondValue); ok {
		return x.DurationMillisecondValue
	}
	return 0
}

func (x *Value) GetDurationMicrosecondValue() int64 {
	if x, ok := x.GetValueData().(*Value_DurationMicrosecondValue); ok {
		return x.DurationMicrosecondValue
	}
	return 0
}

func (x *Value) GetDurationNanosecondValue() int64 {
	if x, ok := x.GetValueData().(*Value_DurationNanosecondValue); ok {
		return x.DurationNanosecondValue
	}
	return 0
}

func (x *Value) GetDecimal128Value() *Decimal128 {
	if x, ok := x.GetValueData().(*Value_Decimal128Value); ok {
		return x.Decimal128Value
	}
	return nil
}

type isValue_ValueData interface {
	isValue_ValueData()
}

type Value_I8Value struct {
	I8Value int32 `protobuf:"varint,1,opt,name=i8_value,json=i8Value,proto3,oneof"`
}

type Value_I16Value struct {
	I16Value int32 `protobuf:"varint,2,opt,name=i16_value,json=i16Value,proto3,oneof"`
}

type Value_I32Value struct {
	I32Value int32 `protobuf:"varint,3,opt,name=i32_value,json=i32Value,proto3,oneof"`
}

type Value_I64Value struct {
	I64Value int64 `protobuf:"varint,4,opt,name=i64_value,json=i64Value,proto3,oneof"`
}

type Value_U8Value struct {
	U8Value uint32 `protobuf:"varint,5,opt,name=u8_value,json=u8Value,proto3,oneof"`
}

type Value_U16Value struct {
	U16Value uint32 `protobuf:"varint,6,opt,name=u16_value,json=u16Value,proto3,oneof"`
}

type Value_U32Value struct {
	U32Value uint32 `protobuf:"varint,7,opt,name=u32_value,json=u32Value,proto3,oneof"`
}

type Value_U64Value struct {
	U64Value uint64 `protobuf:"varint,8,opt,name=u64_value,json=u64Value,proto3,oneof"`
}

type Value_F32Value struct {
	F32Value float32 `protobuf:"fixed32,9,opt,name=f32_value,json=f32Value,proto3,oneof"`
}

type Value_F64Value struct {
	F64Value float64 `protobuf:"fixed64,10,opt,name=f64_value,json=f64Value,proto3,oneof"`
}

type Value_BoolValue struct {
	BoolValue bool `protobuf:"varint,11,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type Value_BinaryValue struct {
	BinaryValue []byte `protobuf:"bytes,12,opt,name=binary_value,json=binaryValue,proto3,oneof"`
}

type Value_StringValue struct {
	StringValue string `protobuf:"bytes,13,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Value_DateValue struct {
	DateValue int32 `protobuf:"varint,14,opt,name=date_value,json=dateValue,proto3,oneof"`
}

type Value_DatetimeValue struct {
	DatetimeValue int64 `protobuf:"varint,15,opt,name=datetime_value,json=datetimeValue,proto3,oneof"`
}

type Value_TimestampSecondValue struct {
	TimestampSecondValue int64 `protobuf:"varint,16,opt,name=timestamp_second_value,json=timestampSecondValue,proto3,oneof"`
}

type Value_TimestampMillisecondValue struct {
	TimestampMillisecondValue int64 `protobuf:"varint,17,opt,name=timestamp_millisecond_value,json=timestampMillisecondValue,proto3,oneof"`
}

type Value_TimestampMicrosecondValue struct {
	TimestampMicrosecondValue int64 `protobuf:"varint,18,opt,name=timestamp_microsecond_value,json=timestampMicrosecondValue,proto3,oneof"`
}

type Value_TimestampNanosecondValue struct {
	TimestampNanosecondValue int64 `protobuf:"varint,19,opt,name=timestamp_nanosecond_value,json=timestampNanosecondValue,proto3,oneof"`
}

type Value_TimeSecondValue struct {
	TimeSecondValue int64 `protobuf:"varint,20,opt,name=time_second_value,json=timeSecondValue,proto3,oneof"`
}

type Value_TimeMillisecondValue struct {
	TimeMillisecondValue int64 `protobuf:"varint,21,opt,name=time_millisecond_value,json=timeMillisecondValue,proto3,oneof"`
}

type Value_TimeMicrosecondValue struct {
	TimeMicrosecondValue int64 `protobuf:"varint,22,opt,name=time_microsecond_value,json=timeMicrosecondValue,proto3,oneof"`
}

type Value_TimeNanosecondValue struct {
	TimeNanosecondValue int64 `protobuf:"varint,23,opt,name=time_nanosecond_value,json=timeNanosecondValue,proto3,oneof"`
}

type Value_IntervalYearMonthValues struct {
	IntervalYearMonthValues int32 `protobuf:"varint,24,opt,name=interval_year_month_values,json=intervalYearMonthValues,proto3,oneof"`
}

type Value_IntervalDayTimeValues struct {
	IntervalDayTimeValues int64 `protobuf:"varint,25,opt,name=interval_day_time_values,json=intervalDayTimeValues,proto3,oneof"`
}

type Value_IntervalMonthDayNanoValues struct {
	IntervalMonthDayNanoValues *IntervalMonthDayNano `protobuf:"bytes,26,opt,name=interval_month_day_nano_values,json=intervalMonthDayNanoValues,proto3,oneof"`
}

type Value_DurationSecondValue struct {
	DurationSecondValue int64 `protobuf:"varint,27,opt,name=duration_second_value,json=durationSecondValue,proto3,oneof"`
}

type Value_DurationMillisecondValue struct {
	DurationMillisecondValue int64 `protobuf:"varint,28,opt,name=duration_millisecond_value,json=durationMillisecondValue,proto3,oneof"`
}

type Value_DurationMicrosecondValue struct {
	DurationMicrosecondValue int64 `protobuf:"varint,29,opt,name=duration_microsecond_value,json=durationMicrosecondValue,proto3,oneof"`
}

type Value_DurationNanosecondValue struct {
	DurationNanosecondValue int64 `protobuf:"varint,30,opt,name=duration_nanosecond_value,json=durationNanosecondValue,proto3,oneof"`
}

type Value_Decimal128Value struct {
	Decimal128Value *Decimal128 `protobuf:"bytes,31,opt,name=decimal128_value,json=decimal128Value,proto3,oneof"`
}

func (*Value_I8Value) isValue_ValueData() {}

func (*Value_I16Value) isValue_ValueData() {}

func (*Value_I32Value) isValue_ValueData() {}

func (*Value_I64Value) isValue_ValueData() {}

func (*Value_U8Value) isValue_ValueData() {}

func (*Value_U16Value) isValue_ValueData() {}

func (*Value_U32Value) isValue_ValueData() {}

func (*Value_U64Value) isValue_ValueData() {}

func (*Value_F32Value) isValue_ValueData() {}

func (*Value_F64Value) isValue_ValueData() {}

func (*Value_BoolValue) isValue_ValueData() {}

func (*Value_BinaryValue) isValue_ValueData() {}

func (*Value_StringValue) isValue_ValueData() {}

func (*Value_DateValue) isValue_ValueData() {}

func (*Value_DatetimeValue) isValue_ValueData() {}

func (*Value_TimestampSecondValue) isValue_ValueData() {}

func (*Value_TimestampMillisecondValue) isValue_ValueData() {}

func (*Value_TimestampMicrosecondValue) isValue_ValueData() {}

func (*Value_TimestampNanosecondValue) isValue_ValueData() {}

func (*Value_TimeSecondValue) isValue_ValueData() {}

func (*Value_TimeMillisecondValue) isValue_ValueData() {}

func (*Value_TimeMicrosecondValue) isValue_ValueData() {}

func (*Value_TimeNanosecondValue) isValue_ValueData() {}

func (*Value_IntervalYearMonthValues) isValue_ValueData() {}

func (*Value_IntervalDayTimeValues) isValue_ValueData() {}

func (*Value_IntervalMonthDayNanoValues) isValue_ValueData() {}

func (*Value_DurationSecondValue) isValue_ValueData() {}

func (*Value_DurationMillisecondValue) isValue_ValueData() {}

func (*Value_DurationMicrosecondValue) isValue_ValueData() {}

func (*Value_DurationNanosecondValue) isValue_ValueData() {}

func (*Value_Decimal128Value) isValue_ValueData() {}

var File_greptime_v1_row_proto protoreflect.FileDescriptor

var file_greptime_v1_row_proto_rawDesc = []byte{
	0x0a, 0x15, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f,
	0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x1a, 0x18, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5f,
	0x0a, 0x04, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x24, 0x0a, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22,
	0xfd, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x37, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x65,
	0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x65,
	0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x64, 0x61,
	0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x64, 0x61,
	0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x31, 0x0a, 0x03, 0x52, 0x6f, 0x77, 0x12, 0x2a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0xe9, 0x0b, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x08,
	0x69, 0x38, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x07, 0x69, 0x38, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x31, 0x36,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08,
	0x69, 0x31, 0x36, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x33, 0x32, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x69,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x36, 0x34, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x75, 0x38, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x75, 0x38, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x75, 0x31, 0x36, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x75, 0x31, 0x36, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x75, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x75, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1d, 0x0a, 0x09, 0x75, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x75, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1d, 0x0a, 0x09, 0x66, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x08, 0x66, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1d, 0x0a, 0x09, 0x66, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x00, 0x52, 0x08, 0x66, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f,
	0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x23, 0x0a, 0x0c, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x19, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x69, 0x6c,
	0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a,
	0x1b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x19, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x3e, 0x0a, 0x1a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x61, 0x6e,
	0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a,
	0x16, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x14, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a,
	0x15, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x13,
	0x74, 0x69, 0x6d, 0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x79, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x39, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x64,
	0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x44, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x67, 0x0a,
	0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f,
	0x64, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x44, 0x61, 0x79, 0x4e, 0x61, 0x6e, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x44, 0x61, 0x79, 0x4e, 0x61, 0x6e, 0x6f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x13, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x1a,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x18, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x1a,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x18, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x19,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x17, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6e, 0x6f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x31, 0x32, 0x38, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x31, 0x32, 0x38, 0x48, 0x00, 0x52,
	0x0f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x31, 0x32, 0x38, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x50,
	0x0a, 0x0e, 0x69, 0x6f, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x42, 0x07, 0x52, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x2f, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_greptime_v1_row_proto_rawDescOnce sync.Once
	file_greptime_v1_row_proto_rawDescData = file_greptime_v1_row_proto_rawDesc
)

func file_greptime_v1_row_proto_rawDescGZIP() []byte {
	file_greptime_v1_row_proto_rawDescOnce.Do(func() {
		file_greptime_v1_row_proto_rawDescData = protoimpl.X.CompressGZIP(file_greptime_v1_row_proto_rawDescData)
	})
	return file_greptime_v1_row_proto_rawDescData
}

var file_greptime_v1_row_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_greptime_v1_row_proto_goTypes = []interface{}{
	(*Rows)(nil),                    // 0: greptime.v1.Rows
	(*ColumnSchema)(nil),            // 1: greptime.v1.ColumnSchema
	(*Row)(nil),                     // 2: greptime.v1.Row
	(*Value)(nil),                   // 3: greptime.v1.Value
	(ColumnDataType)(0),             // 4: greptime.v1.ColumnDataType
	(SemanticType)(0),               // 5: greptime.v1.SemanticType
	(*ColumnDataTypeExtension)(nil), // 6: greptime.v1.ColumnDataTypeExtension
	(*IntervalMonthDayNano)(nil),    // 7: greptime.v1.IntervalMonthDayNano
	(*Decimal128)(nil),              // 8: greptime.v1.Decimal128
}
var file_greptime_v1_row_proto_depIdxs = []int32{
	1, // 0: greptime.v1.Rows.schema:type_name -> greptime.v1.ColumnSchema
	2, // 1: greptime.v1.Rows.rows:type_name -> greptime.v1.Row
	4, // 2: greptime.v1.ColumnSchema.datatype:type_name -> greptime.v1.ColumnDataType
	5, // 3: greptime.v1.ColumnSchema.semantic_type:type_name -> greptime.v1.SemanticType
	6, // 4: greptime.v1.ColumnSchema.datatype_extension:type_name -> greptime.v1.ColumnDataTypeExtension
	3, // 5: greptime.v1.Row.values:type_name -> greptime.v1.Value
	7, // 6: greptime.v1.Value.interval_month_day_nano_values:type_name -> greptime.v1.IntervalMonthDayNano
	8, // 7: greptime.v1.Value.decimal128_value:type_name -> greptime.v1.Decimal128
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_greptime_v1_row_proto_init() }
func file_greptime_v1_row_proto_init() {
	if File_greptime_v1_row_proto != nil {
		return
	}
	file_greptime_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_greptime_v1_row_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_row_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_row_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_row_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_greptime_v1_row_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Value_I8Value)(nil),
		(*Value_I16Value)(nil),
		(*Value_I32Value)(nil),
		(*Value_I64Value)(nil),
		(*Value_U8Value)(nil),
		(*Value_U16Value)(nil),
		(*Value_U32Value)(nil),
		(*Value_U64Value)(nil),
		(*Value_F32Value)(nil),
		(*Value_F64Value)(nil),
		(*Value_BoolValue)(nil),
		(*Value_BinaryValue)(nil),
		(*Value_StringValue)(nil),
		(*Value_DateValue)(nil),
		(*Value_DatetimeValue)(nil),
		(*Value_TimestampSecondValue)(nil),
		(*Value_TimestampMillisecondValue)(nil),
		(*Value_TimestampMicrosecondValue)(nil),
		(*Value_TimestampNanosecondValue)(nil),
		(*Value_TimeSecondValue)(nil),
		(*Value_TimeMillisecondValue)(nil),
		(*Value_TimeMicrosecondValue)(nil),
		(*Value_TimeNanosecondValue)(nil),
		(*Value_IntervalYearMonthValues)(nil),
		(*Value_IntervalDayTimeValues)(nil),
		(*Value_IntervalMonthDayNanoValues)(nil),
		(*Value_DurationSecondValue)(nil),
		(*Value_DurationMillisecondValue)(nil),
		(*Value_DurationMicrosecondValue)(nil),
		(*Value_DurationNanosecondValue)(nil),
		(*Value_Decimal128Value)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_greptime_v1_row_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_greptime_v1_row_proto_goTypes,
		DependencyIndexes: file_greptime_v1_row_proto_depIdxs,
		MessageInfos:      file_greptime_v1_row_proto_msgTypes,
	}.Build()
	File_greptime_v1_row_proto = out.File
	file_greptime_v1_row_proto_rawDesc = nil
	file_greptime_v1_row_proto_goTypes = nil
	file_greptime_v1_row_proto_depIdxs = nil
}
