// Copyright 2023 Greptime Team
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: greptime/v1/row.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Rows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema []*ColumnSchema `protobuf:"bytes,1,rep,name=schema,proto3" json:"schema,omitempty"`
	Rows   []*Row          `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *Rows) Reset() {
	*x = Rows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_row_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rows) ProtoMessage() {}

func (x *Rows) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_row_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rows.ProtoReflect.Descriptor instead.
func (*Rows) Descriptor() ([]byte, []int) {
	return file_greptime_v1_row_proto_rawDescGZIP(), []int{0}
}

func (x *Rows) GetSchema() []*ColumnSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *Rows) GetRows() []*Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

type ColumnSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnName   string         `protobuf:"bytes,1,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	Datatype     ColumnDataType `protobuf:"varint,2,opt,name=datatype,proto3,enum=greptime.v1.ColumnDataType" json:"datatype,omitempty"`
	SemanticType SemanticType   `protobuf:"varint,3,opt,name=semantic_type,json=semanticType,proto3,enum=greptime.v1.SemanticType" json:"semantic_type,omitempty"`
}

func (x *ColumnSchema) Reset() {
	*x = ColumnSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_row_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnSchema) ProtoMessage() {}

func (x *ColumnSchema) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_row_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnSchema.ProtoReflect.Descriptor instead.
func (*ColumnSchema) Descriptor() ([]byte, []int) {
	return file_greptime_v1_row_proto_rawDescGZIP(), []int{1}
}

func (x *ColumnSchema) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *ColumnSchema) GetDatatype() ColumnDataType {
	if x != nil {
		return x.Datatype
	}
	return ColumnDataType_BOOLEAN
}

func (x *ColumnSchema) GetSemanticType() SemanticType {
	if x != nil {
		return x.SemanticType
	}
	return SemanticType_TAG
}

type Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Field `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Row) Reset() {
	*x = Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_row_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_row_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row.ProtoReflect.Descriptor instead.
func (*Row) Descriptor() ([]byte, []int) {
	return file_greptime_v1_row_proto_rawDescGZIP(), []int{2}
}

func (x *Row) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Field_I8Value
	//	*Field_I16Value
	//	*Field_I32Value
	//	*Field_I64Value
	//	*Field_U8Value
	//	*Field_U16Value
	//	*Field_U32Value
	//	*Field_U64Value
	//	*Field_F32Value
	//	*Field_F64Value
	//	*Field_BoolValue
	//	*Field_BinaryValue
	//	*Field_StringValue
	//	*Field_DateValue
	//	*Field_DatetimeValue
	//	*Field_TsSecondValue
	//	*Field_TsMillisecondValue
	//	*Field_TsMicrosecondValue
	//	*Field_TsNanosecondValue
	//	*Field_TimeSecondValue
	//	*Field_TimeMillisecondValue
	//	*Field_TimeMicrosecondValue
	//	*Field_TimeNanosecondValue
	Value isField_Value `protobuf_oneof:"value"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_row_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_row_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_greptime_v1_row_proto_rawDescGZIP(), []int{3}
}

func (m *Field) GetValue() isField_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Field) GetI8Value() int32 {
	if x, ok := x.GetValue().(*Field_I8Value); ok {
		return x.I8Value
	}
	return 0
}

func (x *Field) GetI16Value() int32 {
	if x, ok := x.GetValue().(*Field_I16Value); ok {
		return x.I16Value
	}
	return 0
}

func (x *Field) GetI32Value() int32 {
	if x, ok := x.GetValue().(*Field_I32Value); ok {
		return x.I32Value
	}
	return 0
}

func (x *Field) GetI64Value() int64 {
	if x, ok := x.GetValue().(*Field_I64Value); ok {
		return x.I64Value
	}
	return 0
}

func (x *Field) GetU8Value() uint32 {
	if x, ok := x.GetValue().(*Field_U8Value); ok {
		return x.U8Value
	}
	return 0
}

func (x *Field) GetU16Value() uint32 {
	if x, ok := x.GetValue().(*Field_U16Value); ok {
		return x.U16Value
	}
	return 0
}

func (x *Field) GetU32Value() uint32 {
	if x, ok := x.GetValue().(*Field_U32Value); ok {
		return x.U32Value
	}
	return 0
}

func (x *Field) GetU64Value() uint64 {
	if x, ok := x.GetValue().(*Field_U64Value); ok {
		return x.U64Value
	}
	return 0
}

func (x *Field) GetF32Value() float32 {
	if x, ok := x.GetValue().(*Field_F32Value); ok {
		return x.F32Value
	}
	return 0
}

func (x *Field) GetF64Value() float64 {
	if x, ok := x.GetValue().(*Field_F64Value); ok {
		return x.F64Value
	}
	return 0
}

func (x *Field) GetBoolValue() bool {
	if x, ok := x.GetValue().(*Field_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *Field) GetBinaryValue() []byte {
	if x, ok := x.GetValue().(*Field_BinaryValue); ok {
		return x.BinaryValue
	}
	return nil
}

func (x *Field) GetStringValue() string {
	if x, ok := x.GetValue().(*Field_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Field) GetDateValue() int32 {
	if x, ok := x.GetValue().(*Field_DateValue); ok {
		return x.DateValue
	}
	return 0
}

func (x *Field) GetDatetimeValue() int64 {
	if x, ok := x.GetValue().(*Field_DatetimeValue); ok {
		return x.DatetimeValue
	}
	return 0
}

func (x *Field) GetTsSecondValue() int64 {
	if x, ok := x.GetValue().(*Field_TsSecondValue); ok {
		return x.TsSecondValue
	}
	return 0
}

func (x *Field) GetTsMillisecondValue() int64 {
	if x, ok := x.GetValue().(*Field_TsMillisecondValue); ok {
		return x.TsMillisecondValue
	}
	return 0
}

func (x *Field) GetTsMicrosecondValue() int64 {
	if x, ok := x.GetValue().(*Field_TsMicrosecondValue); ok {
		return x.TsMicrosecondValue
	}
	return 0
}

func (x *Field) GetTsNanosecondValue() int64 {
	if x, ok := x.GetValue().(*Field_TsNanosecondValue); ok {
		return x.TsNanosecondValue
	}
	return 0
}

func (x *Field) GetTimeSecondValue() int64 {
	if x, ok := x.GetValue().(*Field_TimeSecondValue); ok {
		return x.TimeSecondValue
	}
	return 0
}

func (x *Field) GetTimeMillisecondValue() int64 {
	if x, ok := x.GetValue().(*Field_TimeMillisecondValue); ok {
		return x.TimeMillisecondValue
	}
	return 0
}

func (x *Field) GetTimeMicrosecondValue() int64 {
	if x, ok := x.GetValue().(*Field_TimeMicrosecondValue); ok {
		return x.TimeMicrosecondValue
	}
	return 0
}

func (x *Field) GetTimeNanosecondValue() int64 {
	if x, ok := x.GetValue().(*Field_TimeNanosecondValue); ok {
		return x.TimeNanosecondValue
	}
	return 0
}

type isField_Value interface {
	isField_Value()
}

type Field_I8Value struct {
	I8Value int32 `protobuf:"varint,1,opt,name=i8_value,json=i8Value,proto3,oneof"`
}

type Field_I16Value struct {
	I16Value int32 `protobuf:"varint,2,opt,name=i16_value,json=i16Value,proto3,oneof"`
}

type Field_I32Value struct {
	I32Value int32 `protobuf:"varint,3,opt,name=i32_value,json=i32Value,proto3,oneof"`
}

type Field_I64Value struct {
	I64Value int64 `protobuf:"varint,4,opt,name=i64_value,json=i64Value,proto3,oneof"`
}

type Field_U8Value struct {
	U8Value uint32 `protobuf:"varint,5,opt,name=u8_value,json=u8Value,proto3,oneof"`
}

type Field_U16Value struct {
	U16Value uint32 `protobuf:"varint,6,opt,name=u16_value,json=u16Value,proto3,oneof"`
}

type Field_U32Value struct {
	U32Value uint32 `protobuf:"varint,7,opt,name=u32_value,json=u32Value,proto3,oneof"`
}

type Field_U64Value struct {
	U64Value uint64 `protobuf:"varint,8,opt,name=u64_value,json=u64Value,proto3,oneof"`
}

type Field_F32Value struct {
	F32Value float32 `protobuf:"fixed32,9,opt,name=f32_value,json=f32Value,proto3,oneof"`
}

type Field_F64Value struct {
	F64Value float64 `protobuf:"fixed64,10,opt,name=f64_value,json=f64Value,proto3,oneof"`
}

type Field_BoolValue struct {
	BoolValue bool `protobuf:"varint,11,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type Field_BinaryValue struct {
	BinaryValue []byte `protobuf:"bytes,12,opt,name=binary_value,json=binaryValue,proto3,oneof"`
}

type Field_StringValue struct {
	StringValue string `protobuf:"bytes,13,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Field_DateValue struct {
	DateValue int32 `protobuf:"varint,14,opt,name=date_value,json=dateValue,proto3,oneof"`
}

type Field_DatetimeValue struct {
	DatetimeValue int64 `protobuf:"varint,15,opt,name=datetime_value,json=datetimeValue,proto3,oneof"`
}

type Field_TsSecondValue struct {
	TsSecondValue int64 `protobuf:"varint,16,opt,name=ts_second_value,json=tsSecondValue,proto3,oneof"`
}

type Field_TsMillisecondValue struct {
	TsMillisecondValue int64 `protobuf:"varint,17,opt,name=ts_millisecond_value,json=tsMillisecondValue,proto3,oneof"`
}

type Field_TsMicrosecondValue struct {
	TsMicrosecondValue int64 `protobuf:"varint,18,opt,name=ts_microsecond_value,json=tsMicrosecondValue,proto3,oneof"`
}

type Field_TsNanosecondValue struct {
	TsNanosecondValue int64 `protobuf:"varint,19,opt,name=ts_nanosecond_value,json=tsNanosecondValue,proto3,oneof"`
}

type Field_TimeSecondValue struct {
	TimeSecondValue int64 `protobuf:"varint,20,opt,name=time_second_value,json=timeSecondValue,proto3,oneof"`
}

type Field_TimeMillisecondValue struct {
	TimeMillisecondValue int64 `protobuf:"varint,21,opt,name=time_millisecond_value,json=timeMillisecondValue,proto3,oneof"`
}

type Field_TimeMicrosecondValue struct {
	TimeMicrosecondValue int64 `protobuf:"varint,22,opt,name=time_microsecond_value,json=timeMicrosecondValue,proto3,oneof"`
}

type Field_TimeNanosecondValue struct {
	TimeNanosecondValue int64 `protobuf:"varint,23,opt,name=time_nanosecond_value,json=timeNanosecondValue,proto3,oneof"`
}

func (*Field_I8Value) isField_Value() {}

func (*Field_I16Value) isField_Value() {}

func (*Field_I32Value) isField_Value() {}

func (*Field_I64Value) isField_Value() {}

func (*Field_U8Value) isField_Value() {}

func (*Field_U16Value) isField_Value() {}

func (*Field_U32Value) isField_Value() {}

func (*Field_U64Value) isField_Value() {}

func (*Field_F32Value) isField_Value() {}

func (*Field_F64Value) isField_Value() {}

func (*Field_BoolValue) isField_Value() {}

func (*Field_BinaryValue) isField_Value() {}

func (*Field_StringValue) isField_Value() {}

func (*Field_DateValue) isField_Value() {}

func (*Field_DatetimeValue) isField_Value() {}

func (*Field_TsSecondValue) isField_Value() {}

func (*Field_TsMillisecondValue) isField_Value() {}

func (*Field_TsMicrosecondValue) isField_Value() {}

func (*Field_TsNanosecondValue) isField_Value() {}

func (*Field_TimeSecondValue) isField_Value() {}

func (*Field_TimeMillisecondValue) isField_Value() {}

func (*Field_TimeMicrosecondValue) isField_Value() {}

func (*Field_TimeNanosecondValue) isField_Value() {}

var File_greptime_v1_row_proto protoreflect.FileDescriptor

var file_greptime_v1_row_proto_rawDesc = []byte{
	0x0a, 0x15, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f,
	0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x1a, 0x18, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5f,
	0x0a, 0x04, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x24, 0x0a, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22,
	0xa8, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x37, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x65,
	0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x65,
	0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x22, 0x31, 0x0a, 0x03, 0x52, 0x6f,
	0x77, 0x12, 0x2a, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x8f, 0x07,
	0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x69, 0x38, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x69, 0x38, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x31, 0x36, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x69, 0x31, 0x36, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x69, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1b, 0x0a, 0x08, 0x75, 0x38, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x75, 0x38, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d,
	0x0a, 0x09, 0x75, 0x31, 0x36, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x08, 0x75, 0x31, 0x36, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a,
	0x09, 0x75, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x08, 0x75, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09,
	0x75, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x08, 0x75, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x66,
	0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00,
	0x52, 0x08, 0x66, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x66, 0x36,
	0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52,
	0x08, 0x66, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x73, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x73, 0x5f, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x12, 0x74, 0x73, 0x4d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x74, 0x73, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x12, 0x74, 0x73,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x74, 0x73, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x11, 0x74, 0x73, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x0f, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x36, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x14, 0x74, 0x69, 0x6d, 0x65,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x50, 0x0a, 0x0e, 0x69, 0x6f, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x42, 0x07, 0x52, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x2f, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_greptime_v1_row_proto_rawDescOnce sync.Once
	file_greptime_v1_row_proto_rawDescData = file_greptime_v1_row_proto_rawDesc
)

func file_greptime_v1_row_proto_rawDescGZIP() []byte {
	file_greptime_v1_row_proto_rawDescOnce.Do(func() {
		file_greptime_v1_row_proto_rawDescData = protoimpl.X.CompressGZIP(file_greptime_v1_row_proto_rawDescData)
	})
	return file_greptime_v1_row_proto_rawDescData
}

var file_greptime_v1_row_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_greptime_v1_row_proto_goTypes = []interface{}{
	(*Rows)(nil),         // 0: greptime.v1.Rows
	(*ColumnSchema)(nil), // 1: greptime.v1.ColumnSchema
	(*Row)(nil),          // 2: greptime.v1.Row
	(*Field)(nil),        // 3: greptime.v1.Field
	(ColumnDataType)(0),  // 4: greptime.v1.ColumnDataType
	(SemanticType)(0),    // 5: greptime.v1.SemanticType
}
var file_greptime_v1_row_proto_depIdxs = []int32{
	1, // 0: greptime.v1.Rows.schema:type_name -> greptime.v1.ColumnSchema
	2, // 1: greptime.v1.Rows.rows:type_name -> greptime.v1.Row
	4, // 2: greptime.v1.ColumnSchema.datatype:type_name -> greptime.v1.ColumnDataType
	5, // 3: greptime.v1.ColumnSchema.semantic_type:type_name -> greptime.v1.SemanticType
	3, // 4: greptime.v1.Row.fields:type_name -> greptime.v1.Field
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_greptime_v1_row_proto_init() }
func file_greptime_v1_row_proto_init() {
	if File_greptime_v1_row_proto != nil {
		return
	}
	file_greptime_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_greptime_v1_row_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_row_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_row_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_row_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_greptime_v1_row_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Field_I8Value)(nil),
		(*Field_I16Value)(nil),
		(*Field_I32Value)(nil),
		(*Field_I64Value)(nil),
		(*Field_U8Value)(nil),
		(*Field_U16Value)(nil),
		(*Field_U32Value)(nil),
		(*Field_U64Value)(nil),
		(*Field_F32Value)(nil),
		(*Field_F64Value)(nil),
		(*Field_BoolValue)(nil),
		(*Field_BinaryValue)(nil),
		(*Field_StringValue)(nil),
		(*Field_DateValue)(nil),
		(*Field_DatetimeValue)(nil),
		(*Field_TsSecondValue)(nil),
		(*Field_TsMillisecondValue)(nil),
		(*Field_TsMicrosecondValue)(nil),
		(*Field_TsNanosecondValue)(nil),
		(*Field_TimeSecondValue)(nil),
		(*Field_TimeMillisecondValue)(nil),
		(*Field_TimeMicrosecondValue)(nil),
		(*Field_TimeNanosecondValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_greptime_v1_row_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_greptime_v1_row_proto_goTypes,
		DependencyIndexes: file_greptime_v1_row_proto_depIdxs,
		MessageInfos:      file_greptime_v1_row_proto_msgTypes,
	}.Build()
	File_greptime_v1_row_proto = out.File
	file_greptime_v1_row_proto_rawDesc = nil
	file_greptime_v1_row_proto_goTypes = nil
	file_greptime_v1_row_proto_depIdxs = nil
}
