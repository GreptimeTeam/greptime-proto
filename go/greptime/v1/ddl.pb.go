// Copyright 2023 Greptime Team
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: greptime/v1/ddl.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddColumn_Location_LocationType int32

const (
	AddColumn_Location_FIRST AddColumn_Location_LocationType = 0
	AddColumn_Location_AFTER AddColumn_Location_LocationType = 1
)

// Enum value maps for AddColumn_Location_LocationType.
var (
	AddColumn_Location_LocationType_name = map[int32]string{
		0: "FIRST",
		1: "AFTER",
	}
	AddColumn_Location_LocationType_value = map[string]int32{
		"FIRST": 0,
		"AFTER": 1,
	}
)

func (x AddColumn_Location_LocationType) Enum() *AddColumn_Location_LocationType {
	p := new(AddColumn_Location_LocationType)
	*p = x
	return p
}

func (x AddColumn_Location_LocationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddColumn_Location_LocationType) Descriptor() protoreflect.EnumDescriptor {
	return file_greptime_v1_ddl_proto_enumTypes[0].Descriptor()
}

func (AddColumn_Location_LocationType) Type() protoreflect.EnumType {
	return &file_greptime_v1_ddl_proto_enumTypes[0]
}

func (x AddColumn_Location_LocationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddColumn_Location_LocationType.Descriptor instead.
func (AddColumn_Location_LocationType) EnumDescriptor() ([]byte, []int) {
	return file_greptime_v1_ddl_proto_rawDescGZIP(), []int{9, 0, 0}
}

// "Data Definition Language" requests, that create, modify or delete the
// database structures but not the data. `DdlRequest` could carry more
// information than plain SQL, for example, the "table_id" in `CreateTableExpr`.
// So create a new DDL expr if you need it.
type DdlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Expr:
	//
	//	*DdlRequest_CreateDatabase
	//	*DdlRequest_CreateTable
	//	*DdlRequest_Alter
	//	*DdlRequest_DropTable
	//	*DdlRequest_FlushTable
	Expr isDdlRequest_Expr `protobuf_oneof:"expr"`
}

func (x *DdlRequest) Reset() {
	*x = DdlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_ddl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DdlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DdlRequest) ProtoMessage() {}

func (x *DdlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_ddl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DdlRequest.ProtoReflect.Descriptor instead.
func (*DdlRequest) Descriptor() ([]byte, []int) {
	return file_greptime_v1_ddl_proto_rawDescGZIP(), []int{0}
}

func (m *DdlRequest) GetExpr() isDdlRequest_Expr {
	if m != nil {
		return m.Expr
	}
	return nil
}

func (x *DdlRequest) GetCreateDatabase() *CreateDatabaseExpr {
	if x, ok := x.GetExpr().(*DdlRequest_CreateDatabase); ok {
		return x.CreateDatabase
	}
	return nil
}

func (x *DdlRequest) GetCreateTable() *CreateTableExpr {
	if x, ok := x.GetExpr().(*DdlRequest_CreateTable); ok {
		return x.CreateTable
	}
	return nil
}

func (x *DdlRequest) GetAlter() *AlterExpr {
	if x, ok := x.GetExpr().(*DdlRequest_Alter); ok {
		return x.Alter
	}
	return nil
}

func (x *DdlRequest) GetDropTable() *DropTableExpr {
	if x, ok := x.GetExpr().(*DdlRequest_DropTable); ok {
		return x.DropTable
	}
	return nil
}

func (x *DdlRequest) GetFlushTable() *FlushTableExpr {
	if x, ok := x.GetExpr().(*DdlRequest_FlushTable); ok {
		return x.FlushTable
	}
	return nil
}

type isDdlRequest_Expr interface {
	isDdlRequest_Expr()
}

type DdlRequest_CreateDatabase struct {
	CreateDatabase *CreateDatabaseExpr `protobuf:"bytes,1,opt,name=create_database,json=createDatabase,proto3,oneof"`
}

type DdlRequest_CreateTable struct {
	CreateTable *CreateTableExpr `protobuf:"bytes,2,opt,name=create_table,json=createTable,proto3,oneof"`
}

type DdlRequest_Alter struct {
	Alter *AlterExpr `protobuf:"bytes,3,opt,name=alter,proto3,oneof"`
}

type DdlRequest_DropTable struct {
	DropTable *DropTableExpr `protobuf:"bytes,4,opt,name=drop_table,json=dropTable,proto3,oneof"`
}

type DdlRequest_FlushTable struct {
	FlushTable *FlushTableExpr `protobuf:"bytes,5,opt,name=flush_table,json=flushTable,proto3,oneof"`
}

func (*DdlRequest_CreateDatabase) isDdlRequest_Expr() {}

func (*DdlRequest_CreateTable) isDdlRequest_Expr() {}

func (*DdlRequest_Alter) isDdlRequest_Expr() {}

func (*DdlRequest_DropTable) isDdlRequest_Expr() {}

func (*DdlRequest_FlushTable) isDdlRequest_Expr() {}

type CreateTableExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatalogName       string            `protobuf:"bytes,1,opt,name=catalog_name,json=catalogName,proto3" json:"catalog_name,omitempty"`
	SchemaName        string            `protobuf:"bytes,2,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	TableName         string            `protobuf:"bytes,3,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Desc              string            `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	ColumnDefs        []*ColumnDef      `protobuf:"bytes,5,rep,name=column_defs,json=columnDefs,proto3" json:"column_defs,omitempty"`
	TimeIndex         string            `protobuf:"bytes,6,opt,name=time_index,json=timeIndex,proto3" json:"time_index,omitempty"`
	PrimaryKeys       []string          `protobuf:"bytes,7,rep,name=primary_keys,json=primaryKeys,proto3" json:"primary_keys,omitempty"`
	CreateIfNotExists bool              `protobuf:"varint,8,opt,name=create_if_not_exists,json=createIfNotExists,proto3" json:"create_if_not_exists,omitempty"`
	TableOptions      map[string]string `protobuf:"bytes,9,rep,name=table_options,json=tableOptions,proto3" json:"table_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TableId           *TableId          `protobuf:"bytes,10,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	RegionNumbers     []uint32          `protobuf:"varint,11,rep,packed,name=region_numbers,json=regionNumbers,proto3" json:"region_numbers,omitempty"`
	Engine            string            `protobuf:"bytes,12,opt,name=engine,proto3" json:"engine,omitempty"`
}

func (x *CreateTableExpr) Reset() {
	*x = CreateTableExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_ddl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableExpr) ProtoMessage() {}

func (x *CreateTableExpr) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_ddl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableExpr.ProtoReflect.Descriptor instead.
func (*CreateTableExpr) Descriptor() ([]byte, []int) {
	return file_greptime_v1_ddl_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTableExpr) GetCatalogName() string {
	if x != nil {
		return x.CatalogName
	}
	return ""
}

func (x *CreateTableExpr) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *CreateTableExpr) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *CreateTableExpr) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CreateTableExpr) GetColumnDefs() []*ColumnDef {
	if x != nil {
		return x.ColumnDefs
	}
	return nil
}

func (x *CreateTableExpr) GetTimeIndex() string {
	if x != nil {
		return x.TimeIndex
	}
	return ""
}

func (x *CreateTableExpr) GetPrimaryKeys() []string {
	if x != nil {
		return x.PrimaryKeys
	}
	return nil
}

func (x *CreateTableExpr) GetCreateIfNotExists() bool {
	if x != nil {
		return x.CreateIfNotExists
	}
	return false
}

func (x *CreateTableExpr) GetTableOptions() map[string]string {
	if x != nil {
		return x.TableOptions
	}
	return nil
}

func (x *CreateTableExpr) GetTableId() *TableId {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *CreateTableExpr) GetRegionNumbers() []uint32 {
	if x != nil {
		return x.RegionNumbers
	}
	return nil
}

func (x *CreateTableExpr) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

type AlterExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatalogName string `protobuf:"bytes,1,opt,name=catalog_name,json=catalogName,proto3" json:"catalog_name,omitempty"`
	SchemaName  string `protobuf:"bytes,2,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	TableName   string `protobuf:"bytes,3,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// Types that are assignable to Kind:
	//
	//	*AlterExpr_AddColumns
	//	*AlterExpr_DropColumns
	//	*AlterExpr_RenameTable
	Kind isAlterExpr_Kind `protobuf_oneof:"kind"`
}

func (x *AlterExpr) Reset() {
	*x = AlterExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_ddl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterExpr) ProtoMessage() {}

func (x *AlterExpr) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_ddl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterExpr.ProtoReflect.Descriptor instead.
func (*AlterExpr) Descriptor() ([]byte, []int) {
	return file_greptime_v1_ddl_proto_rawDescGZIP(), []int{2}
}

func (x *AlterExpr) GetCatalogName() string {
	if x != nil {
		return x.CatalogName
	}
	return ""
}

func (x *AlterExpr) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *AlterExpr) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (m *AlterExpr) GetKind() isAlterExpr_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *AlterExpr) GetAddColumns() *AddColumns {
	if x, ok := x.GetKind().(*AlterExpr_AddColumns); ok {
		return x.AddColumns
	}
	return nil
}

func (x *AlterExpr) GetDropColumns() *DropColumns {
	if x, ok := x.GetKind().(*AlterExpr_DropColumns); ok {
		return x.DropColumns
	}
	return nil
}

func (x *AlterExpr) GetRenameTable() *RenameTable {
	if x, ok := x.GetKind().(*AlterExpr_RenameTable); ok {
		return x.RenameTable
	}
	return nil
}

type isAlterExpr_Kind interface {
	isAlterExpr_Kind()
}

type AlterExpr_AddColumns struct {
	AddColumns *AddColumns `protobuf:"bytes,4,opt,name=add_columns,json=addColumns,proto3,oneof"`
}

type AlterExpr_DropColumns struct {
	DropColumns *DropColumns `protobuf:"bytes,5,opt,name=drop_columns,json=dropColumns,proto3,oneof"`
}

type AlterExpr_RenameTable struct {
	RenameTable *RenameTable `protobuf:"bytes,6,opt,name=rename_table,json=renameTable,proto3,oneof"`
}

func (*AlterExpr_AddColumns) isAlterExpr_Kind() {}

func (*AlterExpr_DropColumns) isAlterExpr_Kind() {}

func (*AlterExpr_RenameTable) isAlterExpr_Kind() {}

type DropTableExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatalogName string `protobuf:"bytes,1,opt,name=catalog_name,json=catalogName,proto3" json:"catalog_name,omitempty"`
	SchemaName  string `protobuf:"bytes,2,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	TableName   string `protobuf:"bytes,3,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
}

func (x *DropTableExpr) Reset() {
	*x = DropTableExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_ddl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropTableExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropTableExpr) ProtoMessage() {}

func (x *DropTableExpr) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_ddl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropTableExpr.ProtoReflect.Descriptor instead.
func (*DropTableExpr) Descriptor() ([]byte, []int) {
	return file_greptime_v1_ddl_proto_rawDescGZIP(), []int{3}
}

func (x *DropTableExpr) GetCatalogName() string {
	if x != nil {
		return x.CatalogName
	}
	return ""
}

func (x *DropTableExpr) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *DropTableExpr) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type FlushTableExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatalogName  string  `protobuf:"bytes,1,opt,name=catalog_name,json=catalogName,proto3" json:"catalog_name,omitempty"`
	SchemaName   string  `protobuf:"bytes,2,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	TableName    string  `protobuf:"bytes,3,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	RegionNumber *uint32 `protobuf:"varint,4,opt,name=region_number,json=regionNumber,proto3,oneof" json:"region_number,omitempty"`
}

func (x *FlushTableExpr) Reset() {
	*x = FlushTableExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_ddl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushTableExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushTableExpr) ProtoMessage() {}

func (x *FlushTableExpr) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_ddl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushTableExpr.ProtoReflect.Descriptor instead.
func (*FlushTableExpr) Descriptor() ([]byte, []int) {
	return file_greptime_v1_ddl_proto_rawDescGZIP(), []int{4}
}

func (x *FlushTableExpr) GetCatalogName() string {
	if x != nil {
		return x.CatalogName
	}
	return ""
}

func (x *FlushTableExpr) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *FlushTableExpr) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *FlushTableExpr) GetRegionNumber() uint32 {
	if x != nil && x.RegionNumber != nil {
		return *x.RegionNumber
	}
	return 0
}

type CreateDatabaseExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(hl): maybe rename to schema_name?
	DatabaseName      string `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	CreateIfNotExists bool   `protobuf:"varint,2,opt,name=create_if_not_exists,json=createIfNotExists,proto3" json:"create_if_not_exists,omitempty"`
}

func (x *CreateDatabaseExpr) Reset() {
	*x = CreateDatabaseExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_ddl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDatabaseExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDatabaseExpr) ProtoMessage() {}

func (x *CreateDatabaseExpr) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_ddl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDatabaseExpr.ProtoReflect.Descriptor instead.
func (*CreateDatabaseExpr) Descriptor() ([]byte, []int) {
	return file_greptime_v1_ddl_proto_rawDescGZIP(), []int{5}
}

func (x *CreateDatabaseExpr) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *CreateDatabaseExpr) GetCreateIfNotExists() bool {
	if x != nil {
		return x.CreateIfNotExists
	}
	return false
}

type AddColumns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddColumns []*AddColumn `protobuf:"bytes,1,rep,name=add_columns,json=addColumns,proto3" json:"add_columns,omitempty"`
}

func (x *AddColumns) Reset() {
	*x = AddColumns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_ddl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddColumns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddColumns) ProtoMessage() {}

func (x *AddColumns) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_ddl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddColumns.ProtoReflect.Descriptor instead.
func (*AddColumns) Descriptor() ([]byte, []int) {
	return file_greptime_v1_ddl_proto_rawDescGZIP(), []int{6}
}

func (x *AddColumns) GetAddColumns() []*AddColumn {
	if x != nil {
		return x.AddColumns
	}
	return nil
}

type DropColumns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DropColumns []*DropColumn `protobuf:"bytes,1,rep,name=drop_columns,json=dropColumns,proto3" json:"drop_columns,omitempty"`
}

func (x *DropColumns) Reset() {
	*x = DropColumns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_ddl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropColumns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropColumns) ProtoMessage() {}

func (x *DropColumns) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_ddl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropColumns.ProtoReflect.Descriptor instead.
func (*DropColumns) Descriptor() ([]byte, []int) {
	return file_greptime_v1_ddl_proto_rawDescGZIP(), []int{7}
}

func (x *DropColumns) GetDropColumns() []*DropColumn {
	if x != nil {
		return x.DropColumns
	}
	return nil
}

type RenameTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewTableName string `protobuf:"bytes,1,opt,name=new_table_name,json=newTableName,proto3" json:"new_table_name,omitempty"`
}

func (x *RenameTable) Reset() {
	*x = RenameTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_ddl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameTable) ProtoMessage() {}

func (x *RenameTable) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_ddl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameTable.ProtoReflect.Descriptor instead.
func (*RenameTable) Descriptor() ([]byte, []int) {
	return file_greptime_v1_ddl_proto_rawDescGZIP(), []int{8}
}

func (x *RenameTable) GetNewTableName() string {
	if x != nil {
		return x.NewTableName
	}
	return ""
}

type AddColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnDef *ColumnDef          `protobuf:"bytes,1,opt,name=column_def,json=columnDef,proto3" json:"column_def,omitempty"`
	IsKey     bool                `protobuf:"varint,2,opt,name=is_key,json=isKey,proto3" json:"is_key,omitempty"`
	Location  *AddColumn_Location `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *AddColumn) Reset() {
	*x = AddColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_ddl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddColumn) ProtoMessage() {}

func (x *AddColumn) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_ddl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddColumn.ProtoReflect.Descriptor instead.
func (*AddColumn) Descriptor() ([]byte, []int) {
	return file_greptime_v1_ddl_proto_rawDescGZIP(), []int{9}
}

func (x *AddColumn) GetColumnDef() *ColumnDef {
	if x != nil {
		return x.ColumnDef
	}
	return nil
}

func (x *AddColumn) GetIsKey() bool {
	if x != nil {
		return x.IsKey
	}
	return false
}

func (x *AddColumn) GetLocation() *AddColumn_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

type DropColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DropColumn) Reset() {
	*x = DropColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_ddl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropColumn) ProtoMessage() {}

func (x *DropColumn) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_ddl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropColumn.ProtoReflect.Descriptor instead.
func (*DropColumn) Descriptor() ([]byte, []int) {
	return file_greptime_v1_ddl_proto_rawDescGZIP(), []int{10}
}

func (x *DropColumn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TableId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TableId) Reset() {
	*x = TableId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_ddl_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableId) ProtoMessage() {}

func (x *TableId) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_ddl_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableId.ProtoReflect.Descriptor instead.
func (*TableId) Descriptor() ([]byte, []int) {
	return file_greptime_v1_ddl_proto_rawDescGZIP(), []int{11}
}

func (x *TableId) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type AddColumn_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocationType    AddColumn_Location_LocationType `protobuf:"varint,1,opt,name=location_type,json=locationType,proto3,enum=greptime.v1.AddColumn_Location_LocationType" json:"location_type,omitempty"`
	AfterCloumnName string                          `protobuf:"bytes,2,opt,name=after_cloumn_name,json=afterCloumnName,proto3" json:"after_cloumn_name,omitempty"`
}

func (x *AddColumn_Location) Reset() {
	*x = AddColumn_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_ddl_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddColumn_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddColumn_Location) ProtoMessage() {}

func (x *AddColumn_Location) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_ddl_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddColumn_Location.ProtoReflect.Descriptor instead.
func (*AddColumn_Location) Descriptor() ([]byte, []int) {
	return file_greptime_v1_ddl_proto_rawDescGZIP(), []int{9, 0}
}

func (x *AddColumn_Location) GetLocationType() AddColumn_Location_LocationType {
	if x != nil {
		return x.LocationType
	}
	return AddColumn_Location_FIRST
}

func (x *AddColumn_Location) GetAfterCloumnName() string {
	if x != nil {
		return x.AfterCloumnName
	}
	return ""
}

var File_greptime_v1_ddl_proto protoreflect.FileDescriptor

var file_greptime_v1_ddl_proto_rawDesc = []byte{
	0x0a, 0x15, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x64,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x1a, 0x18, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0,
	0x02, 0x0a, 0x0a, 0x44, 0x64, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a,
	0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x05,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x72,
	0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x45,
	0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0a,
	0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x09,
	0x64, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x66, 0x6c, 0x75,
	0x73, 0x68, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x75,
	0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x66,
	0x6c, 0x75, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x65, 0x78, 0x70,
	0x72, 0x22, 0xba, 0x04, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x37, 0x0a, 0x0b,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x44, 0x65, 0x66, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x66, 0x4e,
	0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x1a, 0x3f, 0x0a,
	0x11, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb0,
	0x02, 0x0a, 0x09, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3a, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x48, 0x00, 0x52,
	0x0a, 0x61, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x64,
	0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x22, 0x72, 0x0a, 0x0d, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78,
	0x70, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x0e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x6a, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x66, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x22, 0x45, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x12, 0x37, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x0a,
	0x61, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x49, 0x0a, 0x0b, 0x44, 0x72,
	0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72,
	0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x33, 0x0a, 0x0b, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65,
	0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x09, 0x41,
	0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x44, 0x65, 0x66, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x12,
	0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xaf, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x24, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x09, 0x0a, 0x05, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x46,
	0x54, 0x45, 0x52, 0x10, 0x01, 0x22, 0x20, 0x0a, 0x0a, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x19, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x42, 0x4c, 0x0a, 0x0e, 0x69, 0x6f, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x42, 0x03, 0x44, 0x64, 0x6c, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x2f, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_greptime_v1_ddl_proto_rawDescOnce sync.Once
	file_greptime_v1_ddl_proto_rawDescData = file_greptime_v1_ddl_proto_rawDesc
)

func file_greptime_v1_ddl_proto_rawDescGZIP() []byte {
	file_greptime_v1_ddl_proto_rawDescOnce.Do(func() {
		file_greptime_v1_ddl_proto_rawDescData = protoimpl.X.CompressGZIP(file_greptime_v1_ddl_proto_rawDescData)
	})
	return file_greptime_v1_ddl_proto_rawDescData
}

var file_greptime_v1_ddl_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_greptime_v1_ddl_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_greptime_v1_ddl_proto_goTypes = []interface{}{
	(AddColumn_Location_LocationType)(0), // 0: greptime.v1.AddColumn.Location.LocationType
	(*DdlRequest)(nil),                   // 1: greptime.v1.DdlRequest
	(*CreateTableExpr)(nil),              // 2: greptime.v1.CreateTableExpr
	(*AlterExpr)(nil),                    // 3: greptime.v1.AlterExpr
	(*DropTableExpr)(nil),                // 4: greptime.v1.DropTableExpr
	(*FlushTableExpr)(nil),               // 5: greptime.v1.FlushTableExpr
	(*CreateDatabaseExpr)(nil),           // 6: greptime.v1.CreateDatabaseExpr
	(*AddColumns)(nil),                   // 7: greptime.v1.AddColumns
	(*DropColumns)(nil),                  // 8: greptime.v1.DropColumns
	(*RenameTable)(nil),                  // 9: greptime.v1.RenameTable
	(*AddColumn)(nil),                    // 10: greptime.v1.AddColumn
	(*DropColumn)(nil),                   // 11: greptime.v1.DropColumn
	(*TableId)(nil),                      // 12: greptime.v1.TableId
	nil,                                  // 13: greptime.v1.CreateTableExpr.TableOptionsEntry
	(*AddColumn_Location)(nil),           // 14: greptime.v1.AddColumn.Location
	(*ColumnDef)(nil),                    // 15: greptime.v1.ColumnDef
}
var file_greptime_v1_ddl_proto_depIdxs = []int32{
	6,  // 0: greptime.v1.DdlRequest.create_database:type_name -> greptime.v1.CreateDatabaseExpr
	2,  // 1: greptime.v1.DdlRequest.create_table:type_name -> greptime.v1.CreateTableExpr
	3,  // 2: greptime.v1.DdlRequest.alter:type_name -> greptime.v1.AlterExpr
	4,  // 3: greptime.v1.DdlRequest.drop_table:type_name -> greptime.v1.DropTableExpr
	5,  // 4: greptime.v1.DdlRequest.flush_table:type_name -> greptime.v1.FlushTableExpr
	15, // 5: greptime.v1.CreateTableExpr.column_defs:type_name -> greptime.v1.ColumnDef
	13, // 6: greptime.v1.CreateTableExpr.table_options:type_name -> greptime.v1.CreateTableExpr.TableOptionsEntry
	12, // 7: greptime.v1.CreateTableExpr.table_id:type_name -> greptime.v1.TableId
	7,  // 8: greptime.v1.AlterExpr.add_columns:type_name -> greptime.v1.AddColumns
	8,  // 9: greptime.v1.AlterExpr.drop_columns:type_name -> greptime.v1.DropColumns
	9,  // 10: greptime.v1.AlterExpr.rename_table:type_name -> greptime.v1.RenameTable
	10, // 11: greptime.v1.AddColumns.add_columns:type_name -> greptime.v1.AddColumn
	11, // 12: greptime.v1.DropColumns.drop_columns:type_name -> greptime.v1.DropColumn
	15, // 13: greptime.v1.AddColumn.column_def:type_name -> greptime.v1.ColumnDef
	14, // 14: greptime.v1.AddColumn.location:type_name -> greptime.v1.AddColumn.Location
	0,  // 15: greptime.v1.AddColumn.Location.location_type:type_name -> greptime.v1.AddColumn.Location.LocationType
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_greptime_v1_ddl_proto_init() }
func file_greptime_v1_ddl_proto_init() {
	if File_greptime_v1_ddl_proto != nil {
		return
	}
	file_greptime_v1_column_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_greptime_v1_ddl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DdlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_ddl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_ddl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_ddl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropTableExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_ddl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushTableExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_ddl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDatabaseExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_ddl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddColumns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_ddl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropColumns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_ddl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_ddl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_ddl_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_ddl_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_ddl_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddColumn_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_greptime_v1_ddl_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*DdlRequest_CreateDatabase)(nil),
		(*DdlRequest_CreateTable)(nil),
		(*DdlRequest_Alter)(nil),
		(*DdlRequest_DropTable)(nil),
		(*DdlRequest_FlushTable)(nil),
	}
	file_greptime_v1_ddl_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*AlterExpr_AddColumns)(nil),
		(*AlterExpr_DropColumns)(nil),
		(*AlterExpr_RenameTable)(nil),
	}
	file_greptime_v1_ddl_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_greptime_v1_ddl_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_greptime_v1_ddl_proto_goTypes,
		DependencyIndexes: file_greptime_v1_ddl_proto_depIdxs,
		EnumInfos:         file_greptime_v1_ddl_proto_enumTypes,
		MessageInfos:      file_greptime_v1_ddl_proto_msgTypes,
	}.Build()
	File_greptime_v1_ddl_proto = out.File
	file_greptime_v1_ddl_proto_rawDesc = nil
	file_greptime_v1_ddl_proto_goTypes = nil
	file_greptime_v1_ddl_proto_depIdxs = nil
}
