// Copyright 2023 Greptime Team
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: greptime/v1/index/bloom_filter.proto

package index

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BloomFilterMeta defines the metadata for a bloom filter.
type BloomFilterMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of rows per segment.
	RowsPerSegment uint64 `protobuf:"varint,1,opt,name=rows_per_segment,json=rowsPerSegment,proto3" json:"rows_per_segment,omitempty"`
	// The number of segments.
	SegmentCount uint64 `protobuf:"varint,2,opt,name=segment_count,json=segmentCount,proto3" json:"segment_count,omitempty"`
	// The number of total rows.
	RowCount uint64 `protobuf:"varint,3,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	// The size of the bloom filter in bytes excluding the metadata.
	BloomFilterSize uint64 `protobuf:"varint,4,opt,name=bloom_filter_size,json=bloomFilterSize,proto3" json:"bloom_filter_size,omitempty"`
	// The indices to the bloom filter location of each segment.
	SegmentLocIndices []uint64 `protobuf:"varint,5,rep,packed,name=segment_loc_indices,json=segmentLocIndices,proto3" json:"segment_loc_indices,omitempty"`
	// The bloom filter locations.
	BloomFilterLocs []*BloomFilterLoc `protobuf:"bytes,6,rep,name=bloom_filter_locs,json=bloomFilterLocs,proto3" json:"bloom_filter_locs,omitempty"`
}

func (x *BloomFilterMeta) Reset() {
	*x = BloomFilterMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_index_bloom_filter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BloomFilterMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BloomFilterMeta) ProtoMessage() {}

func (x *BloomFilterMeta) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_index_bloom_filter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BloomFilterMeta.ProtoReflect.Descriptor instead.
func (*BloomFilterMeta) Descriptor() ([]byte, []int) {
	return file_greptime_v1_index_bloom_filter_proto_rawDescGZIP(), []int{0}
}

func (x *BloomFilterMeta) GetRowsPerSegment() uint64 {
	if x != nil {
		return x.RowsPerSegment
	}
	return 0
}

func (x *BloomFilterMeta) GetSegmentCount() uint64 {
	if x != nil {
		return x.SegmentCount
	}
	return 0
}

func (x *BloomFilterMeta) GetRowCount() uint64 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

func (x *BloomFilterMeta) GetBloomFilterSize() uint64 {
	if x != nil {
		return x.BloomFilterSize
	}
	return 0
}

func (x *BloomFilterMeta) GetSegmentLocIndices() []uint64 {
	if x != nil {
		return x.SegmentLocIndices
	}
	return nil
}

func (x *BloomFilterMeta) GetBloomFilterLocs() []*BloomFilterLoc {
	if x != nil {
		return x.BloomFilterLocs
	}
	return nil
}

// BloomFilterLoc defines the location of a bloom filter.
type BloomFilterLoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The byte offset of the bloom filter data.
	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// The size of the bloom filter data.
	Size uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// The number of elements in the bloom filter.
	ElementCount uint64 `protobuf:"varint,3,opt,name=element_count,json=elementCount,proto3" json:"element_count,omitempty"`
}

func (x *BloomFilterLoc) Reset() {
	*x = BloomFilterLoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_greptime_v1_index_bloom_filter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BloomFilterLoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BloomFilterLoc) ProtoMessage() {}

func (x *BloomFilterLoc) ProtoReflect() protoreflect.Message {
	mi := &file_greptime_v1_index_bloom_filter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BloomFilterLoc.ProtoReflect.Descriptor instead.
func (*BloomFilterLoc) Descriptor() ([]byte, []int) {
	return file_greptime_v1_index_bloom_filter_proto_rawDescGZIP(), []int{1}
}

func (x *BloomFilterLoc) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *BloomFilterLoc) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BloomFilterLoc) GetElementCount() uint64 {
	if x != nil {
		return x.ElementCount
	}
	return 0
}

var File_greptime_v1_index_bloom_filter_proto protoreflect.FileDescriptor

var file_greptime_v1_index_bloom_filter_proto_rawDesc = []byte{
	0x0a, 0x24, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2f, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xa8, 0x02, 0x0a, 0x0f, 0x42, 0x6c,
	0x6f, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x28, 0x0a,
	0x10, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x6f, 0x77, 0x73, 0x50, 0x65, 0x72,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6c, 0x6f,
	0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x6f, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x11, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x73, 0x22, 0x61, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x2f, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_greptime_v1_index_bloom_filter_proto_rawDescOnce sync.Once
	file_greptime_v1_index_bloom_filter_proto_rawDescData = file_greptime_v1_index_bloom_filter_proto_rawDesc
)

func file_greptime_v1_index_bloom_filter_proto_rawDescGZIP() []byte {
	file_greptime_v1_index_bloom_filter_proto_rawDescOnce.Do(func() {
		file_greptime_v1_index_bloom_filter_proto_rawDescData = protoimpl.X.CompressGZIP(file_greptime_v1_index_bloom_filter_proto_rawDescData)
	})
	return file_greptime_v1_index_bloom_filter_proto_rawDescData
}

var file_greptime_v1_index_bloom_filter_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_greptime_v1_index_bloom_filter_proto_goTypes = []interface{}{
	(*BloomFilterMeta)(nil), // 0: greptime.v1.index.BloomFilterMeta
	(*BloomFilterLoc)(nil),  // 1: greptime.v1.index.BloomFilterLoc
}
var file_greptime_v1_index_bloom_filter_proto_depIdxs = []int32{
	1, // 0: greptime.v1.index.BloomFilterMeta.bloom_filter_locs:type_name -> greptime.v1.index.BloomFilterLoc
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_greptime_v1_index_bloom_filter_proto_init() }
func file_greptime_v1_index_bloom_filter_proto_init() {
	if File_greptime_v1_index_bloom_filter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_greptime_v1_index_bloom_filter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BloomFilterMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_greptime_v1_index_bloom_filter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BloomFilterLoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_greptime_v1_index_bloom_filter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_greptime_v1_index_bloom_filter_proto_goTypes,
		DependencyIndexes: file_greptime_v1_index_bloom_filter_proto_depIdxs,
		MessageInfos:      file_greptime_v1_index_bloom_filter_proto_msgTypes,
	}.Build()
	File_greptime_v1_index_bloom_filter_proto = out.File
	file_greptime_v1_index_bloom_filter_proto_rawDesc = nil
	file_greptime_v1_index_bloom_filter_proto_goTypes = nil
	file_greptime_v1_index_bloom_filter_proto_depIdxs = nil
}
