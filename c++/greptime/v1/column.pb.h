// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: greptime/v1/column.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2fcolumn_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2fcolumn_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_greptime_2fv1_2fcolumn_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_greptime_2fv1_2fcolumn_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_greptime_2fv1_2fcolumn_2eproto;
namespace greptime {
namespace v1 {
class Column;
struct ColumnDefaultTypeInternal;
extern ColumnDefaultTypeInternal _Column_default_instance_;
class ColumnDef;
struct ColumnDefDefaultTypeInternal;
extern ColumnDefDefaultTypeInternal _ColumnDef_default_instance_;
class Column_Values;
struct Column_ValuesDefaultTypeInternal;
extern Column_ValuesDefaultTypeInternal _Column_Values_default_instance_;
}  // namespace v1
}  // namespace greptime
PROTOBUF_NAMESPACE_OPEN
template<> ::greptime::v1::Column* Arena::CreateMaybeMessage<::greptime::v1::Column>(Arena*);
template<> ::greptime::v1::ColumnDef* Arena::CreateMaybeMessage<::greptime::v1::ColumnDef>(Arena*);
template<> ::greptime::v1::Column_Values* Arena::CreateMaybeMessage<::greptime::v1::Column_Values>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace greptime {
namespace v1 {

enum Column_SemanticType : int {
  Column_SemanticType_TAG = 0,
  Column_SemanticType_FIELD = 1,
  Column_SemanticType_TIMESTAMP = 2,
  Column_SemanticType_Column_SemanticType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Column_SemanticType_Column_SemanticType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Column_SemanticType_IsValid(int value);
constexpr Column_SemanticType Column_SemanticType_SemanticType_MIN = Column_SemanticType_TAG;
constexpr Column_SemanticType Column_SemanticType_SemanticType_MAX = Column_SemanticType_TIMESTAMP;
constexpr int Column_SemanticType_SemanticType_ARRAYSIZE = Column_SemanticType_SemanticType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Column_SemanticType_descriptor();
template<typename T>
inline const std::string& Column_SemanticType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Column_SemanticType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Column_SemanticType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Column_SemanticType_descriptor(), enum_t_value);
}
inline bool Column_SemanticType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Column_SemanticType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Column_SemanticType>(
    Column_SemanticType_descriptor(), name, value);
}
enum ColumnDataType : int {
  BOOLEAN = 0,
  INT8 = 1,
  INT16 = 2,
  INT32 = 3,
  INT64 = 4,
  UINT8 = 5,
  UINT16 = 6,
  UINT32 = 7,
  UINT64 = 8,
  FLOAT32 = 9,
  FLOAT64 = 10,
  BINARY = 11,
  STRING = 12,
  DATE = 13,
  DATETIME = 14,
  TIMESTAMP_SECOND = 15,
  TIMESTAMP_MILLISECOND = 16,
  TIMESTAMP_MICROSECOND = 17,
  TIMESTAMP_NANOSECOND = 18,
  TIME_SECOND = 19,
  TIME_MILLISECOND = 20,
  TIME_MICROSECOND = 21,
  TIME_NANOSECOND = 22,
  ColumnDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ColumnDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ColumnDataType_IsValid(int value);
constexpr ColumnDataType ColumnDataType_MIN = BOOLEAN;
constexpr ColumnDataType ColumnDataType_MAX = TIME_NANOSECOND;
constexpr int ColumnDataType_ARRAYSIZE = ColumnDataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ColumnDataType_descriptor();
template<typename T>
inline const std::string& ColumnDataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ColumnDataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ColumnDataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ColumnDataType_descriptor(), enum_t_value);
}
inline bool ColumnDataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ColumnDataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ColumnDataType>(
    ColumnDataType_descriptor(), name, value);
}
// ===================================================================

class Column_Values final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greptime.v1.Column.Values) */ {
 public:
  inline Column_Values() : Column_Values(nullptr) {}
  ~Column_Values() override;
  explicit PROTOBUF_CONSTEXPR Column_Values(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Column_Values(const Column_Values& from);
  Column_Values(Column_Values&& from) noexcept
    : Column_Values() {
    *this = ::std::move(from);
  }

  inline Column_Values& operator=(const Column_Values& from) {
    CopyFrom(from);
    return *this;
  }
  inline Column_Values& operator=(Column_Values&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Column_Values& default_instance() {
    return *internal_default_instance();
  }
  static inline const Column_Values* internal_default_instance() {
    return reinterpret_cast<const Column_Values*>(
               &_Column_Values_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Column_Values& a, Column_Values& b) {
    a.Swap(&b);
  }
  inline void Swap(Column_Values* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Column_Values* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Column_Values* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Column_Values>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Column_Values& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Column_Values& from) {
    Column_Values::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Column_Values* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greptime.v1.Column.Values";
  }
  protected:
  explicit Column_Values(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kI8ValuesFieldNumber = 1,
    kI16ValuesFieldNumber = 2,
    kI32ValuesFieldNumber = 3,
    kI64ValuesFieldNumber = 4,
    kU8ValuesFieldNumber = 5,
    kU16ValuesFieldNumber = 6,
    kU32ValuesFieldNumber = 7,
    kU64ValuesFieldNumber = 8,
    kF32ValuesFieldNumber = 9,
    kF64ValuesFieldNumber = 10,
    kBoolValuesFieldNumber = 11,
    kBinaryValuesFieldNumber = 12,
    kStringValuesFieldNumber = 13,
    kDateValuesFieldNumber = 14,
    kDatetimeValuesFieldNumber = 15,
    kTsSecondValuesFieldNumber = 16,
    kTsMillisecondValuesFieldNumber = 17,
    kTsMicrosecondValuesFieldNumber = 18,
    kTsNanosecondValuesFieldNumber = 19,
    kTimeSecondValuesFieldNumber = 20,
    kTimeMillisecondValuesFieldNumber = 21,
    kTimeMicrosecondValuesFieldNumber = 22,
    kTimeNanosecondValuesFieldNumber = 23,
  };
  // repeated int32 i8_values = 1;
  int i8_values_size() const;
  private:
  int _internal_i8_values_size() const;
  public:
  void clear_i8_values();
  private:
  int32_t _internal_i8_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_i8_values() const;
  void _internal_add_i8_values(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_i8_values();
  public:
  int32_t i8_values(int index) const;
  void set_i8_values(int index, int32_t value);
  void add_i8_values(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      i8_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_i8_values();

  // repeated int32 i16_values = 2;
  int i16_values_size() const;
  private:
  int _internal_i16_values_size() const;
  public:
  void clear_i16_values();
  private:
  int32_t _internal_i16_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_i16_values() const;
  void _internal_add_i16_values(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_i16_values();
  public:
  int32_t i16_values(int index) const;
  void set_i16_values(int index, int32_t value);
  void add_i16_values(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      i16_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_i16_values();

  // repeated int32 i32_values = 3;
  int i32_values_size() const;
  private:
  int _internal_i32_values_size() const;
  public:
  void clear_i32_values();
  private:
  int32_t _internal_i32_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_i32_values() const;
  void _internal_add_i32_values(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_i32_values();
  public:
  int32_t i32_values(int index) const;
  void set_i32_values(int index, int32_t value);
  void add_i32_values(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      i32_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_i32_values();

  // repeated int64 i64_values = 4;
  int i64_values_size() const;
  private:
  int _internal_i64_values_size() const;
  public:
  void clear_i64_values();
  private:
  int64_t _internal_i64_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_i64_values() const;
  void _internal_add_i64_values(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_i64_values();
  public:
  int64_t i64_values(int index) const;
  void set_i64_values(int index, int64_t value);
  void add_i64_values(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      i64_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_i64_values();

  // repeated uint32 u8_values = 5;
  int u8_values_size() const;
  private:
  int _internal_u8_values_size() const;
  public:
  void clear_u8_values();
  private:
  uint32_t _internal_u8_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_u8_values() const;
  void _internal_add_u8_values(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_u8_values();
  public:
  uint32_t u8_values(int index) const;
  void set_u8_values(int index, uint32_t value);
  void add_u8_values(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      u8_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_u8_values();

  // repeated uint32 u16_values = 6;
  int u16_values_size() const;
  private:
  int _internal_u16_values_size() const;
  public:
  void clear_u16_values();
  private:
  uint32_t _internal_u16_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_u16_values() const;
  void _internal_add_u16_values(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_u16_values();
  public:
  uint32_t u16_values(int index) const;
  void set_u16_values(int index, uint32_t value);
  void add_u16_values(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      u16_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_u16_values();

  // repeated uint32 u32_values = 7;
  int u32_values_size() const;
  private:
  int _internal_u32_values_size() const;
  public:
  void clear_u32_values();
  private:
  uint32_t _internal_u32_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_u32_values() const;
  void _internal_add_u32_values(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_u32_values();
  public:
  uint32_t u32_values(int index) const;
  void set_u32_values(int index, uint32_t value);
  void add_u32_values(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      u32_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_u32_values();

  // repeated uint64 u64_values = 8;
  int u64_values_size() const;
  private:
  int _internal_u64_values_size() const;
  public:
  void clear_u64_values();
  private:
  uint64_t _internal_u64_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_u64_values() const;
  void _internal_add_u64_values(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_u64_values();
  public:
  uint64_t u64_values(int index) const;
  void set_u64_values(int index, uint64_t value);
  void add_u64_values(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      u64_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_u64_values();

  // repeated float f32_values = 9;
  int f32_values_size() const;
  private:
  int _internal_f32_values_size() const;
  public:
  void clear_f32_values();
  private:
  float _internal_f32_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_f32_values() const;
  void _internal_add_f32_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_f32_values();
  public:
  float f32_values(int index) const;
  void set_f32_values(int index, float value);
  void add_f32_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      f32_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_f32_values();

  // repeated double f64_values = 10;
  int f64_values_size() const;
  private:
  int _internal_f64_values_size() const;
  public:
  void clear_f64_values();
  private:
  double _internal_f64_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_f64_values() const;
  void _internal_add_f64_values(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_f64_values();
  public:
  double f64_values(int index) const;
  void set_f64_values(int index, double value);
  void add_f64_values(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      f64_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_f64_values();

  // repeated bool bool_values = 11;
  int bool_values_size() const;
  private:
  int _internal_bool_values_size() const;
  public:
  void clear_bool_values();
  private:
  bool _internal_bool_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_bool_values() const;
  void _internal_add_bool_values(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_bool_values();
  public:
  bool bool_values(int index) const;
  void set_bool_values(int index, bool value);
  void add_bool_values(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      bool_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_bool_values();

  // repeated bytes binary_values = 12;
  int binary_values_size() const;
  private:
  int _internal_binary_values_size() const;
  public:
  void clear_binary_values();
  const std::string& binary_values(int index) const;
  std::string* mutable_binary_values(int index);
  void set_binary_values(int index, const std::string& value);
  void set_binary_values(int index, std::string&& value);
  void set_binary_values(int index, const char* value);
  void set_binary_values(int index, const void* value, size_t size);
  std::string* add_binary_values();
  void add_binary_values(const std::string& value);
  void add_binary_values(std::string&& value);
  void add_binary_values(const char* value);
  void add_binary_values(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& binary_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_binary_values();
  private:
  const std::string& _internal_binary_values(int index) const;
  std::string* _internal_add_binary_values();
  public:

  // repeated string string_values = 13;
  int string_values_size() const;
  private:
  int _internal_string_values_size() const;
  public:
  void clear_string_values();
  const std::string& string_values(int index) const;
  std::string* mutable_string_values(int index);
  void set_string_values(int index, const std::string& value);
  void set_string_values(int index, std::string&& value);
  void set_string_values(int index, const char* value);
  void set_string_values(int index, const char* value, size_t size);
  std::string* add_string_values();
  void add_string_values(const std::string& value);
  void add_string_values(std::string&& value);
  void add_string_values(const char* value);
  void add_string_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& string_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_string_values();
  private:
  const std::string& _internal_string_values(int index) const;
  std::string* _internal_add_string_values();
  public:

  // repeated int32 date_values = 14;
  int date_values_size() const;
  private:
  int _internal_date_values_size() const;
  public:
  void clear_date_values();
  private:
  int32_t _internal_date_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_date_values() const;
  void _internal_add_date_values(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_date_values();
  public:
  int32_t date_values(int index) const;
  void set_date_values(int index, int32_t value);
  void add_date_values(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      date_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_date_values();

  // repeated int64 datetime_values = 15;
  int datetime_values_size() const;
  private:
  int _internal_datetime_values_size() const;
  public:
  void clear_datetime_values();
  private:
  int64_t _internal_datetime_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_datetime_values() const;
  void _internal_add_datetime_values(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_datetime_values();
  public:
  int64_t datetime_values(int index) const;
  void set_datetime_values(int index, int64_t value);
  void add_datetime_values(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      datetime_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_datetime_values();

  // repeated int64 ts_second_values = 16;
  int ts_second_values_size() const;
  private:
  int _internal_ts_second_values_size() const;
  public:
  void clear_ts_second_values();
  private:
  int64_t _internal_ts_second_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_ts_second_values() const;
  void _internal_add_ts_second_values(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_ts_second_values();
  public:
  int64_t ts_second_values(int index) const;
  void set_ts_second_values(int index, int64_t value);
  void add_ts_second_values(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      ts_second_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_ts_second_values();

  // repeated int64 ts_millisecond_values = 17;
  int ts_millisecond_values_size() const;
  private:
  int _internal_ts_millisecond_values_size() const;
  public:
  void clear_ts_millisecond_values();
  private:
  int64_t _internal_ts_millisecond_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_ts_millisecond_values() const;
  void _internal_add_ts_millisecond_values(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_ts_millisecond_values();
  public:
  int64_t ts_millisecond_values(int index) const;
  void set_ts_millisecond_values(int index, int64_t value);
  void add_ts_millisecond_values(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      ts_millisecond_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_ts_millisecond_values();

  // repeated int64 ts_microsecond_values = 18;
  int ts_microsecond_values_size() const;
  private:
  int _internal_ts_microsecond_values_size() const;
  public:
  void clear_ts_microsecond_values();
  private:
  int64_t _internal_ts_microsecond_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_ts_microsecond_values() const;
  void _internal_add_ts_microsecond_values(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_ts_microsecond_values();
  public:
  int64_t ts_microsecond_values(int index) const;
  void set_ts_microsecond_values(int index, int64_t value);
  void add_ts_microsecond_values(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      ts_microsecond_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_ts_microsecond_values();

  // repeated int64 ts_nanosecond_values = 19;
  int ts_nanosecond_values_size() const;
  private:
  int _internal_ts_nanosecond_values_size() const;
  public:
  void clear_ts_nanosecond_values();
  private:
  int64_t _internal_ts_nanosecond_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_ts_nanosecond_values() const;
  void _internal_add_ts_nanosecond_values(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_ts_nanosecond_values();
  public:
  int64_t ts_nanosecond_values(int index) const;
  void set_ts_nanosecond_values(int index, int64_t value);
  void add_ts_nanosecond_values(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      ts_nanosecond_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_ts_nanosecond_values();

  // repeated int64 time_second_values = 20;
  int time_second_values_size() const;
  private:
  int _internal_time_second_values_size() const;
  public:
  void clear_time_second_values();
  private:
  int64_t _internal_time_second_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_time_second_values() const;
  void _internal_add_time_second_values(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_time_second_values();
  public:
  int64_t time_second_values(int index) const;
  void set_time_second_values(int index, int64_t value);
  void add_time_second_values(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      time_second_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_time_second_values();

  // repeated int64 time_millisecond_values = 21;
  int time_millisecond_values_size() const;
  private:
  int _internal_time_millisecond_values_size() const;
  public:
  void clear_time_millisecond_values();
  private:
  int64_t _internal_time_millisecond_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_time_millisecond_values() const;
  void _internal_add_time_millisecond_values(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_time_millisecond_values();
  public:
  int64_t time_millisecond_values(int index) const;
  void set_time_millisecond_values(int index, int64_t value);
  void add_time_millisecond_values(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      time_millisecond_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_time_millisecond_values();

  // repeated int64 time_microsecond_values = 22;
  int time_microsecond_values_size() const;
  private:
  int _internal_time_microsecond_values_size() const;
  public:
  void clear_time_microsecond_values();
  private:
  int64_t _internal_time_microsecond_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_time_microsecond_values() const;
  void _internal_add_time_microsecond_values(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_time_microsecond_values();
  public:
  int64_t time_microsecond_values(int index) const;
  void set_time_microsecond_values(int index, int64_t value);
  void add_time_microsecond_values(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      time_microsecond_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_time_microsecond_values();

  // repeated int64 time_nanosecond_values = 23;
  int time_nanosecond_values_size() const;
  private:
  int _internal_time_nanosecond_values_size() const;
  public:
  void clear_time_nanosecond_values();
  private:
  int64_t _internal_time_nanosecond_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_time_nanosecond_values() const;
  void _internal_add_time_nanosecond_values(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_time_nanosecond_values();
  public:
  int64_t time_nanosecond_values(int index) const;
  void set_time_nanosecond_values(int index, int64_t value);
  void add_time_nanosecond_values(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      time_nanosecond_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_time_nanosecond_values();

  // @@protoc_insertion_point(class_scope:greptime.v1.Column.Values)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > i8_values_;
    mutable std::atomic<int> _i8_values_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > i16_values_;
    mutable std::atomic<int> _i16_values_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > i32_values_;
    mutable std::atomic<int> _i32_values_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > i64_values_;
    mutable std::atomic<int> _i64_values_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > u8_values_;
    mutable std::atomic<int> _u8_values_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > u16_values_;
    mutable std::atomic<int> _u16_values_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > u32_values_;
    mutable std::atomic<int> _u32_values_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > u64_values_;
    mutable std::atomic<int> _u64_values_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > f32_values_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > f64_values_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > bool_values_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> binary_values_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> string_values_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > date_values_;
    mutable std::atomic<int> _date_values_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > datetime_values_;
    mutable std::atomic<int> _datetime_values_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > ts_second_values_;
    mutable std::atomic<int> _ts_second_values_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > ts_millisecond_values_;
    mutable std::atomic<int> _ts_millisecond_values_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > ts_microsecond_values_;
    mutable std::atomic<int> _ts_microsecond_values_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > ts_nanosecond_values_;
    mutable std::atomic<int> _ts_nanosecond_values_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > time_second_values_;
    mutable std::atomic<int> _time_second_values_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > time_millisecond_values_;
    mutable std::atomic<int> _time_millisecond_values_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > time_microsecond_values_;
    mutable std::atomic<int> _time_microsecond_values_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > time_nanosecond_values_;
    mutable std::atomic<int> _time_nanosecond_values_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greptime_2fv1_2fcolumn_2eproto;
};
// -------------------------------------------------------------------

class Column final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greptime.v1.Column) */ {
 public:
  inline Column() : Column(nullptr) {}
  ~Column() override;
  explicit PROTOBUF_CONSTEXPR Column(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Column(const Column& from);
  Column(Column&& from) noexcept
    : Column() {
    *this = ::std::move(from);
  }

  inline Column& operator=(const Column& from) {
    CopyFrom(from);
    return *this;
  }
  inline Column& operator=(Column&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Column& default_instance() {
    return *internal_default_instance();
  }
  static inline const Column* internal_default_instance() {
    return reinterpret_cast<const Column*>(
               &_Column_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Column& a, Column& b) {
    a.Swap(&b);
  }
  inline void Swap(Column* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Column* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Column* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Column>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Column& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Column& from) {
    Column::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Column* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greptime.v1.Column";
  }
  protected:
  explicit Column(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Column_Values Values;

  typedef Column_SemanticType SemanticType;
  static constexpr SemanticType TAG =
    Column_SemanticType_TAG;
  static constexpr SemanticType FIELD =
    Column_SemanticType_FIELD;
  static constexpr SemanticType TIMESTAMP =
    Column_SemanticType_TIMESTAMP;
  static inline bool SemanticType_IsValid(int value) {
    return Column_SemanticType_IsValid(value);
  }
  static constexpr SemanticType SemanticType_MIN =
    Column_SemanticType_SemanticType_MIN;
  static constexpr SemanticType SemanticType_MAX =
    Column_SemanticType_SemanticType_MAX;
  static constexpr int SemanticType_ARRAYSIZE =
    Column_SemanticType_SemanticType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SemanticType_descriptor() {
    return Column_SemanticType_descriptor();
  }
  template<typename T>
  static inline const std::string& SemanticType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SemanticType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SemanticType_Name.");
    return Column_SemanticType_Name(enum_t_value);
  }
  static inline bool SemanticType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SemanticType* value) {
    return Column_SemanticType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kColumnNameFieldNumber = 1,
    kNullMaskFieldNumber = 4,
    kValuesFieldNumber = 3,
    kSemanticTypeFieldNumber = 2,
    kDatatypeFieldNumber = 5,
  };
  // string column_name = 1;
  void clear_column_name();
  const std::string& column_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_column_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_column_name();
  PROTOBUF_NODISCARD std::string* release_column_name();
  void set_allocated_column_name(std::string* column_name);
  private:
  const std::string& _internal_column_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_column_name(const std::string& value);
  std::string* _internal_mutable_column_name();
  public:

  // bytes null_mask = 4;
  void clear_null_mask();
  const std::string& null_mask() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_null_mask(ArgT0&& arg0, ArgT... args);
  std::string* mutable_null_mask();
  PROTOBUF_NODISCARD std::string* release_null_mask();
  void set_allocated_null_mask(std::string* null_mask);
  private:
  const std::string& _internal_null_mask() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_null_mask(const std::string& value);
  std::string* _internal_mutable_null_mask();
  public:

  // .greptime.v1.Column.Values values = 3;
  bool has_values() const;
  private:
  bool _internal_has_values() const;
  public:
  void clear_values();
  const ::greptime::v1::Column_Values& values() const;
  PROTOBUF_NODISCARD ::greptime::v1::Column_Values* release_values();
  ::greptime::v1::Column_Values* mutable_values();
  void set_allocated_values(::greptime::v1::Column_Values* values);
  private:
  const ::greptime::v1::Column_Values& _internal_values() const;
  ::greptime::v1::Column_Values* _internal_mutable_values();
  public:
  void unsafe_arena_set_allocated_values(
      ::greptime::v1::Column_Values* values);
  ::greptime::v1::Column_Values* unsafe_arena_release_values();

  // .greptime.v1.Column.SemanticType semantic_type = 2;
  void clear_semantic_type();
  ::greptime::v1::Column_SemanticType semantic_type() const;
  void set_semantic_type(::greptime::v1::Column_SemanticType value);
  private:
  ::greptime::v1::Column_SemanticType _internal_semantic_type() const;
  void _internal_set_semantic_type(::greptime::v1::Column_SemanticType value);
  public:

  // .greptime.v1.ColumnDataType datatype = 5;
  void clear_datatype();
  ::greptime::v1::ColumnDataType datatype() const;
  void set_datatype(::greptime::v1::ColumnDataType value);
  private:
  ::greptime::v1::ColumnDataType _internal_datatype() const;
  void _internal_set_datatype(::greptime::v1::ColumnDataType value);
  public:

  // @@protoc_insertion_point(class_scope:greptime.v1.Column)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr column_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr null_mask_;
    ::greptime::v1::Column_Values* values_;
    int semantic_type_;
    int datatype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greptime_2fv1_2fcolumn_2eproto;
};
// -------------------------------------------------------------------

class ColumnDef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greptime.v1.ColumnDef) */ {
 public:
  inline ColumnDef() : ColumnDef(nullptr) {}
  ~ColumnDef() override;
  explicit PROTOBUF_CONSTEXPR ColumnDef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColumnDef(const ColumnDef& from);
  ColumnDef(ColumnDef&& from) noexcept
    : ColumnDef() {
    *this = ::std::move(from);
  }

  inline ColumnDef& operator=(const ColumnDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnDef& operator=(ColumnDef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColumnDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColumnDef* internal_default_instance() {
    return reinterpret_cast<const ColumnDef*>(
               &_ColumnDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ColumnDef& a, ColumnDef& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnDef* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColumnDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColumnDef>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColumnDef& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ColumnDef& from) {
    ColumnDef::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnDef* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greptime.v1.ColumnDef";
  }
  protected:
  explicit ColumnDef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDefaultConstraintFieldNumber = 4,
    kDatatypeFieldNumber = 2,
    kIsNullableFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes default_constraint = 4;
  void clear_default_constraint();
  const std::string& default_constraint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_default_constraint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_default_constraint();
  PROTOBUF_NODISCARD std::string* release_default_constraint();
  void set_allocated_default_constraint(std::string* default_constraint);
  private:
  const std::string& _internal_default_constraint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_constraint(const std::string& value);
  std::string* _internal_mutable_default_constraint();
  public:

  // .greptime.v1.ColumnDataType datatype = 2;
  void clear_datatype();
  ::greptime::v1::ColumnDataType datatype() const;
  void set_datatype(::greptime::v1::ColumnDataType value);
  private:
  ::greptime::v1::ColumnDataType _internal_datatype() const;
  void _internal_set_datatype(::greptime::v1::ColumnDataType value);
  public:

  // bool is_nullable = 3;
  void clear_is_nullable();
  bool is_nullable() const;
  void set_is_nullable(bool value);
  private:
  bool _internal_is_nullable() const;
  void _internal_set_is_nullable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:greptime.v1.ColumnDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_constraint_;
    int datatype_;
    bool is_nullable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greptime_2fv1_2fcolumn_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Column_Values

// repeated int32 i8_values = 1;
inline int Column_Values::_internal_i8_values_size() const {
  return _impl_.i8_values_.size();
}
inline int Column_Values::i8_values_size() const {
  return _internal_i8_values_size();
}
inline void Column_Values::clear_i8_values() {
  _impl_.i8_values_.Clear();
}
inline int32_t Column_Values::_internal_i8_values(int index) const {
  return _impl_.i8_values_.Get(index);
}
inline int32_t Column_Values::i8_values(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.Values.i8_values)
  return _internal_i8_values(index);
}
inline void Column_Values::set_i8_values(int index, int32_t value) {
  _impl_.i8_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:greptime.v1.Column.Values.i8_values)
}
inline void Column_Values::_internal_add_i8_values(int32_t value) {
  _impl_.i8_values_.Add(value);
}
inline void Column_Values::add_i8_values(int32_t value) {
  _internal_add_i8_values(value);
  // @@protoc_insertion_point(field_add:greptime.v1.Column.Values.i8_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Column_Values::_internal_i8_values() const {
  return _impl_.i8_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Column_Values::i8_values() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Column.Values.i8_values)
  return _internal_i8_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Column_Values::_internal_mutable_i8_values() {
  return &_impl_.i8_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Column_Values::mutable_i8_values() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Column.Values.i8_values)
  return _internal_mutable_i8_values();
}

// repeated int32 i16_values = 2;
inline int Column_Values::_internal_i16_values_size() const {
  return _impl_.i16_values_.size();
}
inline int Column_Values::i16_values_size() const {
  return _internal_i16_values_size();
}
inline void Column_Values::clear_i16_values() {
  _impl_.i16_values_.Clear();
}
inline int32_t Column_Values::_internal_i16_values(int index) const {
  return _impl_.i16_values_.Get(index);
}
inline int32_t Column_Values::i16_values(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.Values.i16_values)
  return _internal_i16_values(index);
}
inline void Column_Values::set_i16_values(int index, int32_t value) {
  _impl_.i16_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:greptime.v1.Column.Values.i16_values)
}
inline void Column_Values::_internal_add_i16_values(int32_t value) {
  _impl_.i16_values_.Add(value);
}
inline void Column_Values::add_i16_values(int32_t value) {
  _internal_add_i16_values(value);
  // @@protoc_insertion_point(field_add:greptime.v1.Column.Values.i16_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Column_Values::_internal_i16_values() const {
  return _impl_.i16_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Column_Values::i16_values() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Column.Values.i16_values)
  return _internal_i16_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Column_Values::_internal_mutable_i16_values() {
  return &_impl_.i16_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Column_Values::mutable_i16_values() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Column.Values.i16_values)
  return _internal_mutable_i16_values();
}

// repeated int32 i32_values = 3;
inline int Column_Values::_internal_i32_values_size() const {
  return _impl_.i32_values_.size();
}
inline int Column_Values::i32_values_size() const {
  return _internal_i32_values_size();
}
inline void Column_Values::clear_i32_values() {
  _impl_.i32_values_.Clear();
}
inline int32_t Column_Values::_internal_i32_values(int index) const {
  return _impl_.i32_values_.Get(index);
}
inline int32_t Column_Values::i32_values(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.Values.i32_values)
  return _internal_i32_values(index);
}
inline void Column_Values::set_i32_values(int index, int32_t value) {
  _impl_.i32_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:greptime.v1.Column.Values.i32_values)
}
inline void Column_Values::_internal_add_i32_values(int32_t value) {
  _impl_.i32_values_.Add(value);
}
inline void Column_Values::add_i32_values(int32_t value) {
  _internal_add_i32_values(value);
  // @@protoc_insertion_point(field_add:greptime.v1.Column.Values.i32_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Column_Values::_internal_i32_values() const {
  return _impl_.i32_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Column_Values::i32_values() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Column.Values.i32_values)
  return _internal_i32_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Column_Values::_internal_mutable_i32_values() {
  return &_impl_.i32_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Column_Values::mutable_i32_values() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Column.Values.i32_values)
  return _internal_mutable_i32_values();
}

// repeated int64 i64_values = 4;
inline int Column_Values::_internal_i64_values_size() const {
  return _impl_.i64_values_.size();
}
inline int Column_Values::i64_values_size() const {
  return _internal_i64_values_size();
}
inline void Column_Values::clear_i64_values() {
  _impl_.i64_values_.Clear();
}
inline int64_t Column_Values::_internal_i64_values(int index) const {
  return _impl_.i64_values_.Get(index);
}
inline int64_t Column_Values::i64_values(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.Values.i64_values)
  return _internal_i64_values(index);
}
inline void Column_Values::set_i64_values(int index, int64_t value) {
  _impl_.i64_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:greptime.v1.Column.Values.i64_values)
}
inline void Column_Values::_internal_add_i64_values(int64_t value) {
  _impl_.i64_values_.Add(value);
}
inline void Column_Values::add_i64_values(int64_t value) {
  _internal_add_i64_values(value);
  // @@protoc_insertion_point(field_add:greptime.v1.Column.Values.i64_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Column_Values::_internal_i64_values() const {
  return _impl_.i64_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Column_Values::i64_values() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Column.Values.i64_values)
  return _internal_i64_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Column_Values::_internal_mutable_i64_values() {
  return &_impl_.i64_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Column_Values::mutable_i64_values() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Column.Values.i64_values)
  return _internal_mutable_i64_values();
}

// repeated uint32 u8_values = 5;
inline int Column_Values::_internal_u8_values_size() const {
  return _impl_.u8_values_.size();
}
inline int Column_Values::u8_values_size() const {
  return _internal_u8_values_size();
}
inline void Column_Values::clear_u8_values() {
  _impl_.u8_values_.Clear();
}
inline uint32_t Column_Values::_internal_u8_values(int index) const {
  return _impl_.u8_values_.Get(index);
}
inline uint32_t Column_Values::u8_values(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.Values.u8_values)
  return _internal_u8_values(index);
}
inline void Column_Values::set_u8_values(int index, uint32_t value) {
  _impl_.u8_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:greptime.v1.Column.Values.u8_values)
}
inline void Column_Values::_internal_add_u8_values(uint32_t value) {
  _impl_.u8_values_.Add(value);
}
inline void Column_Values::add_u8_values(uint32_t value) {
  _internal_add_u8_values(value);
  // @@protoc_insertion_point(field_add:greptime.v1.Column.Values.u8_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Column_Values::_internal_u8_values() const {
  return _impl_.u8_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Column_Values::u8_values() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Column.Values.u8_values)
  return _internal_u8_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Column_Values::_internal_mutable_u8_values() {
  return &_impl_.u8_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Column_Values::mutable_u8_values() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Column.Values.u8_values)
  return _internal_mutable_u8_values();
}

// repeated uint32 u16_values = 6;
inline int Column_Values::_internal_u16_values_size() const {
  return _impl_.u16_values_.size();
}
inline int Column_Values::u16_values_size() const {
  return _internal_u16_values_size();
}
inline void Column_Values::clear_u16_values() {
  _impl_.u16_values_.Clear();
}
inline uint32_t Column_Values::_internal_u16_values(int index) const {
  return _impl_.u16_values_.Get(index);
}
inline uint32_t Column_Values::u16_values(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.Values.u16_values)
  return _internal_u16_values(index);
}
inline void Column_Values::set_u16_values(int index, uint32_t value) {
  _impl_.u16_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:greptime.v1.Column.Values.u16_values)
}
inline void Column_Values::_internal_add_u16_values(uint32_t value) {
  _impl_.u16_values_.Add(value);
}
inline void Column_Values::add_u16_values(uint32_t value) {
  _internal_add_u16_values(value);
  // @@protoc_insertion_point(field_add:greptime.v1.Column.Values.u16_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Column_Values::_internal_u16_values() const {
  return _impl_.u16_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Column_Values::u16_values() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Column.Values.u16_values)
  return _internal_u16_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Column_Values::_internal_mutable_u16_values() {
  return &_impl_.u16_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Column_Values::mutable_u16_values() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Column.Values.u16_values)
  return _internal_mutable_u16_values();
}

// repeated uint32 u32_values = 7;
inline int Column_Values::_internal_u32_values_size() const {
  return _impl_.u32_values_.size();
}
inline int Column_Values::u32_values_size() const {
  return _internal_u32_values_size();
}
inline void Column_Values::clear_u32_values() {
  _impl_.u32_values_.Clear();
}
inline uint32_t Column_Values::_internal_u32_values(int index) const {
  return _impl_.u32_values_.Get(index);
}
inline uint32_t Column_Values::u32_values(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.Values.u32_values)
  return _internal_u32_values(index);
}
inline void Column_Values::set_u32_values(int index, uint32_t value) {
  _impl_.u32_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:greptime.v1.Column.Values.u32_values)
}
inline void Column_Values::_internal_add_u32_values(uint32_t value) {
  _impl_.u32_values_.Add(value);
}
inline void Column_Values::add_u32_values(uint32_t value) {
  _internal_add_u32_values(value);
  // @@protoc_insertion_point(field_add:greptime.v1.Column.Values.u32_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Column_Values::_internal_u32_values() const {
  return _impl_.u32_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Column_Values::u32_values() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Column.Values.u32_values)
  return _internal_u32_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Column_Values::_internal_mutable_u32_values() {
  return &_impl_.u32_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Column_Values::mutable_u32_values() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Column.Values.u32_values)
  return _internal_mutable_u32_values();
}

// repeated uint64 u64_values = 8;
inline int Column_Values::_internal_u64_values_size() const {
  return _impl_.u64_values_.size();
}
inline int Column_Values::u64_values_size() const {
  return _internal_u64_values_size();
}
inline void Column_Values::clear_u64_values() {
  _impl_.u64_values_.Clear();
}
inline uint64_t Column_Values::_internal_u64_values(int index) const {
  return _impl_.u64_values_.Get(index);
}
inline uint64_t Column_Values::u64_values(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.Values.u64_values)
  return _internal_u64_values(index);
}
inline void Column_Values::set_u64_values(int index, uint64_t value) {
  _impl_.u64_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:greptime.v1.Column.Values.u64_values)
}
inline void Column_Values::_internal_add_u64_values(uint64_t value) {
  _impl_.u64_values_.Add(value);
}
inline void Column_Values::add_u64_values(uint64_t value) {
  _internal_add_u64_values(value);
  // @@protoc_insertion_point(field_add:greptime.v1.Column.Values.u64_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Column_Values::_internal_u64_values() const {
  return _impl_.u64_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Column_Values::u64_values() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Column.Values.u64_values)
  return _internal_u64_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Column_Values::_internal_mutable_u64_values() {
  return &_impl_.u64_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Column_Values::mutable_u64_values() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Column.Values.u64_values)
  return _internal_mutable_u64_values();
}

// repeated float f32_values = 9;
inline int Column_Values::_internal_f32_values_size() const {
  return _impl_.f32_values_.size();
}
inline int Column_Values::f32_values_size() const {
  return _internal_f32_values_size();
}
inline void Column_Values::clear_f32_values() {
  _impl_.f32_values_.Clear();
}
inline float Column_Values::_internal_f32_values(int index) const {
  return _impl_.f32_values_.Get(index);
}
inline float Column_Values::f32_values(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.Values.f32_values)
  return _internal_f32_values(index);
}
inline void Column_Values::set_f32_values(int index, float value) {
  _impl_.f32_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:greptime.v1.Column.Values.f32_values)
}
inline void Column_Values::_internal_add_f32_values(float value) {
  _impl_.f32_values_.Add(value);
}
inline void Column_Values::add_f32_values(float value) {
  _internal_add_f32_values(value);
  // @@protoc_insertion_point(field_add:greptime.v1.Column.Values.f32_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Column_Values::_internal_f32_values() const {
  return _impl_.f32_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Column_Values::f32_values() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Column.Values.f32_values)
  return _internal_f32_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Column_Values::_internal_mutable_f32_values() {
  return &_impl_.f32_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Column_Values::mutable_f32_values() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Column.Values.f32_values)
  return _internal_mutable_f32_values();
}

// repeated double f64_values = 10;
inline int Column_Values::_internal_f64_values_size() const {
  return _impl_.f64_values_.size();
}
inline int Column_Values::f64_values_size() const {
  return _internal_f64_values_size();
}
inline void Column_Values::clear_f64_values() {
  _impl_.f64_values_.Clear();
}
inline double Column_Values::_internal_f64_values(int index) const {
  return _impl_.f64_values_.Get(index);
}
inline double Column_Values::f64_values(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.Values.f64_values)
  return _internal_f64_values(index);
}
inline void Column_Values::set_f64_values(int index, double value) {
  _impl_.f64_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:greptime.v1.Column.Values.f64_values)
}
inline void Column_Values::_internal_add_f64_values(double value) {
  _impl_.f64_values_.Add(value);
}
inline void Column_Values::add_f64_values(double value) {
  _internal_add_f64_values(value);
  // @@protoc_insertion_point(field_add:greptime.v1.Column.Values.f64_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Column_Values::_internal_f64_values() const {
  return _impl_.f64_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Column_Values::f64_values() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Column.Values.f64_values)
  return _internal_f64_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Column_Values::_internal_mutable_f64_values() {
  return &_impl_.f64_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Column_Values::mutable_f64_values() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Column.Values.f64_values)
  return _internal_mutable_f64_values();
}

// repeated bool bool_values = 11;
inline int Column_Values::_internal_bool_values_size() const {
  return _impl_.bool_values_.size();
}
inline int Column_Values::bool_values_size() const {
  return _internal_bool_values_size();
}
inline void Column_Values::clear_bool_values() {
  _impl_.bool_values_.Clear();
}
inline bool Column_Values::_internal_bool_values(int index) const {
  return _impl_.bool_values_.Get(index);
}
inline bool Column_Values::bool_values(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.Values.bool_values)
  return _internal_bool_values(index);
}
inline void Column_Values::set_bool_values(int index, bool value) {
  _impl_.bool_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:greptime.v1.Column.Values.bool_values)
}
inline void Column_Values::_internal_add_bool_values(bool value) {
  _impl_.bool_values_.Add(value);
}
inline void Column_Values::add_bool_values(bool value) {
  _internal_add_bool_values(value);
  // @@protoc_insertion_point(field_add:greptime.v1.Column.Values.bool_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Column_Values::_internal_bool_values() const {
  return _impl_.bool_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Column_Values::bool_values() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Column.Values.bool_values)
  return _internal_bool_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Column_Values::_internal_mutable_bool_values() {
  return &_impl_.bool_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Column_Values::mutable_bool_values() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Column.Values.bool_values)
  return _internal_mutable_bool_values();
}

// repeated bytes binary_values = 12;
inline int Column_Values::_internal_binary_values_size() const {
  return _impl_.binary_values_.size();
}
inline int Column_Values::binary_values_size() const {
  return _internal_binary_values_size();
}
inline void Column_Values::clear_binary_values() {
  _impl_.binary_values_.Clear();
}
inline std::string* Column_Values::add_binary_values() {
  std::string* _s = _internal_add_binary_values();
  // @@protoc_insertion_point(field_add_mutable:greptime.v1.Column.Values.binary_values)
  return _s;
}
inline const std::string& Column_Values::_internal_binary_values(int index) const {
  return _impl_.binary_values_.Get(index);
}
inline const std::string& Column_Values::binary_values(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.Values.binary_values)
  return _internal_binary_values(index);
}
inline std::string* Column_Values::mutable_binary_values(int index) {
  // @@protoc_insertion_point(field_mutable:greptime.v1.Column.Values.binary_values)
  return _impl_.binary_values_.Mutable(index);
}
inline void Column_Values::set_binary_values(int index, const std::string& value) {
  _impl_.binary_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:greptime.v1.Column.Values.binary_values)
}
inline void Column_Values::set_binary_values(int index, std::string&& value) {
  _impl_.binary_values_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:greptime.v1.Column.Values.binary_values)
}
inline void Column_Values::set_binary_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.binary_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:greptime.v1.Column.Values.binary_values)
}
inline void Column_Values::set_binary_values(int index, const void* value, size_t size) {
  _impl_.binary_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:greptime.v1.Column.Values.binary_values)
}
inline std::string* Column_Values::_internal_add_binary_values() {
  return _impl_.binary_values_.Add();
}
inline void Column_Values::add_binary_values(const std::string& value) {
  _impl_.binary_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:greptime.v1.Column.Values.binary_values)
}
inline void Column_Values::add_binary_values(std::string&& value) {
  _impl_.binary_values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:greptime.v1.Column.Values.binary_values)
}
inline void Column_Values::add_binary_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.binary_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:greptime.v1.Column.Values.binary_values)
}
inline void Column_Values::add_binary_values(const void* value, size_t size) {
  _impl_.binary_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:greptime.v1.Column.Values.binary_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Column_Values::binary_values() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Column.Values.binary_values)
  return _impl_.binary_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Column_Values::mutable_binary_values() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Column.Values.binary_values)
  return &_impl_.binary_values_;
}

// repeated string string_values = 13;
inline int Column_Values::_internal_string_values_size() const {
  return _impl_.string_values_.size();
}
inline int Column_Values::string_values_size() const {
  return _internal_string_values_size();
}
inline void Column_Values::clear_string_values() {
  _impl_.string_values_.Clear();
}
inline std::string* Column_Values::add_string_values() {
  std::string* _s = _internal_add_string_values();
  // @@protoc_insertion_point(field_add_mutable:greptime.v1.Column.Values.string_values)
  return _s;
}
inline const std::string& Column_Values::_internal_string_values(int index) const {
  return _impl_.string_values_.Get(index);
}
inline const std::string& Column_Values::string_values(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.Values.string_values)
  return _internal_string_values(index);
}
inline std::string* Column_Values::mutable_string_values(int index) {
  // @@protoc_insertion_point(field_mutable:greptime.v1.Column.Values.string_values)
  return _impl_.string_values_.Mutable(index);
}
inline void Column_Values::set_string_values(int index, const std::string& value) {
  _impl_.string_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:greptime.v1.Column.Values.string_values)
}
inline void Column_Values::set_string_values(int index, std::string&& value) {
  _impl_.string_values_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:greptime.v1.Column.Values.string_values)
}
inline void Column_Values::set_string_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.string_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:greptime.v1.Column.Values.string_values)
}
inline void Column_Values::set_string_values(int index, const char* value, size_t size) {
  _impl_.string_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:greptime.v1.Column.Values.string_values)
}
inline std::string* Column_Values::_internal_add_string_values() {
  return _impl_.string_values_.Add();
}
inline void Column_Values::add_string_values(const std::string& value) {
  _impl_.string_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:greptime.v1.Column.Values.string_values)
}
inline void Column_Values::add_string_values(std::string&& value) {
  _impl_.string_values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:greptime.v1.Column.Values.string_values)
}
inline void Column_Values::add_string_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.string_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:greptime.v1.Column.Values.string_values)
}
inline void Column_Values::add_string_values(const char* value, size_t size) {
  _impl_.string_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:greptime.v1.Column.Values.string_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Column_Values::string_values() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Column.Values.string_values)
  return _impl_.string_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Column_Values::mutable_string_values() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Column.Values.string_values)
  return &_impl_.string_values_;
}

// repeated int32 date_values = 14;
inline int Column_Values::_internal_date_values_size() const {
  return _impl_.date_values_.size();
}
inline int Column_Values::date_values_size() const {
  return _internal_date_values_size();
}
inline void Column_Values::clear_date_values() {
  _impl_.date_values_.Clear();
}
inline int32_t Column_Values::_internal_date_values(int index) const {
  return _impl_.date_values_.Get(index);
}
inline int32_t Column_Values::date_values(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.Values.date_values)
  return _internal_date_values(index);
}
inline void Column_Values::set_date_values(int index, int32_t value) {
  _impl_.date_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:greptime.v1.Column.Values.date_values)
}
inline void Column_Values::_internal_add_date_values(int32_t value) {
  _impl_.date_values_.Add(value);
}
inline void Column_Values::add_date_values(int32_t value) {
  _internal_add_date_values(value);
  // @@protoc_insertion_point(field_add:greptime.v1.Column.Values.date_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Column_Values::_internal_date_values() const {
  return _impl_.date_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Column_Values::date_values() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Column.Values.date_values)
  return _internal_date_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Column_Values::_internal_mutable_date_values() {
  return &_impl_.date_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Column_Values::mutable_date_values() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Column.Values.date_values)
  return _internal_mutable_date_values();
}

// repeated int64 datetime_values = 15;
inline int Column_Values::_internal_datetime_values_size() const {
  return _impl_.datetime_values_.size();
}
inline int Column_Values::datetime_values_size() const {
  return _internal_datetime_values_size();
}
inline void Column_Values::clear_datetime_values() {
  _impl_.datetime_values_.Clear();
}
inline int64_t Column_Values::_internal_datetime_values(int index) const {
  return _impl_.datetime_values_.Get(index);
}
inline int64_t Column_Values::datetime_values(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.Values.datetime_values)
  return _internal_datetime_values(index);
}
inline void Column_Values::set_datetime_values(int index, int64_t value) {
  _impl_.datetime_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:greptime.v1.Column.Values.datetime_values)
}
inline void Column_Values::_internal_add_datetime_values(int64_t value) {
  _impl_.datetime_values_.Add(value);
}
inline void Column_Values::add_datetime_values(int64_t value) {
  _internal_add_datetime_values(value);
  // @@protoc_insertion_point(field_add:greptime.v1.Column.Values.datetime_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Column_Values::_internal_datetime_values() const {
  return _impl_.datetime_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Column_Values::datetime_values() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Column.Values.datetime_values)
  return _internal_datetime_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Column_Values::_internal_mutable_datetime_values() {
  return &_impl_.datetime_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Column_Values::mutable_datetime_values() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Column.Values.datetime_values)
  return _internal_mutable_datetime_values();
}

// repeated int64 ts_second_values = 16;
inline int Column_Values::_internal_ts_second_values_size() const {
  return _impl_.ts_second_values_.size();
}
inline int Column_Values::ts_second_values_size() const {
  return _internal_ts_second_values_size();
}
inline void Column_Values::clear_ts_second_values() {
  _impl_.ts_second_values_.Clear();
}
inline int64_t Column_Values::_internal_ts_second_values(int index) const {
  return _impl_.ts_second_values_.Get(index);
}
inline int64_t Column_Values::ts_second_values(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.Values.ts_second_values)
  return _internal_ts_second_values(index);
}
inline void Column_Values::set_ts_second_values(int index, int64_t value) {
  _impl_.ts_second_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:greptime.v1.Column.Values.ts_second_values)
}
inline void Column_Values::_internal_add_ts_second_values(int64_t value) {
  _impl_.ts_second_values_.Add(value);
}
inline void Column_Values::add_ts_second_values(int64_t value) {
  _internal_add_ts_second_values(value);
  // @@protoc_insertion_point(field_add:greptime.v1.Column.Values.ts_second_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Column_Values::_internal_ts_second_values() const {
  return _impl_.ts_second_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Column_Values::ts_second_values() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Column.Values.ts_second_values)
  return _internal_ts_second_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Column_Values::_internal_mutable_ts_second_values() {
  return &_impl_.ts_second_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Column_Values::mutable_ts_second_values() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Column.Values.ts_second_values)
  return _internal_mutable_ts_second_values();
}

// repeated int64 ts_millisecond_values = 17;
inline int Column_Values::_internal_ts_millisecond_values_size() const {
  return _impl_.ts_millisecond_values_.size();
}
inline int Column_Values::ts_millisecond_values_size() const {
  return _internal_ts_millisecond_values_size();
}
inline void Column_Values::clear_ts_millisecond_values() {
  _impl_.ts_millisecond_values_.Clear();
}
inline int64_t Column_Values::_internal_ts_millisecond_values(int index) const {
  return _impl_.ts_millisecond_values_.Get(index);
}
inline int64_t Column_Values::ts_millisecond_values(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.Values.ts_millisecond_values)
  return _internal_ts_millisecond_values(index);
}
inline void Column_Values::set_ts_millisecond_values(int index, int64_t value) {
  _impl_.ts_millisecond_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:greptime.v1.Column.Values.ts_millisecond_values)
}
inline void Column_Values::_internal_add_ts_millisecond_values(int64_t value) {
  _impl_.ts_millisecond_values_.Add(value);
}
inline void Column_Values::add_ts_millisecond_values(int64_t value) {
  _internal_add_ts_millisecond_values(value);
  // @@protoc_insertion_point(field_add:greptime.v1.Column.Values.ts_millisecond_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Column_Values::_internal_ts_millisecond_values() const {
  return _impl_.ts_millisecond_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Column_Values::ts_millisecond_values() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Column.Values.ts_millisecond_values)
  return _internal_ts_millisecond_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Column_Values::_internal_mutable_ts_millisecond_values() {
  return &_impl_.ts_millisecond_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Column_Values::mutable_ts_millisecond_values() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Column.Values.ts_millisecond_values)
  return _internal_mutable_ts_millisecond_values();
}

// repeated int64 ts_microsecond_values = 18;
inline int Column_Values::_internal_ts_microsecond_values_size() const {
  return _impl_.ts_microsecond_values_.size();
}
inline int Column_Values::ts_microsecond_values_size() const {
  return _internal_ts_microsecond_values_size();
}
inline void Column_Values::clear_ts_microsecond_values() {
  _impl_.ts_microsecond_values_.Clear();
}
inline int64_t Column_Values::_internal_ts_microsecond_values(int index) const {
  return _impl_.ts_microsecond_values_.Get(index);
}
inline int64_t Column_Values::ts_microsecond_values(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.Values.ts_microsecond_values)
  return _internal_ts_microsecond_values(index);
}
inline void Column_Values::set_ts_microsecond_values(int index, int64_t value) {
  _impl_.ts_microsecond_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:greptime.v1.Column.Values.ts_microsecond_values)
}
inline void Column_Values::_internal_add_ts_microsecond_values(int64_t value) {
  _impl_.ts_microsecond_values_.Add(value);
}
inline void Column_Values::add_ts_microsecond_values(int64_t value) {
  _internal_add_ts_microsecond_values(value);
  // @@protoc_insertion_point(field_add:greptime.v1.Column.Values.ts_microsecond_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Column_Values::_internal_ts_microsecond_values() const {
  return _impl_.ts_microsecond_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Column_Values::ts_microsecond_values() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Column.Values.ts_microsecond_values)
  return _internal_ts_microsecond_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Column_Values::_internal_mutable_ts_microsecond_values() {
  return &_impl_.ts_microsecond_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Column_Values::mutable_ts_microsecond_values() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Column.Values.ts_microsecond_values)
  return _internal_mutable_ts_microsecond_values();
}

// repeated int64 ts_nanosecond_values = 19;
inline int Column_Values::_internal_ts_nanosecond_values_size() const {
  return _impl_.ts_nanosecond_values_.size();
}
inline int Column_Values::ts_nanosecond_values_size() const {
  return _internal_ts_nanosecond_values_size();
}
inline void Column_Values::clear_ts_nanosecond_values() {
  _impl_.ts_nanosecond_values_.Clear();
}
inline int64_t Column_Values::_internal_ts_nanosecond_values(int index) const {
  return _impl_.ts_nanosecond_values_.Get(index);
}
inline int64_t Column_Values::ts_nanosecond_values(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.Values.ts_nanosecond_values)
  return _internal_ts_nanosecond_values(index);
}
inline void Column_Values::set_ts_nanosecond_values(int index, int64_t value) {
  _impl_.ts_nanosecond_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:greptime.v1.Column.Values.ts_nanosecond_values)
}
inline void Column_Values::_internal_add_ts_nanosecond_values(int64_t value) {
  _impl_.ts_nanosecond_values_.Add(value);
}
inline void Column_Values::add_ts_nanosecond_values(int64_t value) {
  _internal_add_ts_nanosecond_values(value);
  // @@protoc_insertion_point(field_add:greptime.v1.Column.Values.ts_nanosecond_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Column_Values::_internal_ts_nanosecond_values() const {
  return _impl_.ts_nanosecond_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Column_Values::ts_nanosecond_values() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Column.Values.ts_nanosecond_values)
  return _internal_ts_nanosecond_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Column_Values::_internal_mutable_ts_nanosecond_values() {
  return &_impl_.ts_nanosecond_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Column_Values::mutable_ts_nanosecond_values() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Column.Values.ts_nanosecond_values)
  return _internal_mutable_ts_nanosecond_values();
}

// repeated int64 time_second_values = 20;
inline int Column_Values::_internal_time_second_values_size() const {
  return _impl_.time_second_values_.size();
}
inline int Column_Values::time_second_values_size() const {
  return _internal_time_second_values_size();
}
inline void Column_Values::clear_time_second_values() {
  _impl_.time_second_values_.Clear();
}
inline int64_t Column_Values::_internal_time_second_values(int index) const {
  return _impl_.time_second_values_.Get(index);
}
inline int64_t Column_Values::time_second_values(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.Values.time_second_values)
  return _internal_time_second_values(index);
}
inline void Column_Values::set_time_second_values(int index, int64_t value) {
  _impl_.time_second_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:greptime.v1.Column.Values.time_second_values)
}
inline void Column_Values::_internal_add_time_second_values(int64_t value) {
  _impl_.time_second_values_.Add(value);
}
inline void Column_Values::add_time_second_values(int64_t value) {
  _internal_add_time_second_values(value);
  // @@protoc_insertion_point(field_add:greptime.v1.Column.Values.time_second_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Column_Values::_internal_time_second_values() const {
  return _impl_.time_second_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Column_Values::time_second_values() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Column.Values.time_second_values)
  return _internal_time_second_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Column_Values::_internal_mutable_time_second_values() {
  return &_impl_.time_second_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Column_Values::mutable_time_second_values() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Column.Values.time_second_values)
  return _internal_mutable_time_second_values();
}

// repeated int64 time_millisecond_values = 21;
inline int Column_Values::_internal_time_millisecond_values_size() const {
  return _impl_.time_millisecond_values_.size();
}
inline int Column_Values::time_millisecond_values_size() const {
  return _internal_time_millisecond_values_size();
}
inline void Column_Values::clear_time_millisecond_values() {
  _impl_.time_millisecond_values_.Clear();
}
inline int64_t Column_Values::_internal_time_millisecond_values(int index) const {
  return _impl_.time_millisecond_values_.Get(index);
}
inline int64_t Column_Values::time_millisecond_values(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.Values.time_millisecond_values)
  return _internal_time_millisecond_values(index);
}
inline void Column_Values::set_time_millisecond_values(int index, int64_t value) {
  _impl_.time_millisecond_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:greptime.v1.Column.Values.time_millisecond_values)
}
inline void Column_Values::_internal_add_time_millisecond_values(int64_t value) {
  _impl_.time_millisecond_values_.Add(value);
}
inline void Column_Values::add_time_millisecond_values(int64_t value) {
  _internal_add_time_millisecond_values(value);
  // @@protoc_insertion_point(field_add:greptime.v1.Column.Values.time_millisecond_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Column_Values::_internal_time_millisecond_values() const {
  return _impl_.time_millisecond_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Column_Values::time_millisecond_values() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Column.Values.time_millisecond_values)
  return _internal_time_millisecond_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Column_Values::_internal_mutable_time_millisecond_values() {
  return &_impl_.time_millisecond_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Column_Values::mutable_time_millisecond_values() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Column.Values.time_millisecond_values)
  return _internal_mutable_time_millisecond_values();
}

// repeated int64 time_microsecond_values = 22;
inline int Column_Values::_internal_time_microsecond_values_size() const {
  return _impl_.time_microsecond_values_.size();
}
inline int Column_Values::time_microsecond_values_size() const {
  return _internal_time_microsecond_values_size();
}
inline void Column_Values::clear_time_microsecond_values() {
  _impl_.time_microsecond_values_.Clear();
}
inline int64_t Column_Values::_internal_time_microsecond_values(int index) const {
  return _impl_.time_microsecond_values_.Get(index);
}
inline int64_t Column_Values::time_microsecond_values(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.Values.time_microsecond_values)
  return _internal_time_microsecond_values(index);
}
inline void Column_Values::set_time_microsecond_values(int index, int64_t value) {
  _impl_.time_microsecond_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:greptime.v1.Column.Values.time_microsecond_values)
}
inline void Column_Values::_internal_add_time_microsecond_values(int64_t value) {
  _impl_.time_microsecond_values_.Add(value);
}
inline void Column_Values::add_time_microsecond_values(int64_t value) {
  _internal_add_time_microsecond_values(value);
  // @@protoc_insertion_point(field_add:greptime.v1.Column.Values.time_microsecond_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Column_Values::_internal_time_microsecond_values() const {
  return _impl_.time_microsecond_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Column_Values::time_microsecond_values() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Column.Values.time_microsecond_values)
  return _internal_time_microsecond_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Column_Values::_internal_mutable_time_microsecond_values() {
  return &_impl_.time_microsecond_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Column_Values::mutable_time_microsecond_values() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Column.Values.time_microsecond_values)
  return _internal_mutable_time_microsecond_values();
}

// repeated int64 time_nanosecond_values = 23;
inline int Column_Values::_internal_time_nanosecond_values_size() const {
  return _impl_.time_nanosecond_values_.size();
}
inline int Column_Values::time_nanosecond_values_size() const {
  return _internal_time_nanosecond_values_size();
}
inline void Column_Values::clear_time_nanosecond_values() {
  _impl_.time_nanosecond_values_.Clear();
}
inline int64_t Column_Values::_internal_time_nanosecond_values(int index) const {
  return _impl_.time_nanosecond_values_.Get(index);
}
inline int64_t Column_Values::time_nanosecond_values(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.Values.time_nanosecond_values)
  return _internal_time_nanosecond_values(index);
}
inline void Column_Values::set_time_nanosecond_values(int index, int64_t value) {
  _impl_.time_nanosecond_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:greptime.v1.Column.Values.time_nanosecond_values)
}
inline void Column_Values::_internal_add_time_nanosecond_values(int64_t value) {
  _impl_.time_nanosecond_values_.Add(value);
}
inline void Column_Values::add_time_nanosecond_values(int64_t value) {
  _internal_add_time_nanosecond_values(value);
  // @@protoc_insertion_point(field_add:greptime.v1.Column.Values.time_nanosecond_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Column_Values::_internal_time_nanosecond_values() const {
  return _impl_.time_nanosecond_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Column_Values::time_nanosecond_values() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Column.Values.time_nanosecond_values)
  return _internal_time_nanosecond_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Column_Values::_internal_mutable_time_nanosecond_values() {
  return &_impl_.time_nanosecond_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Column_Values::mutable_time_nanosecond_values() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Column.Values.time_nanosecond_values)
  return _internal_mutable_time_nanosecond_values();
}

// -------------------------------------------------------------------

// Column

// string column_name = 1;
inline void Column::clear_column_name() {
  _impl_.column_name_.ClearToEmpty();
}
inline const std::string& Column::column_name() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.column_name)
  return _internal_column_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Column::set_column_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.column_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.Column.column_name)
}
inline std::string* Column::mutable_column_name() {
  std::string* _s = _internal_mutable_column_name();
  // @@protoc_insertion_point(field_mutable:greptime.v1.Column.column_name)
  return _s;
}
inline const std::string& Column::_internal_column_name() const {
  return _impl_.column_name_.Get();
}
inline void Column::_internal_set_column_name(const std::string& value) {
  
  _impl_.column_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Column::_internal_mutable_column_name() {
  
  return _impl_.column_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Column::release_column_name() {
  // @@protoc_insertion_point(field_release:greptime.v1.Column.column_name)
  return _impl_.column_name_.Release();
}
inline void Column::set_allocated_column_name(std::string* column_name) {
  if (column_name != nullptr) {
    
  } else {
    
  }
  _impl_.column_name_.SetAllocated(column_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.column_name_.IsDefault()) {
    _impl_.column_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.Column.column_name)
}

// .greptime.v1.Column.SemanticType semantic_type = 2;
inline void Column::clear_semantic_type() {
  _impl_.semantic_type_ = 0;
}
inline ::greptime::v1::Column_SemanticType Column::_internal_semantic_type() const {
  return static_cast< ::greptime::v1::Column_SemanticType >(_impl_.semantic_type_);
}
inline ::greptime::v1::Column_SemanticType Column::semantic_type() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.semantic_type)
  return _internal_semantic_type();
}
inline void Column::_internal_set_semantic_type(::greptime::v1::Column_SemanticType value) {
  
  _impl_.semantic_type_ = value;
}
inline void Column::set_semantic_type(::greptime::v1::Column_SemanticType value) {
  _internal_set_semantic_type(value);
  // @@protoc_insertion_point(field_set:greptime.v1.Column.semantic_type)
}

// .greptime.v1.Column.Values values = 3;
inline bool Column::_internal_has_values() const {
  return this != internal_default_instance() && _impl_.values_ != nullptr;
}
inline bool Column::has_values() const {
  return _internal_has_values();
}
inline void Column::clear_values() {
  if (GetArenaForAllocation() == nullptr && _impl_.values_ != nullptr) {
    delete _impl_.values_;
  }
  _impl_.values_ = nullptr;
}
inline const ::greptime::v1::Column_Values& Column::_internal_values() const {
  const ::greptime::v1::Column_Values* p = _impl_.values_;
  return p != nullptr ? *p : reinterpret_cast<const ::greptime::v1::Column_Values&>(
      ::greptime::v1::_Column_Values_default_instance_);
}
inline const ::greptime::v1::Column_Values& Column::values() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.values)
  return _internal_values();
}
inline void Column::unsafe_arena_set_allocated_values(
    ::greptime::v1::Column_Values* values) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.values_);
  }
  _impl_.values_ = values;
  if (values) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:greptime.v1.Column.values)
}
inline ::greptime::v1::Column_Values* Column::release_values() {
  
  ::greptime::v1::Column_Values* temp = _impl_.values_;
  _impl_.values_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::greptime::v1::Column_Values* Column::unsafe_arena_release_values() {
  // @@protoc_insertion_point(field_release:greptime.v1.Column.values)
  
  ::greptime::v1::Column_Values* temp = _impl_.values_;
  _impl_.values_ = nullptr;
  return temp;
}
inline ::greptime::v1::Column_Values* Column::_internal_mutable_values() {
  
  if (_impl_.values_ == nullptr) {
    auto* p = CreateMaybeMessage<::greptime::v1::Column_Values>(GetArenaForAllocation());
    _impl_.values_ = p;
  }
  return _impl_.values_;
}
inline ::greptime::v1::Column_Values* Column::mutable_values() {
  ::greptime::v1::Column_Values* _msg = _internal_mutable_values();
  // @@protoc_insertion_point(field_mutable:greptime.v1.Column.values)
  return _msg;
}
inline void Column::set_allocated_values(::greptime::v1::Column_Values* values) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.values_;
  }
  if (values) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(values);
    if (message_arena != submessage_arena) {
      values = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, values, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.values_ = values;
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.Column.values)
}

// bytes null_mask = 4;
inline void Column::clear_null_mask() {
  _impl_.null_mask_.ClearToEmpty();
}
inline const std::string& Column::null_mask() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.null_mask)
  return _internal_null_mask();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Column::set_null_mask(ArgT0&& arg0, ArgT... args) {
 
 _impl_.null_mask_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.Column.null_mask)
}
inline std::string* Column::mutable_null_mask() {
  std::string* _s = _internal_mutable_null_mask();
  // @@protoc_insertion_point(field_mutable:greptime.v1.Column.null_mask)
  return _s;
}
inline const std::string& Column::_internal_null_mask() const {
  return _impl_.null_mask_.Get();
}
inline void Column::_internal_set_null_mask(const std::string& value) {
  
  _impl_.null_mask_.Set(value, GetArenaForAllocation());
}
inline std::string* Column::_internal_mutable_null_mask() {
  
  return _impl_.null_mask_.Mutable(GetArenaForAllocation());
}
inline std::string* Column::release_null_mask() {
  // @@protoc_insertion_point(field_release:greptime.v1.Column.null_mask)
  return _impl_.null_mask_.Release();
}
inline void Column::set_allocated_null_mask(std::string* null_mask) {
  if (null_mask != nullptr) {
    
  } else {
    
  }
  _impl_.null_mask_.SetAllocated(null_mask, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.null_mask_.IsDefault()) {
    _impl_.null_mask_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.Column.null_mask)
}

// .greptime.v1.ColumnDataType datatype = 5;
inline void Column::clear_datatype() {
  _impl_.datatype_ = 0;
}
inline ::greptime::v1::ColumnDataType Column::_internal_datatype() const {
  return static_cast< ::greptime::v1::ColumnDataType >(_impl_.datatype_);
}
inline ::greptime::v1::ColumnDataType Column::datatype() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Column.datatype)
  return _internal_datatype();
}
inline void Column::_internal_set_datatype(::greptime::v1::ColumnDataType value) {
  
  _impl_.datatype_ = value;
}
inline void Column::set_datatype(::greptime::v1::ColumnDataType value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:greptime.v1.Column.datatype)
}

// -------------------------------------------------------------------

// ColumnDef

// string name = 1;
inline void ColumnDef::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ColumnDef::name() const {
  // @@protoc_insertion_point(field_get:greptime.v1.ColumnDef.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ColumnDef::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.ColumnDef.name)
}
inline std::string* ColumnDef::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:greptime.v1.ColumnDef.name)
  return _s;
}
inline const std::string& ColumnDef::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ColumnDef::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ColumnDef::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ColumnDef::release_name() {
  // @@protoc_insertion_point(field_release:greptime.v1.ColumnDef.name)
  return _impl_.name_.Release();
}
inline void ColumnDef::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.ColumnDef.name)
}

// .greptime.v1.ColumnDataType datatype = 2;
inline void ColumnDef::clear_datatype() {
  _impl_.datatype_ = 0;
}
inline ::greptime::v1::ColumnDataType ColumnDef::_internal_datatype() const {
  return static_cast< ::greptime::v1::ColumnDataType >(_impl_.datatype_);
}
inline ::greptime::v1::ColumnDataType ColumnDef::datatype() const {
  // @@protoc_insertion_point(field_get:greptime.v1.ColumnDef.datatype)
  return _internal_datatype();
}
inline void ColumnDef::_internal_set_datatype(::greptime::v1::ColumnDataType value) {
  
  _impl_.datatype_ = value;
}
inline void ColumnDef::set_datatype(::greptime::v1::ColumnDataType value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:greptime.v1.ColumnDef.datatype)
}

// bool is_nullable = 3;
inline void ColumnDef::clear_is_nullable() {
  _impl_.is_nullable_ = false;
}
inline bool ColumnDef::_internal_is_nullable() const {
  return _impl_.is_nullable_;
}
inline bool ColumnDef::is_nullable() const {
  // @@protoc_insertion_point(field_get:greptime.v1.ColumnDef.is_nullable)
  return _internal_is_nullable();
}
inline void ColumnDef::_internal_set_is_nullable(bool value) {
  
  _impl_.is_nullable_ = value;
}
inline void ColumnDef::set_is_nullable(bool value) {
  _internal_set_is_nullable(value);
  // @@protoc_insertion_point(field_set:greptime.v1.ColumnDef.is_nullable)
}

// bytes default_constraint = 4;
inline void ColumnDef::clear_default_constraint() {
  _impl_.default_constraint_.ClearToEmpty();
}
inline const std::string& ColumnDef::default_constraint() const {
  // @@protoc_insertion_point(field_get:greptime.v1.ColumnDef.default_constraint)
  return _internal_default_constraint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ColumnDef::set_default_constraint(ArgT0&& arg0, ArgT... args) {
 
 _impl_.default_constraint_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.ColumnDef.default_constraint)
}
inline std::string* ColumnDef::mutable_default_constraint() {
  std::string* _s = _internal_mutable_default_constraint();
  // @@protoc_insertion_point(field_mutable:greptime.v1.ColumnDef.default_constraint)
  return _s;
}
inline const std::string& ColumnDef::_internal_default_constraint() const {
  return _impl_.default_constraint_.Get();
}
inline void ColumnDef::_internal_set_default_constraint(const std::string& value) {
  
  _impl_.default_constraint_.Set(value, GetArenaForAllocation());
}
inline std::string* ColumnDef::_internal_mutable_default_constraint() {
  
  return _impl_.default_constraint_.Mutable(GetArenaForAllocation());
}
inline std::string* ColumnDef::release_default_constraint() {
  // @@protoc_insertion_point(field_release:greptime.v1.ColumnDef.default_constraint)
  return _impl_.default_constraint_.Release();
}
inline void ColumnDef::set_allocated_default_constraint(std::string* default_constraint) {
  if (default_constraint != nullptr) {
    
  } else {
    
  }
  _impl_.default_constraint_.SetAllocated(default_constraint, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.default_constraint_.IsDefault()) {
    _impl_.default_constraint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.ColumnDef.default_constraint)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace greptime

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::greptime::v1::Column_SemanticType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::greptime::v1::Column_SemanticType>() {
  return ::greptime::v1::Column_SemanticType_descriptor();
}
template <> struct is_proto_enum< ::greptime::v1::ColumnDataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::greptime::v1::ColumnDataType>() {
  return ::greptime::v1::ColumnDataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2fcolumn_2eproto
