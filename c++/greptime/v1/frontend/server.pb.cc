// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: greptime/v1/frontend/server.proto

#include "greptime/v1/frontend/server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace greptime {
namespace v1 {
namespace frontend {
PROTOBUF_CONSTEXPR ListProcessRequest::ListProcessRequest(
    ::_pbi::ConstantInitialized) {}
struct ListProcessRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListProcessRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListProcessRequestDefaultTypeInternal() {}
  union {
    ListProcessRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListProcessRequestDefaultTypeInternal _ListProcessRequest_default_instance_;
PROTOBUF_CONSTEXPR ListProcessResponse::ListProcessResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.processes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListProcessResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListProcessResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListProcessResponseDefaultTypeInternal() {}
  union {
    ListProcessResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListProcessResponseDefaultTypeInternal _ListProcessResponse_default_instance_;
PROTOBUF_CONSTEXPR ProcessInfo::ProcessInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.schema_)*/{}
  , /*decltype(_impl_.catalog_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.query_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.start_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcessInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessInfoDefaultTypeInternal() {}
  union {
    ProcessInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessInfoDefaultTypeInternal _ProcessInfo_default_instance_;
}  // namespace frontend
}  // namespace v1
}  // namespace greptime
static ::_pb::Metadata file_level_metadata_greptime_2fv1_2ffrontend_2fserver_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_greptime_2fv1_2ffrontend_2fserver_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_greptime_2fv1_2ffrontend_2fserver_2eproto = nullptr;

const uint32_t TableStruct_greptime_2fv1_2ffrontend_2fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::frontend::ListProcessRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::frontend::ListProcessResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::frontend::ListProcessResponse, _impl_.processes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::frontend::ProcessInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::frontend::ProcessInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::frontend::ProcessInfo, _impl_.catalog_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::frontend::ProcessInfo, _impl_.schema_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::frontend::ProcessInfo, _impl_.query_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::frontend::ProcessInfo, _impl_.start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::frontend::ProcessInfo, _impl_.client_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::greptime::v1::frontend::ListProcessRequest)},
  { 6, -1, -1, sizeof(::greptime::v1::frontend::ListProcessResponse)},
  { 13, -1, -1, sizeof(::greptime::v1::frontend::ProcessInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::greptime::v1::frontend::_ListProcessRequest_default_instance_._instance,
  &::greptime::v1::frontend::_ListProcessResponse_default_instance_._instance,
  &::greptime::v1::frontend::_ProcessInfo_default_instance_._instance,
};

const char descriptor_table_protodef_greptime_2fv1_2ffrontend_2fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!greptime/v1/frontend/server.proto\022\024gre"
  "ptime.v1.frontend\"\024\n\022ListProcessRequest\""
  "K\n\023ListProcessResponse\0224\n\tprocesses\030\001 \003("
  "\0132!.greptime.v1.frontend.ProcessInfo\"r\n\013"
  "ProcessInfo\022\n\n\002id\030\001 \001(\004\022\017\n\007catalog\030\002 \001(\t"
  "\022\016\n\006schema\030\003 \003(\t\022\r\n\005query\030\004 \001(\t\022\027\n\017start"
  "_timestamp\030\005 \001(\004\022\016\n\006client\030\006 \001(\t2n\n\010Fron"
  "tend\022b\n\013ListProcess\022(.greptime.v1.fronte"
  "nd.ListProcessRequest\032).greptime.v1.fron"
  "tend.ListProcessResponseBa\n\027io.greptime."
  "v1.frontendB\006ServerZ>github.com/Greptime"
  "Team/greptime-proto/go/greptime/v1/front"
  "endb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_greptime_2fv1_2ffrontend_2fserver_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_greptime_2fv1_2ffrontend_2fserver_2eproto = {
    false, false, 491, descriptor_table_protodef_greptime_2fv1_2ffrontend_2fserver_2eproto,
    "greptime/v1/frontend/server.proto",
    &descriptor_table_greptime_2fv1_2ffrontend_2fserver_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_greptime_2fv1_2ffrontend_2fserver_2eproto::offsets,
    file_level_metadata_greptime_2fv1_2ffrontend_2fserver_2eproto, file_level_enum_descriptors_greptime_2fv1_2ffrontend_2fserver_2eproto,
    file_level_service_descriptors_greptime_2fv1_2ffrontend_2fserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_greptime_2fv1_2ffrontend_2fserver_2eproto_getter() {
  return &descriptor_table_greptime_2fv1_2ffrontend_2fserver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_greptime_2fv1_2ffrontend_2fserver_2eproto(&descriptor_table_greptime_2fv1_2ffrontend_2fserver_2eproto);
namespace greptime {
namespace v1 {
namespace frontend {

// ===================================================================

class ListProcessRequest::_Internal {
 public:
};

ListProcessRequest::ListProcessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:greptime.v1.frontend.ListProcessRequest)
}
ListProcessRequest::ListProcessRequest(const ListProcessRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ListProcessRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:greptime.v1.frontend.ListProcessRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListProcessRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListProcessRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ListProcessRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2ffrontend_2fserver_2eproto_getter, &descriptor_table_greptime_2fv1_2ffrontend_2fserver_2eproto_once,
      file_level_metadata_greptime_2fv1_2ffrontend_2fserver_2eproto[0]);
}

// ===================================================================

class ListProcessResponse::_Internal {
 public:
};

ListProcessResponse::ListProcessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.frontend.ListProcessResponse)
}
ListProcessResponse::ListProcessResponse(const ListProcessResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListProcessResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.processes_){from._impl_.processes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:greptime.v1.frontend.ListProcessResponse)
}

inline void ListProcessResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.processes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListProcessResponse::~ListProcessResponse() {
  // @@protoc_insertion_point(destructor:greptime.v1.frontend.ListProcessResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListProcessResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.processes_.~RepeatedPtrField();
}

void ListProcessResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListProcessResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.frontend.ListProcessResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.processes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListProcessResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .greptime.v1.frontend.ProcessInfo processes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_processes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListProcessResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.frontend.ListProcessResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .greptime.v1.frontend.ProcessInfo processes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_processes_size()); i < n; i++) {
    const auto& repfield = this->_internal_processes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.frontend.ListProcessResponse)
  return target;
}

size_t ListProcessResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.frontend.ListProcessResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .greptime.v1.frontend.ProcessInfo processes = 1;
  total_size += 1UL * this->_internal_processes_size();
  for (const auto& msg : this->_impl_.processes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListProcessResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListProcessResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListProcessResponse::GetClassData() const { return &_class_data_; }


void ListProcessResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListProcessResponse*>(&to_msg);
  auto& from = static_cast<const ListProcessResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.frontend.ListProcessResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.processes_.MergeFrom(from._impl_.processes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListProcessResponse::CopyFrom(const ListProcessResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.frontend.ListProcessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProcessResponse::IsInitialized() const {
  return true;
}

void ListProcessResponse::InternalSwap(ListProcessResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.processes_.InternalSwap(&other->_impl_.processes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListProcessResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2ffrontend_2fserver_2eproto_getter, &descriptor_table_greptime_2fv1_2ffrontend_2fserver_2eproto_once,
      file_level_metadata_greptime_2fv1_2ffrontend_2fserver_2eproto[1]);
}

// ===================================================================

class ProcessInfo::_Internal {
 public:
};

ProcessInfo::ProcessInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.frontend.ProcessInfo)
}
ProcessInfo::ProcessInfo(const ProcessInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_){from._impl_.schema_}
    , decltype(_impl_.catalog_){}
    , decltype(_impl_.query_){}
    , decltype(_impl_.client_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.start_timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.catalog_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.catalog_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_catalog().empty()) {
    _this->_impl_.catalog_.Set(from._internal_catalog(), 
      _this->GetArenaForAllocation());
  }
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query().empty()) {
    _this->_impl_.query_.Set(from._internal_query(), 
      _this->GetArenaForAllocation());
  }
  _impl_.client_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client().empty()) {
    _this->_impl_.client_.Set(from._internal_client(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.start_timestamp_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.start_timestamp_));
  // @@protoc_insertion_point(copy_constructor:greptime.v1.frontend.ProcessInfo)
}

inline void ProcessInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_){arena}
    , decltype(_impl_.catalog_){}
    , decltype(_impl_.query_){}
    , decltype(_impl_.client_){}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.start_timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.catalog_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.catalog_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcessInfo::~ProcessInfo() {
  // @@protoc_insertion_point(destructor:greptime.v1.frontend.ProcessInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.schema_.~RepeatedPtrField();
  _impl_.catalog_.Destroy();
  _impl_.query_.Destroy();
  _impl_.client_.Destroy();
}

void ProcessInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.frontend.ProcessInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.schema_.Clear();
  _impl_.catalog_.ClearToEmpty();
  _impl_.query_.ClearToEmpty();
  _impl_.client_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.start_timestamp_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.start_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string catalog = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_catalog();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "greptime.v1.frontend.ProcessInfo.catalog"));
        } else
          goto handle_unusual;
        continue;
      // repeated string schema = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_schema();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "greptime.v1.frontend.ProcessInfo.schema"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string query = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_query();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "greptime.v1.frontend.ProcessInfo.query"));
        } else
          goto handle_unusual;
        continue;
      // uint64 start_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string client = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_client();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "greptime.v1.frontend.ProcessInfo.client"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.frontend.ProcessInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string catalog = 2;
  if (!this->_internal_catalog().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_catalog().data(), static_cast<int>(this->_internal_catalog().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "greptime.v1.frontend.ProcessInfo.catalog");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_catalog(), target);
  }

  // repeated string schema = 3;
  for (int i = 0, n = this->_internal_schema_size(); i < n; i++) {
    const auto& s = this->_internal_schema(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "greptime.v1.frontend.ProcessInfo.schema");
    target = stream->WriteString(3, s, target);
  }

  // string query = 4;
  if (!this->_internal_query().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "greptime.v1.frontend.ProcessInfo.query");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_query(), target);
  }

  // uint64 start_timestamp = 5;
  if (this->_internal_start_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_start_timestamp(), target);
  }

  // string client = 6;
  if (!this->_internal_client().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client().data(), static_cast<int>(this->_internal_client().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "greptime.v1.frontend.ProcessInfo.client");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_client(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.frontend.ProcessInfo)
  return target;
}

size_t ProcessInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.frontend.ProcessInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string schema = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.schema_.size());
  for (int i = 0, n = _impl_.schema_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.schema_.Get(i));
  }

  // string catalog = 2;
  if (!this->_internal_catalog().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_catalog());
  }

  // string query = 4;
  if (!this->_internal_query().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  // string client = 6;
  if (!this->_internal_client().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client());
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint64 start_timestamp = 5;
  if (this->_internal_start_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_start_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessInfo::GetClassData() const { return &_class_data_; }


void ProcessInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessInfo*>(&to_msg);
  auto& from = static_cast<const ProcessInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.frontend.ProcessInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.schema_.MergeFrom(from._impl_.schema_);
  if (!from._internal_catalog().empty()) {
    _this->_internal_set_catalog(from._internal_catalog());
  }
  if (!from._internal_query().empty()) {
    _this->_internal_set_query(from._internal_query());
  }
  if (!from._internal_client().empty()) {
    _this->_internal_set_client(from._internal_client());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_start_timestamp() != 0) {
    _this->_internal_set_start_timestamp(from._internal_start_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessInfo::CopyFrom(const ProcessInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.frontend.ProcessInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessInfo::IsInitialized() const {
  return true;
}

void ProcessInfo::InternalSwap(ProcessInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.schema_.InternalSwap(&other->_impl_.schema_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.catalog_, lhs_arena,
      &other->_impl_.catalog_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.query_, lhs_arena,
      &other->_impl_.query_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_, lhs_arena,
      &other->_impl_.client_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessInfo, _impl_.start_timestamp_)
      + sizeof(ProcessInfo::_impl_.start_timestamp_)
      - PROTOBUF_FIELD_OFFSET(ProcessInfo, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2ffrontend_2fserver_2eproto_getter, &descriptor_table_greptime_2fv1_2ffrontend_2fserver_2eproto_once,
      file_level_metadata_greptime_2fv1_2ffrontend_2fserver_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace frontend
}  // namespace v1
}  // namespace greptime
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::greptime::v1::frontend::ListProcessRequest*
Arena::CreateMaybeMessage< ::greptime::v1::frontend::ListProcessRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::frontend::ListProcessRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::frontend::ListProcessResponse*
Arena::CreateMaybeMessage< ::greptime::v1::frontend::ListProcessResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::frontend::ListProcessResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::frontend::ProcessInfo*
Arena::CreateMaybeMessage< ::greptime::v1::frontend::ProcessInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::frontend::ProcessInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
