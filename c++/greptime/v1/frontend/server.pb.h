// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: greptime/v1/frontend/server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2ffrontend_2fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2ffrontend_2fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_greptime_2fv1_2ffrontend_2fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_greptime_2fv1_2ffrontend_2fserver_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_greptime_2fv1_2ffrontend_2fserver_2eproto;
namespace greptime {
namespace v1 {
namespace frontend {
class ListProcessRequest;
struct ListProcessRequestDefaultTypeInternal;
extern ListProcessRequestDefaultTypeInternal _ListProcessRequest_default_instance_;
class ListProcessResponse;
struct ListProcessResponseDefaultTypeInternal;
extern ListProcessResponseDefaultTypeInternal _ListProcessResponse_default_instance_;
class ProcessInfo;
struct ProcessInfoDefaultTypeInternal;
extern ProcessInfoDefaultTypeInternal _ProcessInfo_default_instance_;
}  // namespace frontend
}  // namespace v1
}  // namespace greptime
PROTOBUF_NAMESPACE_OPEN
template<> ::greptime::v1::frontend::ListProcessRequest* Arena::CreateMaybeMessage<::greptime::v1::frontend::ListProcessRequest>(Arena*);
template<> ::greptime::v1::frontend::ListProcessResponse* Arena::CreateMaybeMessage<::greptime::v1::frontend::ListProcessResponse>(Arena*);
template<> ::greptime::v1::frontend::ProcessInfo* Arena::CreateMaybeMessage<::greptime::v1::frontend::ProcessInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace greptime {
namespace v1 {
namespace frontend {

// ===================================================================

class ListProcessRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:greptime.v1.frontend.ListProcessRequest) */ {
 public:
  inline ListProcessRequest() : ListProcessRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ListProcessRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListProcessRequest(const ListProcessRequest& from);
  ListProcessRequest(ListProcessRequest&& from) noexcept
    : ListProcessRequest() {
    *this = ::std::move(from);
  }

  inline ListProcessRequest& operator=(const ListProcessRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProcessRequest& operator=(ListProcessRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListProcessRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListProcessRequest* internal_default_instance() {
    return reinterpret_cast<const ListProcessRequest*>(
               &_ListProcessRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ListProcessRequest& a, ListProcessRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListProcessRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListProcessRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListProcessRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListProcessRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListProcessRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListProcessRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greptime.v1.frontend.ListProcessRequest";
  }
  protected:
  explicit ListProcessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:greptime.v1.frontend.ListProcessRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_greptime_2fv1_2ffrontend_2fserver_2eproto;
};
// -------------------------------------------------------------------

class ListProcessResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greptime.v1.frontend.ListProcessResponse) */ {
 public:
  inline ListProcessResponse() : ListProcessResponse(nullptr) {}
  ~ListProcessResponse() override;
  explicit PROTOBUF_CONSTEXPR ListProcessResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListProcessResponse(const ListProcessResponse& from);
  ListProcessResponse(ListProcessResponse&& from) noexcept
    : ListProcessResponse() {
    *this = ::std::move(from);
  }

  inline ListProcessResponse& operator=(const ListProcessResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProcessResponse& operator=(ListProcessResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListProcessResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListProcessResponse* internal_default_instance() {
    return reinterpret_cast<const ListProcessResponse*>(
               &_ListProcessResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListProcessResponse& a, ListProcessResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListProcessResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListProcessResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListProcessResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListProcessResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListProcessResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListProcessResponse& from) {
    ListProcessResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListProcessResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greptime.v1.frontend.ListProcessResponse";
  }
  protected:
  explicit ListProcessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessesFieldNumber = 1,
  };
  // repeated .greptime.v1.frontend.ProcessInfo processes = 1;
  int processes_size() const;
  private:
  int _internal_processes_size() const;
  public:
  void clear_processes();
  ::greptime::v1::frontend::ProcessInfo* mutable_processes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::greptime::v1::frontend::ProcessInfo >*
      mutable_processes();
  private:
  const ::greptime::v1::frontend::ProcessInfo& _internal_processes(int index) const;
  ::greptime::v1::frontend::ProcessInfo* _internal_add_processes();
  public:
  const ::greptime::v1::frontend::ProcessInfo& processes(int index) const;
  ::greptime::v1::frontend::ProcessInfo* add_processes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::greptime::v1::frontend::ProcessInfo >&
      processes() const;

  // @@protoc_insertion_point(class_scope:greptime.v1.frontend.ListProcessResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::greptime::v1::frontend::ProcessInfo > processes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greptime_2fv1_2ffrontend_2fserver_2eproto;
};
// -------------------------------------------------------------------

class ProcessInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greptime.v1.frontend.ProcessInfo) */ {
 public:
  inline ProcessInfo() : ProcessInfo(nullptr) {}
  ~ProcessInfo() override;
  explicit PROTOBUF_CONSTEXPR ProcessInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessInfo(const ProcessInfo& from);
  ProcessInfo(ProcessInfo&& from) noexcept
    : ProcessInfo() {
    *this = ::std::move(from);
  }

  inline ProcessInfo& operator=(const ProcessInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessInfo& operator=(ProcessInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessInfo* internal_default_instance() {
    return reinterpret_cast<const ProcessInfo*>(
               &_ProcessInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProcessInfo& a, ProcessInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessInfo& from) {
    ProcessInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greptime.v1.frontend.ProcessInfo";
  }
  protected:
  explicit ProcessInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemasFieldNumber = 3,
    kIdFieldNumber = 1,
    kCatalogFieldNumber = 2,
    kQueryFieldNumber = 4,
    kClientFieldNumber = 6,
    kFrontendFieldNumber = 7,
    kStartTimestampFieldNumber = 5,
  };
  // repeated string schemas = 3;
  int schemas_size() const;
  private:
  int _internal_schemas_size() const;
  public:
  void clear_schemas();
  const std::string& schemas(int index) const;
  std::string* mutable_schemas(int index);
  void set_schemas(int index, const std::string& value);
  void set_schemas(int index, std::string&& value);
  void set_schemas(int index, const char* value);
  void set_schemas(int index, const char* value, size_t size);
  std::string* add_schemas();
  void add_schemas(const std::string& value);
  void add_schemas(std::string&& value);
  void add_schemas(const char* value);
  void add_schemas(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& schemas() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_schemas();
  private:
  const std::string& _internal_schemas(int index) const;
  std::string* _internal_add_schemas();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string catalog = 2;
  void clear_catalog();
  const std::string& catalog() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_catalog(ArgT0&& arg0, ArgT... args);
  std::string* mutable_catalog();
  PROTOBUF_NODISCARD std::string* release_catalog();
  void set_allocated_catalog(std::string* catalog);
  private:
  const std::string& _internal_catalog() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_catalog(const std::string& value);
  std::string* _internal_mutable_catalog();
  public:

  // string query = 4;
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // string client = 6;
  void clear_client();
  const std::string& client() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client();
  PROTOBUF_NODISCARD std::string* release_client();
  void set_allocated_client(std::string* client);
  private:
  const std::string& _internal_client() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client(const std::string& value);
  std::string* _internal_mutable_client();
  public:

  // string frontend = 7;
  void clear_frontend();
  const std::string& frontend() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frontend(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frontend();
  PROTOBUF_NODISCARD std::string* release_frontend();
  void set_allocated_frontend(std::string* frontend);
  private:
  const std::string& _internal_frontend() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frontend(const std::string& value);
  std::string* _internal_mutable_frontend();
  public:

  // int64 start_timestamp = 5;
  void clear_start_timestamp();
  int64_t start_timestamp() const;
  void set_start_timestamp(int64_t value);
  private:
  int64_t _internal_start_timestamp() const;
  void _internal_set_start_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:greptime.v1.frontend.ProcessInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> schemas_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr catalog_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frontend_;
    int64_t start_timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greptime_2fv1_2ffrontend_2fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListProcessRequest

// -------------------------------------------------------------------

// ListProcessResponse

// repeated .greptime.v1.frontend.ProcessInfo processes = 1;
inline int ListProcessResponse::_internal_processes_size() const {
  return _impl_.processes_.size();
}
inline int ListProcessResponse::processes_size() const {
  return _internal_processes_size();
}
inline void ListProcessResponse::clear_processes() {
  _impl_.processes_.Clear();
}
inline ::greptime::v1::frontend::ProcessInfo* ListProcessResponse::mutable_processes(int index) {
  // @@protoc_insertion_point(field_mutable:greptime.v1.frontend.ListProcessResponse.processes)
  return _impl_.processes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::greptime::v1::frontend::ProcessInfo >*
ListProcessResponse::mutable_processes() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.frontend.ListProcessResponse.processes)
  return &_impl_.processes_;
}
inline const ::greptime::v1::frontend::ProcessInfo& ListProcessResponse::_internal_processes(int index) const {
  return _impl_.processes_.Get(index);
}
inline const ::greptime::v1::frontend::ProcessInfo& ListProcessResponse::processes(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.frontend.ListProcessResponse.processes)
  return _internal_processes(index);
}
inline ::greptime::v1::frontend::ProcessInfo* ListProcessResponse::_internal_add_processes() {
  return _impl_.processes_.Add();
}
inline ::greptime::v1::frontend::ProcessInfo* ListProcessResponse::add_processes() {
  ::greptime::v1::frontend::ProcessInfo* _add = _internal_add_processes();
  // @@protoc_insertion_point(field_add:greptime.v1.frontend.ListProcessResponse.processes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::greptime::v1::frontend::ProcessInfo >&
ListProcessResponse::processes() const {
  // @@protoc_insertion_point(field_list:greptime.v1.frontend.ListProcessResponse.processes)
  return _impl_.processes_;
}

// -------------------------------------------------------------------

// ProcessInfo

// string id = 1;
inline void ProcessInfo::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ProcessInfo::id() const {
  // @@protoc_insertion_point(field_get:greptime.v1.frontend.ProcessInfo.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessInfo::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.frontend.ProcessInfo.id)
}
inline std::string* ProcessInfo::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:greptime.v1.frontend.ProcessInfo.id)
  return _s;
}
inline const std::string& ProcessInfo::_internal_id() const {
  return _impl_.id_.Get();
}
inline void ProcessInfo::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessInfo::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessInfo::release_id() {
  // @@protoc_insertion_point(field_release:greptime.v1.frontend.ProcessInfo.id)
  return _impl_.id_.Release();
}
inline void ProcessInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.frontend.ProcessInfo.id)
}

// string catalog = 2;
inline void ProcessInfo::clear_catalog() {
  _impl_.catalog_.ClearToEmpty();
}
inline const std::string& ProcessInfo::catalog() const {
  // @@protoc_insertion_point(field_get:greptime.v1.frontend.ProcessInfo.catalog)
  return _internal_catalog();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessInfo::set_catalog(ArgT0&& arg0, ArgT... args) {
 
 _impl_.catalog_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.frontend.ProcessInfo.catalog)
}
inline std::string* ProcessInfo::mutable_catalog() {
  std::string* _s = _internal_mutable_catalog();
  // @@protoc_insertion_point(field_mutable:greptime.v1.frontend.ProcessInfo.catalog)
  return _s;
}
inline const std::string& ProcessInfo::_internal_catalog() const {
  return _impl_.catalog_.Get();
}
inline void ProcessInfo::_internal_set_catalog(const std::string& value) {
  
  _impl_.catalog_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessInfo::_internal_mutable_catalog() {
  
  return _impl_.catalog_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessInfo::release_catalog() {
  // @@protoc_insertion_point(field_release:greptime.v1.frontend.ProcessInfo.catalog)
  return _impl_.catalog_.Release();
}
inline void ProcessInfo::set_allocated_catalog(std::string* catalog) {
  if (catalog != nullptr) {
    
  } else {
    
  }
  _impl_.catalog_.SetAllocated(catalog, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.catalog_.IsDefault()) {
    _impl_.catalog_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.frontend.ProcessInfo.catalog)
}

// repeated string schemas = 3;
inline int ProcessInfo::_internal_schemas_size() const {
  return _impl_.schemas_.size();
}
inline int ProcessInfo::schemas_size() const {
  return _internal_schemas_size();
}
inline void ProcessInfo::clear_schemas() {
  _impl_.schemas_.Clear();
}
inline std::string* ProcessInfo::add_schemas() {
  std::string* _s = _internal_add_schemas();
  // @@protoc_insertion_point(field_add_mutable:greptime.v1.frontend.ProcessInfo.schemas)
  return _s;
}
inline const std::string& ProcessInfo::_internal_schemas(int index) const {
  return _impl_.schemas_.Get(index);
}
inline const std::string& ProcessInfo::schemas(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.frontend.ProcessInfo.schemas)
  return _internal_schemas(index);
}
inline std::string* ProcessInfo::mutable_schemas(int index) {
  // @@protoc_insertion_point(field_mutable:greptime.v1.frontend.ProcessInfo.schemas)
  return _impl_.schemas_.Mutable(index);
}
inline void ProcessInfo::set_schemas(int index, const std::string& value) {
  _impl_.schemas_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:greptime.v1.frontend.ProcessInfo.schemas)
}
inline void ProcessInfo::set_schemas(int index, std::string&& value) {
  _impl_.schemas_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:greptime.v1.frontend.ProcessInfo.schemas)
}
inline void ProcessInfo::set_schemas(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.schemas_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:greptime.v1.frontend.ProcessInfo.schemas)
}
inline void ProcessInfo::set_schemas(int index, const char* value, size_t size) {
  _impl_.schemas_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:greptime.v1.frontend.ProcessInfo.schemas)
}
inline std::string* ProcessInfo::_internal_add_schemas() {
  return _impl_.schemas_.Add();
}
inline void ProcessInfo::add_schemas(const std::string& value) {
  _impl_.schemas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:greptime.v1.frontend.ProcessInfo.schemas)
}
inline void ProcessInfo::add_schemas(std::string&& value) {
  _impl_.schemas_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:greptime.v1.frontend.ProcessInfo.schemas)
}
inline void ProcessInfo::add_schemas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.schemas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:greptime.v1.frontend.ProcessInfo.schemas)
}
inline void ProcessInfo::add_schemas(const char* value, size_t size) {
  _impl_.schemas_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:greptime.v1.frontend.ProcessInfo.schemas)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProcessInfo::schemas() const {
  // @@protoc_insertion_point(field_list:greptime.v1.frontend.ProcessInfo.schemas)
  return _impl_.schemas_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProcessInfo::mutable_schemas() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.frontend.ProcessInfo.schemas)
  return &_impl_.schemas_;
}

// string query = 4;
inline void ProcessInfo::clear_query() {
  _impl_.query_.ClearToEmpty();
}
inline const std::string& ProcessInfo::query() const {
  // @@protoc_insertion_point(field_get:greptime.v1.frontend.ProcessInfo.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessInfo::set_query(ArgT0&& arg0, ArgT... args) {
 
 _impl_.query_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.frontend.ProcessInfo.query)
}
inline std::string* ProcessInfo::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:greptime.v1.frontend.ProcessInfo.query)
  return _s;
}
inline const std::string& ProcessInfo::_internal_query() const {
  return _impl_.query_.Get();
}
inline void ProcessInfo::_internal_set_query(const std::string& value) {
  
  _impl_.query_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessInfo::_internal_mutable_query() {
  
  return _impl_.query_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessInfo::release_query() {
  // @@protoc_insertion_point(field_release:greptime.v1.frontend.ProcessInfo.query)
  return _impl_.query_.Release();
}
inline void ProcessInfo::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  _impl_.query_.SetAllocated(query, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_.IsDefault()) {
    _impl_.query_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.frontend.ProcessInfo.query)
}

// int64 start_timestamp = 5;
inline void ProcessInfo::clear_start_timestamp() {
  _impl_.start_timestamp_ = int64_t{0};
}
inline int64_t ProcessInfo::_internal_start_timestamp() const {
  return _impl_.start_timestamp_;
}
inline int64_t ProcessInfo::start_timestamp() const {
  // @@protoc_insertion_point(field_get:greptime.v1.frontend.ProcessInfo.start_timestamp)
  return _internal_start_timestamp();
}
inline void ProcessInfo::_internal_set_start_timestamp(int64_t value) {
  
  _impl_.start_timestamp_ = value;
}
inline void ProcessInfo::set_start_timestamp(int64_t value) {
  _internal_set_start_timestamp(value);
  // @@protoc_insertion_point(field_set:greptime.v1.frontend.ProcessInfo.start_timestamp)
}

// string client = 6;
inline void ProcessInfo::clear_client() {
  _impl_.client_.ClearToEmpty();
}
inline const std::string& ProcessInfo::client() const {
  // @@protoc_insertion_point(field_get:greptime.v1.frontend.ProcessInfo.client)
  return _internal_client();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessInfo::set_client(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.frontend.ProcessInfo.client)
}
inline std::string* ProcessInfo::mutable_client() {
  std::string* _s = _internal_mutable_client();
  // @@protoc_insertion_point(field_mutable:greptime.v1.frontend.ProcessInfo.client)
  return _s;
}
inline const std::string& ProcessInfo::_internal_client() const {
  return _impl_.client_.Get();
}
inline void ProcessInfo::_internal_set_client(const std::string& value) {
  
  _impl_.client_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessInfo::_internal_mutable_client() {
  
  return _impl_.client_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessInfo::release_client() {
  // @@protoc_insertion_point(field_release:greptime.v1.frontend.ProcessInfo.client)
  return _impl_.client_.Release();
}
inline void ProcessInfo::set_allocated_client(std::string* client) {
  if (client != nullptr) {
    
  } else {
    
  }
  _impl_.client_.SetAllocated(client, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_.IsDefault()) {
    _impl_.client_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.frontend.ProcessInfo.client)
}

// string frontend = 7;
inline void ProcessInfo::clear_frontend() {
  _impl_.frontend_.ClearToEmpty();
}
inline const std::string& ProcessInfo::frontend() const {
  // @@protoc_insertion_point(field_get:greptime.v1.frontend.ProcessInfo.frontend)
  return _internal_frontend();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessInfo::set_frontend(ArgT0&& arg0, ArgT... args) {
 
 _impl_.frontend_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.frontend.ProcessInfo.frontend)
}
inline std::string* ProcessInfo::mutable_frontend() {
  std::string* _s = _internal_mutable_frontend();
  // @@protoc_insertion_point(field_mutable:greptime.v1.frontend.ProcessInfo.frontend)
  return _s;
}
inline const std::string& ProcessInfo::_internal_frontend() const {
  return _impl_.frontend_.Get();
}
inline void ProcessInfo::_internal_set_frontend(const std::string& value) {
  
  _impl_.frontend_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessInfo::_internal_mutable_frontend() {
  
  return _impl_.frontend_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessInfo::release_frontend() {
  // @@protoc_insertion_point(field_release:greptime.v1.frontend.ProcessInfo.frontend)
  return _impl_.frontend_.Release();
}
inline void ProcessInfo::set_allocated_frontend(std::string* frontend) {
  if (frontend != nullptr) {
    
  } else {
    
  }
  _impl_.frontend_.SetAllocated(frontend, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.frontend_.IsDefault()) {
    _impl_.frontend_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.frontend.ProcessInfo.frontend)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace frontend
}  // namespace v1
}  // namespace greptime

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2ffrontend_2fserver_2eproto
