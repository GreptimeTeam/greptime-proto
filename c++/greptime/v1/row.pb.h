// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: greptime/v1/row.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2frow_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2frow_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "greptime/v1/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_greptime_2fv1_2frow_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_greptime_2fv1_2frow_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_greptime_2fv1_2frow_2eproto;
namespace greptime {
namespace v1 {
class ColumnSchema;
struct ColumnSchemaDefaultTypeInternal;
extern ColumnSchemaDefaultTypeInternal _ColumnSchema_default_instance_;
class Field;
struct FieldDefaultTypeInternal;
extern FieldDefaultTypeInternal _Field_default_instance_;
class Row;
struct RowDefaultTypeInternal;
extern RowDefaultTypeInternal _Row_default_instance_;
class Rows;
struct RowsDefaultTypeInternal;
extern RowsDefaultTypeInternal _Rows_default_instance_;
}  // namespace v1
}  // namespace greptime
PROTOBUF_NAMESPACE_OPEN
template<> ::greptime::v1::ColumnSchema* Arena::CreateMaybeMessage<::greptime::v1::ColumnSchema>(Arena*);
template<> ::greptime::v1::Field* Arena::CreateMaybeMessage<::greptime::v1::Field>(Arena*);
template<> ::greptime::v1::Row* Arena::CreateMaybeMessage<::greptime::v1::Row>(Arena*);
template<> ::greptime::v1::Rows* Arena::CreateMaybeMessage<::greptime::v1::Rows>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace greptime {
namespace v1 {

// ===================================================================

class Rows final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greptime.v1.Rows) */ {
 public:
  inline Rows() : Rows(nullptr) {}
  ~Rows() override;
  explicit PROTOBUF_CONSTEXPR Rows(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rows(const Rows& from);
  Rows(Rows&& from) noexcept
    : Rows() {
    *this = ::std::move(from);
  }

  inline Rows& operator=(const Rows& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rows& operator=(Rows&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rows& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rows* internal_default_instance() {
    return reinterpret_cast<const Rows*>(
               &_Rows_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Rows& a, Rows& b) {
    a.Swap(&b);
  }
  inline void Swap(Rows* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rows* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rows* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rows>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rows& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Rows& from) {
    Rows::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rows* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greptime.v1.Rows";
  }
  protected:
  explicit Rows(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemaFieldNumber = 1,
    kRowsFieldNumber = 2,
  };
  // repeated .greptime.v1.ColumnSchema schema = 1;
  int schema_size() const;
  private:
  int _internal_schema_size() const;
  public:
  void clear_schema();
  ::greptime::v1::ColumnSchema* mutable_schema(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::greptime::v1::ColumnSchema >*
      mutable_schema();
  private:
  const ::greptime::v1::ColumnSchema& _internal_schema(int index) const;
  ::greptime::v1::ColumnSchema* _internal_add_schema();
  public:
  const ::greptime::v1::ColumnSchema& schema(int index) const;
  ::greptime::v1::ColumnSchema* add_schema();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::greptime::v1::ColumnSchema >&
      schema() const;

  // repeated .greptime.v1.Row rows = 2;
  int rows_size() const;
  private:
  int _internal_rows_size() const;
  public:
  void clear_rows();
  ::greptime::v1::Row* mutable_rows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::greptime::v1::Row >*
      mutable_rows();
  private:
  const ::greptime::v1::Row& _internal_rows(int index) const;
  ::greptime::v1::Row* _internal_add_rows();
  public:
  const ::greptime::v1::Row& rows(int index) const;
  ::greptime::v1::Row* add_rows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::greptime::v1::Row >&
      rows() const;

  // @@protoc_insertion_point(class_scope:greptime.v1.Rows)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::greptime::v1::ColumnSchema > schema_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::greptime::v1::Row > rows_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greptime_2fv1_2frow_2eproto;
};
// -------------------------------------------------------------------

class ColumnSchema final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greptime.v1.ColumnSchema) */ {
 public:
  inline ColumnSchema() : ColumnSchema(nullptr) {}
  ~ColumnSchema() override;
  explicit PROTOBUF_CONSTEXPR ColumnSchema(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColumnSchema(const ColumnSchema& from);
  ColumnSchema(ColumnSchema&& from) noexcept
    : ColumnSchema() {
    *this = ::std::move(from);
  }

  inline ColumnSchema& operator=(const ColumnSchema& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnSchema& operator=(ColumnSchema&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColumnSchema& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColumnSchema* internal_default_instance() {
    return reinterpret_cast<const ColumnSchema*>(
               &_ColumnSchema_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ColumnSchema& a, ColumnSchema& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnSchema* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnSchema* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColumnSchema* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColumnSchema>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColumnSchema& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ColumnSchema& from) {
    ColumnSchema::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnSchema* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greptime.v1.ColumnSchema";
  }
  protected:
  explicit ColumnSchema(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnNameFieldNumber = 1,
    kDatatypeFieldNumber = 2,
    kSemanticTypeFieldNumber = 3,
  };
  // string column_name = 1;
  void clear_column_name();
  const std::string& column_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_column_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_column_name();
  PROTOBUF_NODISCARD std::string* release_column_name();
  void set_allocated_column_name(std::string* column_name);
  private:
  const std::string& _internal_column_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_column_name(const std::string& value);
  std::string* _internal_mutable_column_name();
  public:

  // .greptime.v1.ColumnDataType datatype = 2;
  void clear_datatype();
  ::greptime::v1::ColumnDataType datatype() const;
  void set_datatype(::greptime::v1::ColumnDataType value);
  private:
  ::greptime::v1::ColumnDataType _internal_datatype() const;
  void _internal_set_datatype(::greptime::v1::ColumnDataType value);
  public:

  // .greptime.v1.SemanticType semantic_type = 3;
  void clear_semantic_type();
  ::greptime::v1::SemanticType semantic_type() const;
  void set_semantic_type(::greptime::v1::SemanticType value);
  private:
  ::greptime::v1::SemanticType _internal_semantic_type() const;
  void _internal_set_semantic_type(::greptime::v1::SemanticType value);
  public:

  // @@protoc_insertion_point(class_scope:greptime.v1.ColumnSchema)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr column_name_;
    int datatype_;
    int semantic_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greptime_2fv1_2frow_2eproto;
};
// -------------------------------------------------------------------

class Row final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greptime.v1.Row) */ {
 public:
  inline Row() : Row(nullptr) {}
  ~Row() override;
  explicit PROTOBUF_CONSTEXPR Row(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Row(const Row& from);
  Row(Row&& from) noexcept
    : Row() {
    *this = ::std::move(from);
  }

  inline Row& operator=(const Row& from) {
    CopyFrom(from);
    return *this;
  }
  inline Row& operator=(Row&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Row& default_instance() {
    return *internal_default_instance();
  }
  static inline const Row* internal_default_instance() {
    return reinterpret_cast<const Row*>(
               &_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Row& a, Row& b) {
    a.Swap(&b);
  }
  inline void Swap(Row* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Row* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Row* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Row>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Row& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Row& from) {
    Row::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Row* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greptime.v1.Row";
  }
  protected:
  explicit Row(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
  };
  // repeated .greptime.v1.Field fields = 1;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::greptime::v1::Field* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::greptime::v1::Field >*
      mutable_fields();
  private:
  const ::greptime::v1::Field& _internal_fields(int index) const;
  ::greptime::v1::Field* _internal_add_fields();
  public:
  const ::greptime::v1::Field& fields(int index) const;
  ::greptime::v1::Field* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::greptime::v1::Field >&
      fields() const;

  // @@protoc_insertion_point(class_scope:greptime.v1.Row)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::greptime::v1::Field > fields_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greptime_2fv1_2frow_2eproto;
};
// -------------------------------------------------------------------

class Field final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greptime.v1.Field) */ {
 public:
  inline Field() : Field(nullptr) {}
  ~Field() override;
  explicit PROTOBUF_CONSTEXPR Field(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Field(const Field& from);
  Field(Field&& from) noexcept
    : Field() {
    *this = ::std::move(from);
  }

  inline Field& operator=(const Field& from) {
    CopyFrom(from);
    return *this;
  }
  inline Field& operator=(Field&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Field& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kI8Value = 1,
    kI16Value = 2,
    kI32Value = 3,
    kI64Value = 4,
    kU8Value = 5,
    kU16Value = 6,
    kU32Value = 7,
    kU64Value = 8,
    kF32Value = 9,
    kF64Value = 10,
    kBoolValue = 11,
    kBinaryValue = 12,
    kStringValue = 13,
    kDateValue = 14,
    kDatetimeValue = 15,
    kTsSecondValue = 16,
    kTsMillisecondValue = 17,
    kTsMicrosecondValue = 18,
    kTsNanosecondValue = 19,
    kTimeSecondValue = 20,
    kTimeMillisecondValue = 21,
    kTimeMicrosecondValue = 22,
    kTimeNanosecondValue = 23,
    VALUE_NOT_SET = 0,
  };

  static inline const Field* internal_default_instance() {
    return reinterpret_cast<const Field*>(
               &_Field_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Field& a, Field& b) {
    a.Swap(&b);
  }
  inline void Swap(Field* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Field* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Field* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Field>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Field& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Field& from) {
    Field::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Field* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greptime.v1.Field";
  }
  protected:
  explicit Field(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kI8ValueFieldNumber = 1,
    kI16ValueFieldNumber = 2,
    kI32ValueFieldNumber = 3,
    kI64ValueFieldNumber = 4,
    kU8ValueFieldNumber = 5,
    kU16ValueFieldNumber = 6,
    kU32ValueFieldNumber = 7,
    kU64ValueFieldNumber = 8,
    kF32ValueFieldNumber = 9,
    kF64ValueFieldNumber = 10,
    kBoolValueFieldNumber = 11,
    kBinaryValueFieldNumber = 12,
    kStringValueFieldNumber = 13,
    kDateValueFieldNumber = 14,
    kDatetimeValueFieldNumber = 15,
    kTsSecondValueFieldNumber = 16,
    kTsMillisecondValueFieldNumber = 17,
    kTsMicrosecondValueFieldNumber = 18,
    kTsNanosecondValueFieldNumber = 19,
    kTimeSecondValueFieldNumber = 20,
    kTimeMillisecondValueFieldNumber = 21,
    kTimeMicrosecondValueFieldNumber = 22,
    kTimeNanosecondValueFieldNumber = 23,
  };
  // int32 i8_value = 1;
  bool has_i8_value() const;
  private:
  bool _internal_has_i8_value() const;
  public:
  void clear_i8_value();
  int32_t i8_value() const;
  void set_i8_value(int32_t value);
  private:
  int32_t _internal_i8_value() const;
  void _internal_set_i8_value(int32_t value);
  public:

  // int32 i16_value = 2;
  bool has_i16_value() const;
  private:
  bool _internal_has_i16_value() const;
  public:
  void clear_i16_value();
  int32_t i16_value() const;
  void set_i16_value(int32_t value);
  private:
  int32_t _internal_i16_value() const;
  void _internal_set_i16_value(int32_t value);
  public:

  // int32 i32_value = 3;
  bool has_i32_value() const;
  private:
  bool _internal_has_i32_value() const;
  public:
  void clear_i32_value();
  int32_t i32_value() const;
  void set_i32_value(int32_t value);
  private:
  int32_t _internal_i32_value() const;
  void _internal_set_i32_value(int32_t value);
  public:

  // int64 i64_value = 4;
  bool has_i64_value() const;
  private:
  bool _internal_has_i64_value() const;
  public:
  void clear_i64_value();
  int64_t i64_value() const;
  void set_i64_value(int64_t value);
  private:
  int64_t _internal_i64_value() const;
  void _internal_set_i64_value(int64_t value);
  public:

  // uint32 u8_value = 5;
  bool has_u8_value() const;
  private:
  bool _internal_has_u8_value() const;
  public:
  void clear_u8_value();
  uint32_t u8_value() const;
  void set_u8_value(uint32_t value);
  private:
  uint32_t _internal_u8_value() const;
  void _internal_set_u8_value(uint32_t value);
  public:

  // uint32 u16_value = 6;
  bool has_u16_value() const;
  private:
  bool _internal_has_u16_value() const;
  public:
  void clear_u16_value();
  uint32_t u16_value() const;
  void set_u16_value(uint32_t value);
  private:
  uint32_t _internal_u16_value() const;
  void _internal_set_u16_value(uint32_t value);
  public:

  // uint32 u32_value = 7;
  bool has_u32_value() const;
  private:
  bool _internal_has_u32_value() const;
  public:
  void clear_u32_value();
  uint32_t u32_value() const;
  void set_u32_value(uint32_t value);
  private:
  uint32_t _internal_u32_value() const;
  void _internal_set_u32_value(uint32_t value);
  public:

  // uint64 u64_value = 8;
  bool has_u64_value() const;
  private:
  bool _internal_has_u64_value() const;
  public:
  void clear_u64_value();
  uint64_t u64_value() const;
  void set_u64_value(uint64_t value);
  private:
  uint64_t _internal_u64_value() const;
  void _internal_set_u64_value(uint64_t value);
  public:

  // float f32_value = 9;
  bool has_f32_value() const;
  private:
  bool _internal_has_f32_value() const;
  public:
  void clear_f32_value();
  float f32_value() const;
  void set_f32_value(float value);
  private:
  float _internal_f32_value() const;
  void _internal_set_f32_value(float value);
  public:

  // double f64_value = 10;
  bool has_f64_value() const;
  private:
  bool _internal_has_f64_value() const;
  public:
  void clear_f64_value();
  double f64_value() const;
  void set_f64_value(double value);
  private:
  double _internal_f64_value() const;
  void _internal_set_f64_value(double value);
  public:

  // bool bool_value = 11;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // bytes binary_value = 12;
  bool has_binary_value() const;
  private:
  bool _internal_has_binary_value() const;
  public:
  void clear_binary_value();
  const std::string& binary_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_binary_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_binary_value();
  PROTOBUF_NODISCARD std::string* release_binary_value();
  void set_allocated_binary_value(std::string* binary_value);
  private:
  const std::string& _internal_binary_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_binary_value(const std::string& value);
  std::string* _internal_mutable_binary_value();
  public:

  // string string_value = 13;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // int32 date_value = 14;
  bool has_date_value() const;
  private:
  bool _internal_has_date_value() const;
  public:
  void clear_date_value();
  int32_t date_value() const;
  void set_date_value(int32_t value);
  private:
  int32_t _internal_date_value() const;
  void _internal_set_date_value(int32_t value);
  public:

  // int64 datetime_value = 15;
  bool has_datetime_value() const;
  private:
  bool _internal_has_datetime_value() const;
  public:
  void clear_datetime_value();
  int64_t datetime_value() const;
  void set_datetime_value(int64_t value);
  private:
  int64_t _internal_datetime_value() const;
  void _internal_set_datetime_value(int64_t value);
  public:

  // int64 ts_second_value = 16;
  bool has_ts_second_value() const;
  private:
  bool _internal_has_ts_second_value() const;
  public:
  void clear_ts_second_value();
  int64_t ts_second_value() const;
  void set_ts_second_value(int64_t value);
  private:
  int64_t _internal_ts_second_value() const;
  void _internal_set_ts_second_value(int64_t value);
  public:

  // int64 ts_millisecond_value = 17;
  bool has_ts_millisecond_value() const;
  private:
  bool _internal_has_ts_millisecond_value() const;
  public:
  void clear_ts_millisecond_value();
  int64_t ts_millisecond_value() const;
  void set_ts_millisecond_value(int64_t value);
  private:
  int64_t _internal_ts_millisecond_value() const;
  void _internal_set_ts_millisecond_value(int64_t value);
  public:

  // int64 ts_microsecond_value = 18;
  bool has_ts_microsecond_value() const;
  private:
  bool _internal_has_ts_microsecond_value() const;
  public:
  void clear_ts_microsecond_value();
  int64_t ts_microsecond_value() const;
  void set_ts_microsecond_value(int64_t value);
  private:
  int64_t _internal_ts_microsecond_value() const;
  void _internal_set_ts_microsecond_value(int64_t value);
  public:

  // int64 ts_nanosecond_value = 19;
  bool has_ts_nanosecond_value() const;
  private:
  bool _internal_has_ts_nanosecond_value() const;
  public:
  void clear_ts_nanosecond_value();
  int64_t ts_nanosecond_value() const;
  void set_ts_nanosecond_value(int64_t value);
  private:
  int64_t _internal_ts_nanosecond_value() const;
  void _internal_set_ts_nanosecond_value(int64_t value);
  public:

  // int64 time_second_value = 20;
  bool has_time_second_value() const;
  private:
  bool _internal_has_time_second_value() const;
  public:
  void clear_time_second_value();
  int64_t time_second_value() const;
  void set_time_second_value(int64_t value);
  private:
  int64_t _internal_time_second_value() const;
  void _internal_set_time_second_value(int64_t value);
  public:

  // int64 time_millisecond_value = 21;
  bool has_time_millisecond_value() const;
  private:
  bool _internal_has_time_millisecond_value() const;
  public:
  void clear_time_millisecond_value();
  int64_t time_millisecond_value() const;
  void set_time_millisecond_value(int64_t value);
  private:
  int64_t _internal_time_millisecond_value() const;
  void _internal_set_time_millisecond_value(int64_t value);
  public:

  // int64 time_microsecond_value = 22;
  bool has_time_microsecond_value() const;
  private:
  bool _internal_has_time_microsecond_value() const;
  public:
  void clear_time_microsecond_value();
  int64_t time_microsecond_value() const;
  void set_time_microsecond_value(int64_t value);
  private:
  int64_t _internal_time_microsecond_value() const;
  void _internal_set_time_microsecond_value(int64_t value);
  public:

  // int64 time_nanosecond_value = 23;
  bool has_time_nanosecond_value() const;
  private:
  bool _internal_has_time_nanosecond_value() const;
  public:
  void clear_time_nanosecond_value();
  int64_t time_nanosecond_value() const;
  void set_time_nanosecond_value(int64_t value);
  private:
  int64_t _internal_time_nanosecond_value() const;
  void _internal_set_time_nanosecond_value(int64_t value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:greptime.v1.Field)
 private:
  class _Internal;
  void set_has_i8_value();
  void set_has_i16_value();
  void set_has_i32_value();
  void set_has_i64_value();
  void set_has_u8_value();
  void set_has_u16_value();
  void set_has_u32_value();
  void set_has_u64_value();
  void set_has_f32_value();
  void set_has_f64_value();
  void set_has_bool_value();
  void set_has_binary_value();
  void set_has_string_value();
  void set_has_date_value();
  void set_has_datetime_value();
  void set_has_ts_second_value();
  void set_has_ts_millisecond_value();
  void set_has_ts_microsecond_value();
  void set_has_ts_nanosecond_value();
  void set_has_time_second_value();
  void set_has_time_millisecond_value();
  void set_has_time_microsecond_value();
  void set_has_time_nanosecond_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int32_t i8_value_;
      int32_t i16_value_;
      int32_t i32_value_;
      int64_t i64_value_;
      uint32_t u8_value_;
      uint32_t u16_value_;
      uint32_t u32_value_;
      uint64_t u64_value_;
      float f32_value_;
      double f64_value_;
      bool bool_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binary_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
      int32_t date_value_;
      int64_t datetime_value_;
      int64_t ts_second_value_;
      int64_t ts_millisecond_value_;
      int64_t ts_microsecond_value_;
      int64_t ts_nanosecond_value_;
      int64_t time_second_value_;
      int64_t time_millisecond_value_;
      int64_t time_microsecond_value_;
      int64_t time_nanosecond_value_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greptime_2fv1_2frow_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Rows

// repeated .greptime.v1.ColumnSchema schema = 1;
inline int Rows::_internal_schema_size() const {
  return _impl_.schema_.size();
}
inline int Rows::schema_size() const {
  return _internal_schema_size();
}
inline void Rows::clear_schema() {
  _impl_.schema_.Clear();
}
inline ::greptime::v1::ColumnSchema* Rows::mutable_schema(int index) {
  // @@protoc_insertion_point(field_mutable:greptime.v1.Rows.schema)
  return _impl_.schema_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::greptime::v1::ColumnSchema >*
Rows::mutable_schema() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Rows.schema)
  return &_impl_.schema_;
}
inline const ::greptime::v1::ColumnSchema& Rows::_internal_schema(int index) const {
  return _impl_.schema_.Get(index);
}
inline const ::greptime::v1::ColumnSchema& Rows::schema(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Rows.schema)
  return _internal_schema(index);
}
inline ::greptime::v1::ColumnSchema* Rows::_internal_add_schema() {
  return _impl_.schema_.Add();
}
inline ::greptime::v1::ColumnSchema* Rows::add_schema() {
  ::greptime::v1::ColumnSchema* _add = _internal_add_schema();
  // @@protoc_insertion_point(field_add:greptime.v1.Rows.schema)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::greptime::v1::ColumnSchema >&
Rows::schema() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Rows.schema)
  return _impl_.schema_;
}

// repeated .greptime.v1.Row rows = 2;
inline int Rows::_internal_rows_size() const {
  return _impl_.rows_.size();
}
inline int Rows::rows_size() const {
  return _internal_rows_size();
}
inline void Rows::clear_rows() {
  _impl_.rows_.Clear();
}
inline ::greptime::v1::Row* Rows::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:greptime.v1.Rows.rows)
  return _impl_.rows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::greptime::v1::Row >*
Rows::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Rows.rows)
  return &_impl_.rows_;
}
inline const ::greptime::v1::Row& Rows::_internal_rows(int index) const {
  return _impl_.rows_.Get(index);
}
inline const ::greptime::v1::Row& Rows::rows(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Rows.rows)
  return _internal_rows(index);
}
inline ::greptime::v1::Row* Rows::_internal_add_rows() {
  return _impl_.rows_.Add();
}
inline ::greptime::v1::Row* Rows::add_rows() {
  ::greptime::v1::Row* _add = _internal_add_rows();
  // @@protoc_insertion_point(field_add:greptime.v1.Rows.rows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::greptime::v1::Row >&
Rows::rows() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Rows.rows)
  return _impl_.rows_;
}

// -------------------------------------------------------------------

// ColumnSchema

// string column_name = 1;
inline void ColumnSchema::clear_column_name() {
  _impl_.column_name_.ClearToEmpty();
}
inline const std::string& ColumnSchema::column_name() const {
  // @@protoc_insertion_point(field_get:greptime.v1.ColumnSchema.column_name)
  return _internal_column_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ColumnSchema::set_column_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.column_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.ColumnSchema.column_name)
}
inline std::string* ColumnSchema::mutable_column_name() {
  std::string* _s = _internal_mutable_column_name();
  // @@protoc_insertion_point(field_mutable:greptime.v1.ColumnSchema.column_name)
  return _s;
}
inline const std::string& ColumnSchema::_internal_column_name() const {
  return _impl_.column_name_.Get();
}
inline void ColumnSchema::_internal_set_column_name(const std::string& value) {
  
  _impl_.column_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ColumnSchema::_internal_mutable_column_name() {
  
  return _impl_.column_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ColumnSchema::release_column_name() {
  // @@protoc_insertion_point(field_release:greptime.v1.ColumnSchema.column_name)
  return _impl_.column_name_.Release();
}
inline void ColumnSchema::set_allocated_column_name(std::string* column_name) {
  if (column_name != nullptr) {
    
  } else {
    
  }
  _impl_.column_name_.SetAllocated(column_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.column_name_.IsDefault()) {
    _impl_.column_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.ColumnSchema.column_name)
}

// .greptime.v1.ColumnDataType datatype = 2;
inline void ColumnSchema::clear_datatype() {
  _impl_.datatype_ = 0;
}
inline ::greptime::v1::ColumnDataType ColumnSchema::_internal_datatype() const {
  return static_cast< ::greptime::v1::ColumnDataType >(_impl_.datatype_);
}
inline ::greptime::v1::ColumnDataType ColumnSchema::datatype() const {
  // @@protoc_insertion_point(field_get:greptime.v1.ColumnSchema.datatype)
  return _internal_datatype();
}
inline void ColumnSchema::_internal_set_datatype(::greptime::v1::ColumnDataType value) {
  
  _impl_.datatype_ = value;
}
inline void ColumnSchema::set_datatype(::greptime::v1::ColumnDataType value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:greptime.v1.ColumnSchema.datatype)
}

// .greptime.v1.SemanticType semantic_type = 3;
inline void ColumnSchema::clear_semantic_type() {
  _impl_.semantic_type_ = 0;
}
inline ::greptime::v1::SemanticType ColumnSchema::_internal_semantic_type() const {
  return static_cast< ::greptime::v1::SemanticType >(_impl_.semantic_type_);
}
inline ::greptime::v1::SemanticType ColumnSchema::semantic_type() const {
  // @@protoc_insertion_point(field_get:greptime.v1.ColumnSchema.semantic_type)
  return _internal_semantic_type();
}
inline void ColumnSchema::_internal_set_semantic_type(::greptime::v1::SemanticType value) {
  
  _impl_.semantic_type_ = value;
}
inline void ColumnSchema::set_semantic_type(::greptime::v1::SemanticType value) {
  _internal_set_semantic_type(value);
  // @@protoc_insertion_point(field_set:greptime.v1.ColumnSchema.semantic_type)
}

// -------------------------------------------------------------------

// Row

// repeated .greptime.v1.Field fields = 1;
inline int Row::_internal_fields_size() const {
  return _impl_.fields_.size();
}
inline int Row::fields_size() const {
  return _internal_fields_size();
}
inline void Row::clear_fields() {
  _impl_.fields_.Clear();
}
inline ::greptime::v1::Field* Row::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:greptime.v1.Row.fields)
  return _impl_.fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::greptime::v1::Field >*
Row::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.Row.fields)
  return &_impl_.fields_;
}
inline const ::greptime::v1::Field& Row::_internal_fields(int index) const {
  return _impl_.fields_.Get(index);
}
inline const ::greptime::v1::Field& Row::fields(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.Row.fields)
  return _internal_fields(index);
}
inline ::greptime::v1::Field* Row::_internal_add_fields() {
  return _impl_.fields_.Add();
}
inline ::greptime::v1::Field* Row::add_fields() {
  ::greptime::v1::Field* _add = _internal_add_fields();
  // @@protoc_insertion_point(field_add:greptime.v1.Row.fields)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::greptime::v1::Field >&
Row::fields() const {
  // @@protoc_insertion_point(field_list:greptime.v1.Row.fields)
  return _impl_.fields_;
}

// -------------------------------------------------------------------

// Field

// int32 i8_value = 1;
inline bool Field::_internal_has_i8_value() const {
  return value_case() == kI8Value;
}
inline bool Field::has_i8_value() const {
  return _internal_has_i8_value();
}
inline void Field::set_has_i8_value() {
  _impl_._oneof_case_[0] = kI8Value;
}
inline void Field::clear_i8_value() {
  if (_internal_has_i8_value()) {
    _impl_.value_.i8_value_ = 0;
    clear_has_value();
  }
}
inline int32_t Field::_internal_i8_value() const {
  if (_internal_has_i8_value()) {
    return _impl_.value_.i8_value_;
  }
  return 0;
}
inline void Field::_internal_set_i8_value(int32_t value) {
  if (!_internal_has_i8_value()) {
    clear_value();
    set_has_i8_value();
  }
  _impl_.value_.i8_value_ = value;
}
inline int32_t Field::i8_value() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Field.i8_value)
  return _internal_i8_value();
}
inline void Field::set_i8_value(int32_t value) {
  _internal_set_i8_value(value);
  // @@protoc_insertion_point(field_set:greptime.v1.Field.i8_value)
}

// int32 i16_value = 2;
inline bool Field::_internal_has_i16_value() const {
  return value_case() == kI16Value;
}
inline bool Field::has_i16_value() const {
  return _internal_has_i16_value();
}
inline void Field::set_has_i16_value() {
  _impl_._oneof_case_[0] = kI16Value;
}
inline void Field::clear_i16_value() {
  if (_internal_has_i16_value()) {
    _impl_.value_.i16_value_ = 0;
    clear_has_value();
  }
}
inline int32_t Field::_internal_i16_value() const {
  if (_internal_has_i16_value()) {
    return _impl_.value_.i16_value_;
  }
  return 0;
}
inline void Field::_internal_set_i16_value(int32_t value) {
  if (!_internal_has_i16_value()) {
    clear_value();
    set_has_i16_value();
  }
  _impl_.value_.i16_value_ = value;
}
inline int32_t Field::i16_value() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Field.i16_value)
  return _internal_i16_value();
}
inline void Field::set_i16_value(int32_t value) {
  _internal_set_i16_value(value);
  // @@protoc_insertion_point(field_set:greptime.v1.Field.i16_value)
}

// int32 i32_value = 3;
inline bool Field::_internal_has_i32_value() const {
  return value_case() == kI32Value;
}
inline bool Field::has_i32_value() const {
  return _internal_has_i32_value();
}
inline void Field::set_has_i32_value() {
  _impl_._oneof_case_[0] = kI32Value;
}
inline void Field::clear_i32_value() {
  if (_internal_has_i32_value()) {
    _impl_.value_.i32_value_ = 0;
    clear_has_value();
  }
}
inline int32_t Field::_internal_i32_value() const {
  if (_internal_has_i32_value()) {
    return _impl_.value_.i32_value_;
  }
  return 0;
}
inline void Field::_internal_set_i32_value(int32_t value) {
  if (!_internal_has_i32_value()) {
    clear_value();
    set_has_i32_value();
  }
  _impl_.value_.i32_value_ = value;
}
inline int32_t Field::i32_value() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Field.i32_value)
  return _internal_i32_value();
}
inline void Field::set_i32_value(int32_t value) {
  _internal_set_i32_value(value);
  // @@protoc_insertion_point(field_set:greptime.v1.Field.i32_value)
}

// int64 i64_value = 4;
inline bool Field::_internal_has_i64_value() const {
  return value_case() == kI64Value;
}
inline bool Field::has_i64_value() const {
  return _internal_has_i64_value();
}
inline void Field::set_has_i64_value() {
  _impl_._oneof_case_[0] = kI64Value;
}
inline void Field::clear_i64_value() {
  if (_internal_has_i64_value()) {
    _impl_.value_.i64_value_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t Field::_internal_i64_value() const {
  if (_internal_has_i64_value()) {
    return _impl_.value_.i64_value_;
  }
  return int64_t{0};
}
inline void Field::_internal_set_i64_value(int64_t value) {
  if (!_internal_has_i64_value()) {
    clear_value();
    set_has_i64_value();
  }
  _impl_.value_.i64_value_ = value;
}
inline int64_t Field::i64_value() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Field.i64_value)
  return _internal_i64_value();
}
inline void Field::set_i64_value(int64_t value) {
  _internal_set_i64_value(value);
  // @@protoc_insertion_point(field_set:greptime.v1.Field.i64_value)
}

// uint32 u8_value = 5;
inline bool Field::_internal_has_u8_value() const {
  return value_case() == kU8Value;
}
inline bool Field::has_u8_value() const {
  return _internal_has_u8_value();
}
inline void Field::set_has_u8_value() {
  _impl_._oneof_case_[0] = kU8Value;
}
inline void Field::clear_u8_value() {
  if (_internal_has_u8_value()) {
    _impl_.value_.u8_value_ = 0u;
    clear_has_value();
  }
}
inline uint32_t Field::_internal_u8_value() const {
  if (_internal_has_u8_value()) {
    return _impl_.value_.u8_value_;
  }
  return 0u;
}
inline void Field::_internal_set_u8_value(uint32_t value) {
  if (!_internal_has_u8_value()) {
    clear_value();
    set_has_u8_value();
  }
  _impl_.value_.u8_value_ = value;
}
inline uint32_t Field::u8_value() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Field.u8_value)
  return _internal_u8_value();
}
inline void Field::set_u8_value(uint32_t value) {
  _internal_set_u8_value(value);
  // @@protoc_insertion_point(field_set:greptime.v1.Field.u8_value)
}

// uint32 u16_value = 6;
inline bool Field::_internal_has_u16_value() const {
  return value_case() == kU16Value;
}
inline bool Field::has_u16_value() const {
  return _internal_has_u16_value();
}
inline void Field::set_has_u16_value() {
  _impl_._oneof_case_[0] = kU16Value;
}
inline void Field::clear_u16_value() {
  if (_internal_has_u16_value()) {
    _impl_.value_.u16_value_ = 0u;
    clear_has_value();
  }
}
inline uint32_t Field::_internal_u16_value() const {
  if (_internal_has_u16_value()) {
    return _impl_.value_.u16_value_;
  }
  return 0u;
}
inline void Field::_internal_set_u16_value(uint32_t value) {
  if (!_internal_has_u16_value()) {
    clear_value();
    set_has_u16_value();
  }
  _impl_.value_.u16_value_ = value;
}
inline uint32_t Field::u16_value() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Field.u16_value)
  return _internal_u16_value();
}
inline void Field::set_u16_value(uint32_t value) {
  _internal_set_u16_value(value);
  // @@protoc_insertion_point(field_set:greptime.v1.Field.u16_value)
}

// uint32 u32_value = 7;
inline bool Field::_internal_has_u32_value() const {
  return value_case() == kU32Value;
}
inline bool Field::has_u32_value() const {
  return _internal_has_u32_value();
}
inline void Field::set_has_u32_value() {
  _impl_._oneof_case_[0] = kU32Value;
}
inline void Field::clear_u32_value() {
  if (_internal_has_u32_value()) {
    _impl_.value_.u32_value_ = 0u;
    clear_has_value();
  }
}
inline uint32_t Field::_internal_u32_value() const {
  if (_internal_has_u32_value()) {
    return _impl_.value_.u32_value_;
  }
  return 0u;
}
inline void Field::_internal_set_u32_value(uint32_t value) {
  if (!_internal_has_u32_value()) {
    clear_value();
    set_has_u32_value();
  }
  _impl_.value_.u32_value_ = value;
}
inline uint32_t Field::u32_value() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Field.u32_value)
  return _internal_u32_value();
}
inline void Field::set_u32_value(uint32_t value) {
  _internal_set_u32_value(value);
  // @@protoc_insertion_point(field_set:greptime.v1.Field.u32_value)
}

// uint64 u64_value = 8;
inline bool Field::_internal_has_u64_value() const {
  return value_case() == kU64Value;
}
inline bool Field::has_u64_value() const {
  return _internal_has_u64_value();
}
inline void Field::set_has_u64_value() {
  _impl_._oneof_case_[0] = kU64Value;
}
inline void Field::clear_u64_value() {
  if (_internal_has_u64_value()) {
    _impl_.value_.u64_value_ = uint64_t{0u};
    clear_has_value();
  }
}
inline uint64_t Field::_internal_u64_value() const {
  if (_internal_has_u64_value()) {
    return _impl_.value_.u64_value_;
  }
  return uint64_t{0u};
}
inline void Field::_internal_set_u64_value(uint64_t value) {
  if (!_internal_has_u64_value()) {
    clear_value();
    set_has_u64_value();
  }
  _impl_.value_.u64_value_ = value;
}
inline uint64_t Field::u64_value() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Field.u64_value)
  return _internal_u64_value();
}
inline void Field::set_u64_value(uint64_t value) {
  _internal_set_u64_value(value);
  // @@protoc_insertion_point(field_set:greptime.v1.Field.u64_value)
}

// float f32_value = 9;
inline bool Field::_internal_has_f32_value() const {
  return value_case() == kF32Value;
}
inline bool Field::has_f32_value() const {
  return _internal_has_f32_value();
}
inline void Field::set_has_f32_value() {
  _impl_._oneof_case_[0] = kF32Value;
}
inline void Field::clear_f32_value() {
  if (_internal_has_f32_value()) {
    _impl_.value_.f32_value_ = 0;
    clear_has_value();
  }
}
inline float Field::_internal_f32_value() const {
  if (_internal_has_f32_value()) {
    return _impl_.value_.f32_value_;
  }
  return 0;
}
inline void Field::_internal_set_f32_value(float value) {
  if (!_internal_has_f32_value()) {
    clear_value();
    set_has_f32_value();
  }
  _impl_.value_.f32_value_ = value;
}
inline float Field::f32_value() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Field.f32_value)
  return _internal_f32_value();
}
inline void Field::set_f32_value(float value) {
  _internal_set_f32_value(value);
  // @@protoc_insertion_point(field_set:greptime.v1.Field.f32_value)
}

// double f64_value = 10;
inline bool Field::_internal_has_f64_value() const {
  return value_case() == kF64Value;
}
inline bool Field::has_f64_value() const {
  return _internal_has_f64_value();
}
inline void Field::set_has_f64_value() {
  _impl_._oneof_case_[0] = kF64Value;
}
inline void Field::clear_f64_value() {
  if (_internal_has_f64_value()) {
    _impl_.value_.f64_value_ = 0;
    clear_has_value();
  }
}
inline double Field::_internal_f64_value() const {
  if (_internal_has_f64_value()) {
    return _impl_.value_.f64_value_;
  }
  return 0;
}
inline void Field::_internal_set_f64_value(double value) {
  if (!_internal_has_f64_value()) {
    clear_value();
    set_has_f64_value();
  }
  _impl_.value_.f64_value_ = value;
}
inline double Field::f64_value() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Field.f64_value)
  return _internal_f64_value();
}
inline void Field::set_f64_value(double value) {
  _internal_set_f64_value(value);
  // @@protoc_insertion_point(field_set:greptime.v1.Field.f64_value)
}

// bool bool_value = 11;
inline bool Field::_internal_has_bool_value() const {
  return value_case() == kBoolValue;
}
inline bool Field::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void Field::set_has_bool_value() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void Field::clear_bool_value() {
  if (_internal_has_bool_value()) {
    _impl_.value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool Field::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return _impl_.value_.bool_value_;
  }
  return false;
}
inline void Field::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  _impl_.value_.bool_value_ = value;
}
inline bool Field::bool_value() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Field.bool_value)
  return _internal_bool_value();
}
inline void Field::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:greptime.v1.Field.bool_value)
}

// bytes binary_value = 12;
inline bool Field::_internal_has_binary_value() const {
  return value_case() == kBinaryValue;
}
inline bool Field::has_binary_value() const {
  return _internal_has_binary_value();
}
inline void Field::set_has_binary_value() {
  _impl_._oneof_case_[0] = kBinaryValue;
}
inline void Field::clear_binary_value() {
  if (_internal_has_binary_value()) {
    _impl_.value_.binary_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& Field::binary_value() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Field.binary_value)
  return _internal_binary_value();
}
template <typename ArgT0, typename... ArgT>
inline void Field::set_binary_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_binary_value()) {
    clear_value();
    set_has_binary_value();
    _impl_.value_.binary_value_.InitDefault();
  }
  _impl_.value_.binary_value_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.Field.binary_value)
}
inline std::string* Field::mutable_binary_value() {
  std::string* _s = _internal_mutable_binary_value();
  // @@protoc_insertion_point(field_mutable:greptime.v1.Field.binary_value)
  return _s;
}
inline const std::string& Field::_internal_binary_value() const {
  if (_internal_has_binary_value()) {
    return _impl_.value_.binary_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Field::_internal_set_binary_value(const std::string& value) {
  if (!_internal_has_binary_value()) {
    clear_value();
    set_has_binary_value();
    _impl_.value_.binary_value_.InitDefault();
  }
  _impl_.value_.binary_value_.Set(value, GetArenaForAllocation());
}
inline std::string* Field::_internal_mutable_binary_value() {
  if (!_internal_has_binary_value()) {
    clear_value();
    set_has_binary_value();
    _impl_.value_.binary_value_.InitDefault();
  }
  return _impl_.value_.binary_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* Field::release_binary_value() {
  // @@protoc_insertion_point(field_release:greptime.v1.Field.binary_value)
  if (_internal_has_binary_value()) {
    clear_has_value();
    return _impl_.value_.binary_value_.Release();
  } else {
    return nullptr;
  }
}
inline void Field::set_allocated_binary_value(std::string* binary_value) {
  if (has_value()) {
    clear_value();
  }
  if (binary_value != nullptr) {
    set_has_binary_value();
    _impl_.value_.binary_value_.InitAllocated(binary_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.Field.binary_value)
}

// string string_value = 13;
inline bool Field::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline bool Field::has_string_value() const {
  return _internal_has_string_value();
}
inline void Field::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void Field::clear_string_value() {
  if (_internal_has_string_value()) {
    _impl_.value_.string_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& Field::string_value() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Field.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void Field::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.Field.string_value)
}
inline std::string* Field::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:greptime.v1.Field.string_value)
  return _s;
}
inline const std::string& Field::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return _impl_.value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Field::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* Field::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  return _impl_.value_.string_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* Field::release_string_value() {
  // @@protoc_insertion_point(field_release:greptime.v1.Field.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    return _impl_.value_.string_value_.Release();
  } else {
    return nullptr;
  }
}
inline void Field::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    _impl_.value_.string_value_.InitAllocated(string_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.Field.string_value)
}

// int32 date_value = 14;
inline bool Field::_internal_has_date_value() const {
  return value_case() == kDateValue;
}
inline bool Field::has_date_value() const {
  return _internal_has_date_value();
}
inline void Field::set_has_date_value() {
  _impl_._oneof_case_[0] = kDateValue;
}
inline void Field::clear_date_value() {
  if (_internal_has_date_value()) {
    _impl_.value_.date_value_ = 0;
    clear_has_value();
  }
}
inline int32_t Field::_internal_date_value() const {
  if (_internal_has_date_value()) {
    return _impl_.value_.date_value_;
  }
  return 0;
}
inline void Field::_internal_set_date_value(int32_t value) {
  if (!_internal_has_date_value()) {
    clear_value();
    set_has_date_value();
  }
  _impl_.value_.date_value_ = value;
}
inline int32_t Field::date_value() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Field.date_value)
  return _internal_date_value();
}
inline void Field::set_date_value(int32_t value) {
  _internal_set_date_value(value);
  // @@protoc_insertion_point(field_set:greptime.v1.Field.date_value)
}

// int64 datetime_value = 15;
inline bool Field::_internal_has_datetime_value() const {
  return value_case() == kDatetimeValue;
}
inline bool Field::has_datetime_value() const {
  return _internal_has_datetime_value();
}
inline void Field::set_has_datetime_value() {
  _impl_._oneof_case_[0] = kDatetimeValue;
}
inline void Field::clear_datetime_value() {
  if (_internal_has_datetime_value()) {
    _impl_.value_.datetime_value_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t Field::_internal_datetime_value() const {
  if (_internal_has_datetime_value()) {
    return _impl_.value_.datetime_value_;
  }
  return int64_t{0};
}
inline void Field::_internal_set_datetime_value(int64_t value) {
  if (!_internal_has_datetime_value()) {
    clear_value();
    set_has_datetime_value();
  }
  _impl_.value_.datetime_value_ = value;
}
inline int64_t Field::datetime_value() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Field.datetime_value)
  return _internal_datetime_value();
}
inline void Field::set_datetime_value(int64_t value) {
  _internal_set_datetime_value(value);
  // @@protoc_insertion_point(field_set:greptime.v1.Field.datetime_value)
}

// int64 ts_second_value = 16;
inline bool Field::_internal_has_ts_second_value() const {
  return value_case() == kTsSecondValue;
}
inline bool Field::has_ts_second_value() const {
  return _internal_has_ts_second_value();
}
inline void Field::set_has_ts_second_value() {
  _impl_._oneof_case_[0] = kTsSecondValue;
}
inline void Field::clear_ts_second_value() {
  if (_internal_has_ts_second_value()) {
    _impl_.value_.ts_second_value_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t Field::_internal_ts_second_value() const {
  if (_internal_has_ts_second_value()) {
    return _impl_.value_.ts_second_value_;
  }
  return int64_t{0};
}
inline void Field::_internal_set_ts_second_value(int64_t value) {
  if (!_internal_has_ts_second_value()) {
    clear_value();
    set_has_ts_second_value();
  }
  _impl_.value_.ts_second_value_ = value;
}
inline int64_t Field::ts_second_value() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Field.ts_second_value)
  return _internal_ts_second_value();
}
inline void Field::set_ts_second_value(int64_t value) {
  _internal_set_ts_second_value(value);
  // @@protoc_insertion_point(field_set:greptime.v1.Field.ts_second_value)
}

// int64 ts_millisecond_value = 17;
inline bool Field::_internal_has_ts_millisecond_value() const {
  return value_case() == kTsMillisecondValue;
}
inline bool Field::has_ts_millisecond_value() const {
  return _internal_has_ts_millisecond_value();
}
inline void Field::set_has_ts_millisecond_value() {
  _impl_._oneof_case_[0] = kTsMillisecondValue;
}
inline void Field::clear_ts_millisecond_value() {
  if (_internal_has_ts_millisecond_value()) {
    _impl_.value_.ts_millisecond_value_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t Field::_internal_ts_millisecond_value() const {
  if (_internal_has_ts_millisecond_value()) {
    return _impl_.value_.ts_millisecond_value_;
  }
  return int64_t{0};
}
inline void Field::_internal_set_ts_millisecond_value(int64_t value) {
  if (!_internal_has_ts_millisecond_value()) {
    clear_value();
    set_has_ts_millisecond_value();
  }
  _impl_.value_.ts_millisecond_value_ = value;
}
inline int64_t Field::ts_millisecond_value() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Field.ts_millisecond_value)
  return _internal_ts_millisecond_value();
}
inline void Field::set_ts_millisecond_value(int64_t value) {
  _internal_set_ts_millisecond_value(value);
  // @@protoc_insertion_point(field_set:greptime.v1.Field.ts_millisecond_value)
}

// int64 ts_microsecond_value = 18;
inline bool Field::_internal_has_ts_microsecond_value() const {
  return value_case() == kTsMicrosecondValue;
}
inline bool Field::has_ts_microsecond_value() const {
  return _internal_has_ts_microsecond_value();
}
inline void Field::set_has_ts_microsecond_value() {
  _impl_._oneof_case_[0] = kTsMicrosecondValue;
}
inline void Field::clear_ts_microsecond_value() {
  if (_internal_has_ts_microsecond_value()) {
    _impl_.value_.ts_microsecond_value_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t Field::_internal_ts_microsecond_value() const {
  if (_internal_has_ts_microsecond_value()) {
    return _impl_.value_.ts_microsecond_value_;
  }
  return int64_t{0};
}
inline void Field::_internal_set_ts_microsecond_value(int64_t value) {
  if (!_internal_has_ts_microsecond_value()) {
    clear_value();
    set_has_ts_microsecond_value();
  }
  _impl_.value_.ts_microsecond_value_ = value;
}
inline int64_t Field::ts_microsecond_value() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Field.ts_microsecond_value)
  return _internal_ts_microsecond_value();
}
inline void Field::set_ts_microsecond_value(int64_t value) {
  _internal_set_ts_microsecond_value(value);
  // @@protoc_insertion_point(field_set:greptime.v1.Field.ts_microsecond_value)
}

// int64 ts_nanosecond_value = 19;
inline bool Field::_internal_has_ts_nanosecond_value() const {
  return value_case() == kTsNanosecondValue;
}
inline bool Field::has_ts_nanosecond_value() const {
  return _internal_has_ts_nanosecond_value();
}
inline void Field::set_has_ts_nanosecond_value() {
  _impl_._oneof_case_[0] = kTsNanosecondValue;
}
inline void Field::clear_ts_nanosecond_value() {
  if (_internal_has_ts_nanosecond_value()) {
    _impl_.value_.ts_nanosecond_value_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t Field::_internal_ts_nanosecond_value() const {
  if (_internal_has_ts_nanosecond_value()) {
    return _impl_.value_.ts_nanosecond_value_;
  }
  return int64_t{0};
}
inline void Field::_internal_set_ts_nanosecond_value(int64_t value) {
  if (!_internal_has_ts_nanosecond_value()) {
    clear_value();
    set_has_ts_nanosecond_value();
  }
  _impl_.value_.ts_nanosecond_value_ = value;
}
inline int64_t Field::ts_nanosecond_value() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Field.ts_nanosecond_value)
  return _internal_ts_nanosecond_value();
}
inline void Field::set_ts_nanosecond_value(int64_t value) {
  _internal_set_ts_nanosecond_value(value);
  // @@protoc_insertion_point(field_set:greptime.v1.Field.ts_nanosecond_value)
}

// int64 time_second_value = 20;
inline bool Field::_internal_has_time_second_value() const {
  return value_case() == kTimeSecondValue;
}
inline bool Field::has_time_second_value() const {
  return _internal_has_time_second_value();
}
inline void Field::set_has_time_second_value() {
  _impl_._oneof_case_[0] = kTimeSecondValue;
}
inline void Field::clear_time_second_value() {
  if (_internal_has_time_second_value()) {
    _impl_.value_.time_second_value_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t Field::_internal_time_second_value() const {
  if (_internal_has_time_second_value()) {
    return _impl_.value_.time_second_value_;
  }
  return int64_t{0};
}
inline void Field::_internal_set_time_second_value(int64_t value) {
  if (!_internal_has_time_second_value()) {
    clear_value();
    set_has_time_second_value();
  }
  _impl_.value_.time_second_value_ = value;
}
inline int64_t Field::time_second_value() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Field.time_second_value)
  return _internal_time_second_value();
}
inline void Field::set_time_second_value(int64_t value) {
  _internal_set_time_second_value(value);
  // @@protoc_insertion_point(field_set:greptime.v1.Field.time_second_value)
}

// int64 time_millisecond_value = 21;
inline bool Field::_internal_has_time_millisecond_value() const {
  return value_case() == kTimeMillisecondValue;
}
inline bool Field::has_time_millisecond_value() const {
  return _internal_has_time_millisecond_value();
}
inline void Field::set_has_time_millisecond_value() {
  _impl_._oneof_case_[0] = kTimeMillisecondValue;
}
inline void Field::clear_time_millisecond_value() {
  if (_internal_has_time_millisecond_value()) {
    _impl_.value_.time_millisecond_value_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t Field::_internal_time_millisecond_value() const {
  if (_internal_has_time_millisecond_value()) {
    return _impl_.value_.time_millisecond_value_;
  }
  return int64_t{0};
}
inline void Field::_internal_set_time_millisecond_value(int64_t value) {
  if (!_internal_has_time_millisecond_value()) {
    clear_value();
    set_has_time_millisecond_value();
  }
  _impl_.value_.time_millisecond_value_ = value;
}
inline int64_t Field::time_millisecond_value() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Field.time_millisecond_value)
  return _internal_time_millisecond_value();
}
inline void Field::set_time_millisecond_value(int64_t value) {
  _internal_set_time_millisecond_value(value);
  // @@protoc_insertion_point(field_set:greptime.v1.Field.time_millisecond_value)
}

// int64 time_microsecond_value = 22;
inline bool Field::_internal_has_time_microsecond_value() const {
  return value_case() == kTimeMicrosecondValue;
}
inline bool Field::has_time_microsecond_value() const {
  return _internal_has_time_microsecond_value();
}
inline void Field::set_has_time_microsecond_value() {
  _impl_._oneof_case_[0] = kTimeMicrosecondValue;
}
inline void Field::clear_time_microsecond_value() {
  if (_internal_has_time_microsecond_value()) {
    _impl_.value_.time_microsecond_value_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t Field::_internal_time_microsecond_value() const {
  if (_internal_has_time_microsecond_value()) {
    return _impl_.value_.time_microsecond_value_;
  }
  return int64_t{0};
}
inline void Field::_internal_set_time_microsecond_value(int64_t value) {
  if (!_internal_has_time_microsecond_value()) {
    clear_value();
    set_has_time_microsecond_value();
  }
  _impl_.value_.time_microsecond_value_ = value;
}
inline int64_t Field::time_microsecond_value() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Field.time_microsecond_value)
  return _internal_time_microsecond_value();
}
inline void Field::set_time_microsecond_value(int64_t value) {
  _internal_set_time_microsecond_value(value);
  // @@protoc_insertion_point(field_set:greptime.v1.Field.time_microsecond_value)
}

// int64 time_nanosecond_value = 23;
inline bool Field::_internal_has_time_nanosecond_value() const {
  return value_case() == kTimeNanosecondValue;
}
inline bool Field::has_time_nanosecond_value() const {
  return _internal_has_time_nanosecond_value();
}
inline void Field::set_has_time_nanosecond_value() {
  _impl_._oneof_case_[0] = kTimeNanosecondValue;
}
inline void Field::clear_time_nanosecond_value() {
  if (_internal_has_time_nanosecond_value()) {
    _impl_.value_.time_nanosecond_value_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t Field::_internal_time_nanosecond_value() const {
  if (_internal_has_time_nanosecond_value()) {
    return _impl_.value_.time_nanosecond_value_;
  }
  return int64_t{0};
}
inline void Field::_internal_set_time_nanosecond_value(int64_t value) {
  if (!_internal_has_time_nanosecond_value()) {
    clear_value();
    set_has_time_nanosecond_value();
  }
  _impl_.value_.time_nanosecond_value_ = value;
}
inline int64_t Field::time_nanosecond_value() const {
  // @@protoc_insertion_point(field_get:greptime.v1.Field.time_nanosecond_value)
  return _internal_time_nanosecond_value();
}
inline void Field::set_time_nanosecond_value(int64_t value) {
  _internal_set_time_nanosecond_value(value);
  // @@protoc_insertion_point(field_set:greptime.v1.Field.time_nanosecond_value)
}

inline bool Field::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Field::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline Field::ValueCase Field::value_case() const {
  return Field::ValueCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace greptime

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2frow_2eproto
