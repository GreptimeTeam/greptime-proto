// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: greptime/v1/meta/ddl.proto

#include "greptime/v1/meta/ddl.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace greptime {
namespace v1 {
namespace meta {
PROTOBUF_CONSTEXPR CreateTableTask::CreateTableTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partitions_)*/{}
  , /*decltype(_impl_.table_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.create_table_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateTableTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateTableTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateTableTaskDefaultTypeInternal() {}
  union {
    CreateTableTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateTableTaskDefaultTypeInternal _CreateTableTask_default_instance_;
PROTOBUF_CONSTEXPR DropTableTask::DropTableTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.drop_table_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropTableTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropTableTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropTableTaskDefaultTypeInternal() {}
  union {
    DropTableTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropTableTaskDefaultTypeInternal _DropTableTask_default_instance_;
PROTOBUF_CONSTEXPR AlterTableTask::AlterTableTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.alter_table_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AlterTableTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlterTableTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlterTableTaskDefaultTypeInternal() {}
  union {
    AlterTableTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlterTableTaskDefaultTypeInternal _AlterTableTask_default_instance_;
PROTOBUF_CONSTEXPR SubmitDdlTaskRequest::SubmitDdlTaskRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.task_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SubmitDdlTaskRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubmitDdlTaskRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubmitDdlTaskRequestDefaultTypeInternal() {}
  union {
    SubmitDdlTaskRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubmitDdlTaskRequestDefaultTypeInternal _SubmitDdlTaskRequest_default_instance_;
PROTOBUF_CONSTEXPR SubmitDdlTaskResponse::SubmitDdlTaskResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.table_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubmitDdlTaskResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubmitDdlTaskResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubmitDdlTaskResponseDefaultTypeInternal() {}
  union {
    SubmitDdlTaskResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubmitDdlTaskResponseDefaultTypeInternal _SubmitDdlTaskResponse_default_instance_;
}  // namespace meta
}  // namespace v1
}  // namespace greptime
static ::_pb::Metadata file_level_metadata_greptime_2fv1_2fmeta_2fddl_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_greptime_2fv1_2fmeta_2fddl_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_greptime_2fv1_2fmeta_2fddl_2eproto = nullptr;

const uint32_t TableStruct_greptime_2fv1_2fmeta_2fddl_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::CreateTableTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::CreateTableTask, _impl_.create_table_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::CreateTableTask, _impl_.partitions_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::CreateTableTask, _impl_.table_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::DropTableTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::DropTableTask, _impl_.drop_table_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::AlterTableTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::AlterTableTask, _impl_.alter_table_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::SubmitDdlTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::SubmitDdlTaskRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::SubmitDdlTaskRequest, _impl_.header_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::SubmitDdlTaskRequest, _impl_.task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::SubmitDdlTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::SubmitDdlTaskResponse, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::SubmitDdlTaskResponse, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::SubmitDdlTaskResponse, _impl_.table_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::greptime::v1::meta::CreateTableTask)},
  { 9, -1, -1, sizeof(::greptime::v1::meta::DropTableTask)},
  { 16, -1, -1, sizeof(::greptime::v1::meta::AlterTableTask)},
  { 23, -1, -1, sizeof(::greptime::v1::meta::SubmitDdlTaskRequest)},
  { 34, -1, -1, sizeof(::greptime::v1::meta::SubmitDdlTaskResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::greptime::v1::meta::_CreateTableTask_default_instance_._instance,
  &::greptime::v1::meta::_DropTableTask_default_instance_._instance,
  &::greptime::v1::meta::_AlterTableTask_default_instance_._instance,
  &::greptime::v1::meta::_SubmitDdlTaskRequest_default_instance_._instance,
  &::greptime::v1::meta::_SubmitDdlTaskResponse_default_instance_._instance,
};

const char descriptor_table_protodef_greptime_2fv1_2fmeta_2fddl_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032greptime/v1/meta/ddl.proto\022\020greptime.v"
  "1.meta\032\035greptime/v1/meta/common.proto\032\034g"
  "reptime/v1/meta/route.proto\032\025greptime/v1"
  "/ddl.proto\"\212\001\n\017CreateTableTask\0222\n\014create"
  "_table\030\001 \001(\0132\034.greptime.v1.CreateTableEx"
  "pr\022/\n\npartitions\030\002 \003(\0132\033.greptime.v1.met"
  "a.Partition\022\022\n\ntable_info\030\003 \001(\014\"\?\n\rDropT"
  "ableTask\022.\n\ndrop_table\030\001 \001(\0132\032.greptime."
  "v1.DropTableExpr\"=\n\016AlterTableTask\022+\n\013al"
  "ter_table\030\001 \001(\0132\026.greptime.v1.AlterExpr\""
  "\211\002\n\024SubmitDdlTaskRequest\022/\n\006header\030\001 \001(\013"
  "2\037.greptime.v1.meta.RequestHeader\022>\n\021cre"
  "ate_table_task\030\002 \001(\0132!.greptime.v1.meta."
  "CreateTableTaskH\000\022:\n\017drop_table_task\030\003 \001"
  "(\0132\037.greptime.v1.meta.DropTableTaskH\000\022<\n"
  "\020alter_table_task\030\004 \001(\0132 .greptime.v1.me"
  "ta.AlterTableTaskH\000B\006\n\004task\"\203\001\n\025SubmitDd"
  "lTaskResponse\0220\n\006header\030\001 \001(\0132 .greptime"
  ".v1.meta.ResponseHeader\022\013\n\003key\030\002 \001(\014\022+\n\010"
  "table_id\030\004 \001(\0132\031.greptime.v1.meta.TableI"
  "d*#\n\013DdlTaskType\022\n\n\006Create\020\000\022\010\n\004Drop\020\0012k"
  "\n\007DdlTask\022`\n\rSubmitDdlTask\022&.greptime.v1"
  ".meta.SubmitDdlTaskRequest\032\'.greptime.v1"
  ".meta.SubmitDdlTaskResponseB<Z:github.co"
  "m/GreptimeTeam/greptime-proto/go/greptim"
  "e/v1/metab\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_deps[3] = {
  &::descriptor_table_greptime_2fv1_2fddl_2eproto,
  &::descriptor_table_greptime_2fv1_2fmeta_2fcommon_2eproto,
  &::descriptor_table_greptime_2fv1_2fmeta_2froute_2eproto,
};
static ::_pbi::once_flag descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto = {
    false, false, 1017, descriptor_table_protodef_greptime_2fv1_2fmeta_2fddl_2eproto,
    "greptime/v1/meta/ddl.proto",
    &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_once, descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_deps, 3, 5,
    schemas, file_default_instances, TableStruct_greptime_2fv1_2fmeta_2fddl_2eproto::offsets,
    file_level_metadata_greptime_2fv1_2fmeta_2fddl_2eproto, file_level_enum_descriptors_greptime_2fv1_2fmeta_2fddl_2eproto,
    file_level_service_descriptors_greptime_2fv1_2fmeta_2fddl_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_getter() {
  return &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_greptime_2fv1_2fmeta_2fddl_2eproto(&descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto);
namespace greptime {
namespace v1 {
namespace meta {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DdlTaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto);
  return file_level_enum_descriptors_greptime_2fv1_2fmeta_2fddl_2eproto[0];
}
bool DdlTaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CreateTableTask::_Internal {
 public:
  static const ::greptime::v1::CreateTableExpr& create_table(const CreateTableTask* msg);
};

const ::greptime::v1::CreateTableExpr&
CreateTableTask::_Internal::create_table(const CreateTableTask* msg) {
  return *msg->_impl_.create_table_;
}
void CreateTableTask::clear_create_table() {
  if (GetArenaForAllocation() == nullptr && _impl_.create_table_ != nullptr) {
    delete _impl_.create_table_;
  }
  _impl_.create_table_ = nullptr;
}
void CreateTableTask::clear_partitions() {
  _impl_.partitions_.Clear();
}
CreateTableTask::CreateTableTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.CreateTableTask)
}
CreateTableTask::CreateTableTask(const CreateTableTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateTableTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partitions_){from._impl_.partitions_}
    , decltype(_impl_.table_info_){}
    , decltype(_impl_.create_table_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.table_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_info().empty()) {
    _this->_impl_.table_info_.Set(from._internal_table_info(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_create_table()) {
    _this->_impl_.create_table_ = new ::greptime::v1::CreateTableExpr(*from._impl_.create_table_);
  }
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.CreateTableTask)
}

inline void CreateTableTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partitions_){arena}
    , decltype(_impl_.table_info_){}
    , decltype(_impl_.create_table_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.table_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateTableTask::~CreateTableTask() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.CreateTableTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateTableTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partitions_.~RepeatedPtrField();
  _impl_.table_info_.Destroy();
  if (this != internal_default_instance()) delete _impl_.create_table_;
}

void CreateTableTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateTableTask::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.CreateTableTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partitions_.Clear();
  _impl_.table_info_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.create_table_ != nullptr) {
    delete _impl_.create_table_;
  }
  _impl_.create_table_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTableTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .greptime.v1.CreateTableExpr create_table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .greptime.v1.meta.Partition partitions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_partitions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes table_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_table_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateTableTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.CreateTableTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .greptime.v1.CreateTableExpr create_table = 1;
  if (this->_internal_has_create_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::create_table(this),
        _Internal::create_table(this).GetCachedSize(), target, stream);
  }

  // repeated .greptime.v1.meta.Partition partitions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_partitions_size()); i < n; i++) {
    const auto& repfield = this->_internal_partitions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes table_info = 3;
  if (!this->_internal_table_info().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_table_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.CreateTableTask)
  return target;
}

size_t CreateTableTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.CreateTableTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .greptime.v1.meta.Partition partitions = 2;
  total_size += 1UL * this->_internal_partitions_size();
  for (const auto& msg : this->_impl_.partitions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes table_info = 3;
  if (!this->_internal_table_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_table_info());
  }

  // .greptime.v1.CreateTableExpr create_table = 1;
  if (this->_internal_has_create_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_table_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTableTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateTableTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTableTask::GetClassData() const { return &_class_data_; }


void CreateTableTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateTableTask*>(&to_msg);
  auto& from = static_cast<const CreateTableTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.CreateTableTask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partitions_.MergeFrom(from._impl_.partitions_);
  if (!from._internal_table_info().empty()) {
    _this->_internal_set_table_info(from._internal_table_info());
  }
  if (from._internal_has_create_table()) {
    _this->_internal_mutable_create_table()->::greptime::v1::CreateTableExpr::MergeFrom(
        from._internal_create_table());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTableTask::CopyFrom(const CreateTableTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.CreateTableTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTableTask::IsInitialized() const {
  return true;
}

void CreateTableTask::InternalSwap(CreateTableTask* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partitions_.InternalSwap(&other->_impl_.partitions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_info_, lhs_arena,
      &other->_impl_.table_info_, rhs_arena
  );
  swap(_impl_.create_table_, other->_impl_.create_table_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTableTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fddl_2eproto[0]);
}

// ===================================================================

class DropTableTask::_Internal {
 public:
  static const ::greptime::v1::DropTableExpr& drop_table(const DropTableTask* msg);
};

const ::greptime::v1::DropTableExpr&
DropTableTask::_Internal::drop_table(const DropTableTask* msg) {
  return *msg->_impl_.drop_table_;
}
void DropTableTask::clear_drop_table() {
  if (GetArenaForAllocation() == nullptr && _impl_.drop_table_ != nullptr) {
    delete _impl_.drop_table_;
  }
  _impl_.drop_table_ = nullptr;
}
DropTableTask::DropTableTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.DropTableTask)
}
DropTableTask::DropTableTask(const DropTableTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropTableTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.drop_table_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_drop_table()) {
    _this->_impl_.drop_table_ = new ::greptime::v1::DropTableExpr(*from._impl_.drop_table_);
  }
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.DropTableTask)
}

inline void DropTableTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.drop_table_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DropTableTask::~DropTableTask() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.DropTableTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropTableTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.drop_table_;
}

void DropTableTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropTableTask::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.DropTableTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.drop_table_ != nullptr) {
    delete _impl_.drop_table_;
  }
  _impl_.drop_table_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropTableTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .greptime.v1.DropTableExpr drop_table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropTableTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.DropTableTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .greptime.v1.DropTableExpr drop_table = 1;
  if (this->_internal_has_drop_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::drop_table(this),
        _Internal::drop_table(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.DropTableTask)
  return target;
}

size_t DropTableTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.DropTableTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .greptime.v1.DropTableExpr drop_table = 1;
  if (this->_internal_has_drop_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drop_table_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropTableTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropTableTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropTableTask::GetClassData() const { return &_class_data_; }


void DropTableTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropTableTask*>(&to_msg);
  auto& from = static_cast<const DropTableTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.DropTableTask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_drop_table()) {
    _this->_internal_mutable_drop_table()->::greptime::v1::DropTableExpr::MergeFrom(
        from._internal_drop_table());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropTableTask::CopyFrom(const DropTableTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.DropTableTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropTableTask::IsInitialized() const {
  return true;
}

void DropTableTask::InternalSwap(DropTableTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.drop_table_, other->_impl_.drop_table_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropTableTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fddl_2eproto[1]);
}

// ===================================================================

class AlterTableTask::_Internal {
 public:
  static const ::greptime::v1::AlterExpr& alter_table(const AlterTableTask* msg);
};

const ::greptime::v1::AlterExpr&
AlterTableTask::_Internal::alter_table(const AlterTableTask* msg) {
  return *msg->_impl_.alter_table_;
}
void AlterTableTask::clear_alter_table() {
  if (GetArenaForAllocation() == nullptr && _impl_.alter_table_ != nullptr) {
    delete _impl_.alter_table_;
  }
  _impl_.alter_table_ = nullptr;
}
AlterTableTask::AlterTableTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.AlterTableTask)
}
AlterTableTask::AlterTableTask(const AlterTableTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AlterTableTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.alter_table_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_alter_table()) {
    _this->_impl_.alter_table_ = new ::greptime::v1::AlterExpr(*from._impl_.alter_table_);
  }
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.AlterTableTask)
}

inline void AlterTableTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.alter_table_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AlterTableTask::~AlterTableTask() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.AlterTableTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AlterTableTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.alter_table_;
}

void AlterTableTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlterTableTask::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.AlterTableTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.alter_table_ != nullptr) {
    delete _impl_.alter_table_;
  }
  _impl_.alter_table_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlterTableTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .greptime.v1.AlterExpr alter_table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_alter_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlterTableTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.AlterTableTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .greptime.v1.AlterExpr alter_table = 1;
  if (this->_internal_has_alter_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::alter_table(this),
        _Internal::alter_table(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.AlterTableTask)
  return target;
}

size_t AlterTableTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.AlterTableTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .greptime.v1.AlterExpr alter_table = 1;
  if (this->_internal_has_alter_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.alter_table_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlterTableTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AlterTableTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlterTableTask::GetClassData() const { return &_class_data_; }


void AlterTableTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AlterTableTask*>(&to_msg);
  auto& from = static_cast<const AlterTableTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.AlterTableTask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_alter_table()) {
    _this->_internal_mutable_alter_table()->::greptime::v1::AlterExpr::MergeFrom(
        from._internal_alter_table());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlterTableTask::CopyFrom(const AlterTableTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.AlterTableTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlterTableTask::IsInitialized() const {
  return true;
}

void AlterTableTask::InternalSwap(AlterTableTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.alter_table_, other->_impl_.alter_table_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlterTableTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fddl_2eproto[2]);
}

// ===================================================================

class SubmitDdlTaskRequest::_Internal {
 public:
  static const ::greptime::v1::meta::RequestHeader& header(const SubmitDdlTaskRequest* msg);
  static const ::greptime::v1::meta::CreateTableTask& create_table_task(const SubmitDdlTaskRequest* msg);
  static const ::greptime::v1::meta::DropTableTask& drop_table_task(const SubmitDdlTaskRequest* msg);
  static const ::greptime::v1::meta::AlterTableTask& alter_table_task(const SubmitDdlTaskRequest* msg);
};

const ::greptime::v1::meta::RequestHeader&
SubmitDdlTaskRequest::_Internal::header(const SubmitDdlTaskRequest* msg) {
  return *msg->_impl_.header_;
}
const ::greptime::v1::meta::CreateTableTask&
SubmitDdlTaskRequest::_Internal::create_table_task(const SubmitDdlTaskRequest* msg) {
  return *msg->_impl_.task_.create_table_task_;
}
const ::greptime::v1::meta::DropTableTask&
SubmitDdlTaskRequest::_Internal::drop_table_task(const SubmitDdlTaskRequest* msg) {
  return *msg->_impl_.task_.drop_table_task_;
}
const ::greptime::v1::meta::AlterTableTask&
SubmitDdlTaskRequest::_Internal::alter_table_task(const SubmitDdlTaskRequest* msg) {
  return *msg->_impl_.task_.alter_table_task_;
}
void SubmitDdlTaskRequest::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void SubmitDdlTaskRequest::set_allocated_create_table_task(::greptime::v1::meta::CreateTableTask* create_table_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (create_table_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(create_table_task);
    if (message_arena != submessage_arena) {
      create_table_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_table_task, submessage_arena);
    }
    set_has_create_table_task();
    _impl_.task_.create_table_task_ = create_table_task;
  }
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.meta.SubmitDdlTaskRequest.create_table_task)
}
void SubmitDdlTaskRequest::set_allocated_drop_table_task(::greptime::v1::meta::DropTableTask* drop_table_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (drop_table_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(drop_table_task);
    if (message_arena != submessage_arena) {
      drop_table_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drop_table_task, submessage_arena);
    }
    set_has_drop_table_task();
    _impl_.task_.drop_table_task_ = drop_table_task;
  }
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.meta.SubmitDdlTaskRequest.drop_table_task)
}
void SubmitDdlTaskRequest::set_allocated_alter_table_task(::greptime::v1::meta::AlterTableTask* alter_table_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (alter_table_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(alter_table_task);
    if (message_arena != submessage_arena) {
      alter_table_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alter_table_task, submessage_arena);
    }
    set_has_alter_table_task();
    _impl_.task_.alter_table_task_ = alter_table_task;
  }
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.meta.SubmitDdlTaskRequest.alter_table_task)
}
SubmitDdlTaskRequest::SubmitDdlTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.SubmitDdlTaskRequest)
}
SubmitDdlTaskRequest::SubmitDdlTaskRequest(const SubmitDdlTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubmitDdlTaskRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.task_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::greptime::v1::meta::RequestHeader(*from._impl_.header_);
  }
  clear_has_task();
  switch (from.task_case()) {
    case kCreateTableTask: {
      _this->_internal_mutable_create_table_task()->::greptime::v1::meta::CreateTableTask::MergeFrom(
          from._internal_create_table_task());
      break;
    }
    case kDropTableTask: {
      _this->_internal_mutable_drop_table_task()->::greptime::v1::meta::DropTableTask::MergeFrom(
          from._internal_drop_table_task());
      break;
    }
    case kAlterTableTask: {
      _this->_internal_mutable_alter_table_task()->::greptime::v1::meta::AlterTableTask::MergeFrom(
          from._internal_alter_table_task());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.SubmitDdlTaskRequest)
}

inline void SubmitDdlTaskRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.task_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_task();
}

SubmitDdlTaskRequest::~SubmitDdlTaskRequest() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.SubmitDdlTaskRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubmitDdlTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (has_task()) {
    clear_task();
  }
}

void SubmitDdlTaskRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubmitDdlTaskRequest::clear_task() {
// @@protoc_insertion_point(one_of_clear_start:greptime.v1.meta.SubmitDdlTaskRequest)
  switch (task_case()) {
    case kCreateTableTask: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.create_table_task_;
      }
      break;
    }
    case kDropTableTask: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.drop_table_task_;
      }
      break;
    }
    case kAlterTableTask: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.alter_table_task_;
      }
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TASK_NOT_SET;
}


void SubmitDdlTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.SubmitDdlTaskRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  clear_task();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitDdlTaskRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .greptime.v1.meta.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.CreateTableTask create_table_task = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_table_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.DropTableTask drop_table_task = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_table_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.AlterTableTask alter_table_task = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_alter_table_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubmitDdlTaskRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.SubmitDdlTaskRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .greptime.v1.meta.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .greptime.v1.meta.CreateTableTask create_table_task = 2;
  if (_internal_has_create_table_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::create_table_task(this),
        _Internal::create_table_task(this).GetCachedSize(), target, stream);
  }

  // .greptime.v1.meta.DropTableTask drop_table_task = 3;
  if (_internal_has_drop_table_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::drop_table_task(this),
        _Internal::drop_table_task(this).GetCachedSize(), target, stream);
  }

  // .greptime.v1.meta.AlterTableTask alter_table_task = 4;
  if (_internal_has_alter_table_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::alter_table_task(this),
        _Internal::alter_table_task(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.SubmitDdlTaskRequest)
  return target;
}

size_t SubmitDdlTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.SubmitDdlTaskRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .greptime.v1.meta.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  switch (task_case()) {
    // .greptime.v1.meta.CreateTableTask create_table_task = 2;
    case kCreateTableTask: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.create_table_task_);
      break;
    }
    // .greptime.v1.meta.DropTableTask drop_table_task = 3;
    case kDropTableTask: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.drop_table_task_);
      break;
    }
    // .greptime.v1.meta.AlterTableTask alter_table_task = 4;
    case kAlterTableTask: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.alter_table_task_);
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubmitDdlTaskRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubmitDdlTaskRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubmitDdlTaskRequest::GetClassData() const { return &_class_data_; }


void SubmitDdlTaskRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubmitDdlTaskRequest*>(&to_msg);
  auto& from = static_cast<const SubmitDdlTaskRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.SubmitDdlTaskRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::greptime::v1::meta::RequestHeader::MergeFrom(
        from._internal_header());
  }
  switch (from.task_case()) {
    case kCreateTableTask: {
      _this->_internal_mutable_create_table_task()->::greptime::v1::meta::CreateTableTask::MergeFrom(
          from._internal_create_table_task());
      break;
    }
    case kDropTableTask: {
      _this->_internal_mutable_drop_table_task()->::greptime::v1::meta::DropTableTask::MergeFrom(
          from._internal_drop_table_task());
      break;
    }
    case kAlterTableTask: {
      _this->_internal_mutable_alter_table_task()->::greptime::v1::meta::AlterTableTask::MergeFrom(
          from._internal_alter_table_task());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubmitDdlTaskRequest::CopyFrom(const SubmitDdlTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.SubmitDdlTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitDdlTaskRequest::IsInitialized() const {
  return true;
}

void SubmitDdlTaskRequest::InternalSwap(SubmitDdlTaskRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.header_, other->_impl_.header_);
  swap(_impl_.task_, other->_impl_.task_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitDdlTaskRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fddl_2eproto[3]);
}

// ===================================================================

class SubmitDdlTaskResponse::_Internal {
 public:
  static const ::greptime::v1::meta::ResponseHeader& header(const SubmitDdlTaskResponse* msg);
  static const ::greptime::v1::meta::TableId& table_id(const SubmitDdlTaskResponse* msg);
};

const ::greptime::v1::meta::ResponseHeader&
SubmitDdlTaskResponse::_Internal::header(const SubmitDdlTaskResponse* msg) {
  return *msg->_impl_.header_;
}
const ::greptime::v1::meta::TableId&
SubmitDdlTaskResponse::_Internal::table_id(const SubmitDdlTaskResponse* msg) {
  return *msg->_impl_.table_id_;
}
void SubmitDdlTaskResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void SubmitDdlTaskResponse::clear_table_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.table_id_ != nullptr) {
    delete _impl_.table_id_;
  }
  _impl_.table_id_ = nullptr;
}
SubmitDdlTaskResponse::SubmitDdlTaskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.SubmitDdlTaskResponse)
}
SubmitDdlTaskResponse::SubmitDdlTaskResponse(const SubmitDdlTaskResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubmitDdlTaskResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.table_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::greptime::v1::meta::ResponseHeader(*from._impl_.header_);
  }
  if (from._internal_has_table_id()) {
    _this->_impl_.table_id_ = new ::greptime::v1::meta::TableId(*from._impl_.table_id_);
  }
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.SubmitDdlTaskResponse)
}

inline void SubmitDdlTaskResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.table_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubmitDdlTaskResponse::~SubmitDdlTaskResponse() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.SubmitDdlTaskResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubmitDdlTaskResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.table_id_;
}

void SubmitDdlTaskResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubmitDdlTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.SubmitDdlTaskResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.table_id_ != nullptr) {
    delete _impl_.table_id_;
  }
  _impl_.table_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitDdlTaskResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .greptime.v1.meta.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.TableId table_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubmitDdlTaskResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.SubmitDdlTaskResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .greptime.v1.meta.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // .greptime.v1.meta.TableId table_id = 4;
  if (this->_internal_has_table_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::table_id(this),
        _Internal::table_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.SubmitDdlTaskResponse)
  return target;
}

size_t SubmitDdlTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.SubmitDdlTaskResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // .greptime.v1.meta.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .greptime.v1.meta.TableId table_id = 4;
  if (this->_internal_has_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubmitDdlTaskResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubmitDdlTaskResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubmitDdlTaskResponse::GetClassData() const { return &_class_data_; }


void SubmitDdlTaskResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubmitDdlTaskResponse*>(&to_msg);
  auto& from = static_cast<const SubmitDdlTaskResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.SubmitDdlTaskResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::greptime::v1::meta::ResponseHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_table_id()) {
    _this->_internal_mutable_table_id()->::greptime::v1::meta::TableId::MergeFrom(
        from._internal_table_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubmitDdlTaskResponse::CopyFrom(const SubmitDdlTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.SubmitDdlTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitDdlTaskResponse::IsInitialized() const {
  return true;
}

void SubmitDdlTaskResponse::InternalSwap(SubmitDdlTaskResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubmitDdlTaskResponse, _impl_.table_id_)
      + sizeof(SubmitDdlTaskResponse::_impl_.table_id_)
      - PROTOBUF_FIELD_OFFSET(SubmitDdlTaskResponse, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitDdlTaskResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fddl_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace meta
}  // namespace v1
}  // namespace greptime
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::CreateTableTask*
Arena::CreateMaybeMessage< ::greptime::v1::meta::CreateTableTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::CreateTableTask >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::DropTableTask*
Arena::CreateMaybeMessage< ::greptime::v1::meta::DropTableTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::DropTableTask >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::AlterTableTask*
Arena::CreateMaybeMessage< ::greptime::v1::meta::AlterTableTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::AlterTableTask >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::SubmitDdlTaskRequest*
Arena::CreateMaybeMessage< ::greptime::v1::meta::SubmitDdlTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::SubmitDdlTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::SubmitDdlTaskResponse*
Arena::CreateMaybeMessage< ::greptime::v1::meta::SubmitDdlTaskResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::SubmitDdlTaskResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
