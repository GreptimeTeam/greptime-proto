// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: greptime/v1/meta/ddl.proto

#include "greptime/v1/meta/ddl.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace greptime {
namespace v1 {
namespace meta {
PROTOBUF_CONSTEXPR CreateDatabaseTask::CreateDatabaseTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.create_database_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateDatabaseTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateDatabaseTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateDatabaseTaskDefaultTypeInternal() {}
  union {
    CreateDatabaseTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateDatabaseTaskDefaultTypeInternal _CreateDatabaseTask_default_instance_;
PROTOBUF_CONSTEXPR CreateTableTask::CreateTableTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partitions_)*/{}
  , /*decltype(_impl_.table_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.create_table_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateTableTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateTableTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateTableTaskDefaultTypeInternal() {}
  union {
    CreateTableTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateTableTaskDefaultTypeInternal _CreateTableTask_default_instance_;
PROTOBUF_CONSTEXPR CreateTableTasks::CreateTableTasks(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tasks_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateTableTasksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateTableTasksDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateTableTasksDefaultTypeInternal() {}
  union {
    CreateTableTasks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateTableTasksDefaultTypeInternal _CreateTableTasks_default_instance_;
PROTOBUF_CONSTEXPR DropTableTask::DropTableTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.drop_table_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropTableTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropTableTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropTableTaskDefaultTypeInternal() {}
  union {
    DropTableTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropTableTaskDefaultTypeInternal _DropTableTask_default_instance_;
PROTOBUF_CONSTEXPR DropTableTasks::DropTableTasks(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tasks_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropTableTasksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropTableTasksDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropTableTasksDefaultTypeInternal() {}
  union {
    DropTableTasks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropTableTasksDefaultTypeInternal _DropTableTasks_default_instance_;
PROTOBUF_CONSTEXPR AlterTableTask::AlterTableTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.alter_table_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AlterTableTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlterTableTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlterTableTaskDefaultTypeInternal() {}
  union {
    AlterTableTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlterTableTaskDefaultTypeInternal _AlterTableTask_default_instance_;
PROTOBUF_CONSTEXPR AlterTableTasks::AlterTableTasks(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tasks_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AlterTableTasksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlterTableTasksDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlterTableTasksDefaultTypeInternal() {}
  union {
    AlterTableTasks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlterTableTasksDefaultTypeInternal _AlterTableTasks_default_instance_;
PROTOBUF_CONSTEXPR TruncateTableTask::TruncateTableTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.truncate_table_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TruncateTableTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TruncateTableTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TruncateTableTaskDefaultTypeInternal() {}
  union {
    TruncateTableTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TruncateTableTaskDefaultTypeInternal _TruncateTableTask_default_instance_;
PROTOBUF_CONSTEXPR DropDatabaseTask::DropDatabaseTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.drop_database_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropDatabaseTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropDatabaseTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropDatabaseTaskDefaultTypeInternal() {}
  union {
    DropDatabaseTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropDatabaseTaskDefaultTypeInternal _DropDatabaseTask_default_instance_;
PROTOBUF_CONSTEXPR CreateFlowTask::CreateFlowTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.create_flow_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateFlowTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateFlowTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateFlowTaskDefaultTypeInternal() {}
  union {
    CreateFlowTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateFlowTaskDefaultTypeInternal _CreateFlowTask_default_instance_;
PROTOBUF_CONSTEXPR DropFlowTask::DropFlowTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.drop_flow_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropFlowTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropFlowTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropFlowTaskDefaultTypeInternal() {}
  union {
    DropFlowTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropFlowTaskDefaultTypeInternal _DropFlowTask_default_instance_;
PROTOBUF_CONSTEXPR CreateViewTask::CreateViewTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.view_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.create_view_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateViewTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateViewTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateViewTaskDefaultTypeInternal() {}
  union {
    CreateViewTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateViewTaskDefaultTypeInternal _CreateViewTask_default_instance_;
PROTOBUF_CONSTEXPR DropViewTask::DropViewTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.drop_view_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropViewTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropViewTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropViewTaskDefaultTypeInternal() {}
  union {
    DropViewTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropViewTaskDefaultTypeInternal _DropViewTask_default_instance_;
PROTOBUF_CONSTEXPR AlterDatabaseTask::AlterDatabaseTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.task_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AlterDatabaseTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlterDatabaseTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlterDatabaseTaskDefaultTypeInternal() {}
  union {
    AlterDatabaseTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlterDatabaseTaskDefaultTypeInternal _AlterDatabaseTask_default_instance_;
PROTOBUF_CONSTEXPR DdlTaskRequest::DdlTaskRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.query_context_)*/nullptr
  , /*decltype(_impl_.task_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DdlTaskRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DdlTaskRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DdlTaskRequestDefaultTypeInternal() {}
  union {
    DdlTaskRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DdlTaskRequestDefaultTypeInternal _DdlTaskRequest_default_instance_;
PROTOBUF_CONSTEXPR DdlTaskResponse::DdlTaskResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_ids_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.pid_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DdlTaskResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DdlTaskResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DdlTaskResponseDefaultTypeInternal() {}
  union {
    DdlTaskResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DdlTaskResponseDefaultTypeInternal _DdlTaskResponse_default_instance_;
}  // namespace meta
}  // namespace v1
}  // namespace greptime
static ::_pb::Metadata file_level_metadata_greptime_2fv1_2fmeta_2fddl_2eproto[16];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_greptime_2fv1_2fmeta_2fddl_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_greptime_2fv1_2fmeta_2fddl_2eproto = nullptr;

const uint32_t TableStruct_greptime_2fv1_2fmeta_2fddl_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::CreateDatabaseTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::CreateDatabaseTask, _impl_.create_database_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::CreateTableTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::CreateTableTask, _impl_.create_table_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::CreateTableTask, _impl_.partitions_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::CreateTableTask, _impl_.table_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::CreateTableTasks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::CreateTableTasks, _impl_.tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::DropTableTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::DropTableTask, _impl_.drop_table_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::DropTableTasks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::DropTableTasks, _impl_.tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::AlterTableTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::AlterTableTask, _impl_.alter_table_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::AlterTableTasks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::AlterTableTasks, _impl_.tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::TruncateTableTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::TruncateTableTask, _impl_.truncate_table_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::DropDatabaseTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::DropDatabaseTask, _impl_.drop_database_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::CreateFlowTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::CreateFlowTask, _impl_.create_flow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::DropFlowTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::DropFlowTask, _impl_.drop_flow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::CreateViewTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::CreateViewTask, _impl_.create_view_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::CreateViewTask, _impl_.view_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::DropViewTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::DropViewTask, _impl_.drop_view_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::AlterDatabaseTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::AlterDatabaseTask, _impl_.task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::DdlTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::DdlTaskRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::DdlTaskRequest, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::DdlTaskRequest, _impl_.query_context_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::DdlTaskRequest, _impl_.task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::DdlTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::DdlTaskResponse, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::DdlTaskResponse, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::DdlTaskResponse, _impl_.table_ids_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::greptime::v1::meta::CreateDatabaseTask)},
  { 7, -1, -1, sizeof(::greptime::v1::meta::CreateTableTask)},
  { 16, -1, -1, sizeof(::greptime::v1::meta::CreateTableTasks)},
  { 23, -1, -1, sizeof(::greptime::v1::meta::DropTableTask)},
  { 30, -1, -1, sizeof(::greptime::v1::meta::DropTableTasks)},
  { 37, -1, -1, sizeof(::greptime::v1::meta::AlterTableTask)},
  { 44, -1, -1, sizeof(::greptime::v1::meta::AlterTableTasks)},
  { 51, -1, -1, sizeof(::greptime::v1::meta::TruncateTableTask)},
  { 58, -1, -1, sizeof(::greptime::v1::meta::DropDatabaseTask)},
  { 65, -1, -1, sizeof(::greptime::v1::meta::CreateFlowTask)},
  { 72, -1, -1, sizeof(::greptime::v1::meta::DropFlowTask)},
  { 79, -1, -1, sizeof(::greptime::v1::meta::CreateViewTask)},
  { 87, -1, -1, sizeof(::greptime::v1::meta::DropViewTask)},
  { 94, -1, -1, sizeof(::greptime::v1::meta::AlterDatabaseTask)},
  { 101, -1, -1, sizeof(::greptime::v1::meta::DdlTaskRequest)},
  { 124, -1, -1, sizeof(::greptime::v1::meta::DdlTaskResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::greptime::v1::meta::_CreateDatabaseTask_default_instance_._instance,
  &::greptime::v1::meta::_CreateTableTask_default_instance_._instance,
  &::greptime::v1::meta::_CreateTableTasks_default_instance_._instance,
  &::greptime::v1::meta::_DropTableTask_default_instance_._instance,
  &::greptime::v1::meta::_DropTableTasks_default_instance_._instance,
  &::greptime::v1::meta::_AlterTableTask_default_instance_._instance,
  &::greptime::v1::meta::_AlterTableTasks_default_instance_._instance,
  &::greptime::v1::meta::_TruncateTableTask_default_instance_._instance,
  &::greptime::v1::meta::_DropDatabaseTask_default_instance_._instance,
  &::greptime::v1::meta::_CreateFlowTask_default_instance_._instance,
  &::greptime::v1::meta::_DropFlowTask_default_instance_._instance,
  &::greptime::v1::meta::_CreateViewTask_default_instance_._instance,
  &::greptime::v1::meta::_DropViewTask_default_instance_._instance,
  &::greptime::v1::meta::_AlterDatabaseTask_default_instance_._instance,
  &::greptime::v1::meta::_DdlTaskRequest_default_instance_._instance,
  &::greptime::v1::meta::_DdlTaskResponse_default_instance_._instance,
};

const char descriptor_table_protodef_greptime_2fv1_2fmeta_2fddl_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032greptime/v1/meta/ddl.proto\022\020greptime.v"
  "1.meta\032\035greptime/v1/meta/common.proto\032\034g"
  "reptime/v1/meta/route.proto\032\025greptime/v1"
  "/ddl.proto\032\030greptime/v1/common.proto\"N\n\022"
  "CreateDatabaseTask\0228\n\017create_database\030\001 "
  "\001(\0132\037.greptime.v1.CreateDatabaseExpr\"\212\001\n"
  "\017CreateTableTask\0222\n\014create_table\030\001 \001(\0132\034"
  ".greptime.v1.CreateTableExpr\022/\n\npartitio"
  "ns\030\002 \003(\0132\033.greptime.v1.meta.Partition\022\022\n"
  "\ntable_info\030\003 \001(\014\"D\n\020CreateTableTasks\0220\n"
  "\005tasks\030\001 \003(\0132!.greptime.v1.meta.CreateTa"
  "bleTask\"\?\n\rDropTableTask\022.\n\ndrop_table\030\001"
  " \001(\0132\032.greptime.v1.DropTableExpr\"@\n\016Drop"
  "TableTasks\022.\n\005tasks\030\001 \003(\0132\037.greptime.v1."
  "meta.DropTableTask\"B\n\016AlterTableTask\0220\n\013"
  "alter_table\030\001 \001(\0132\033.greptime.v1.AlterTab"
  "leExpr\"B\n\017AlterTableTasks\022/\n\005tasks\030\001 \003(\013"
  "2 .greptime.v1.meta.AlterTableTask\"K\n\021Tr"
  "uncateTableTask\0226\n\016truncate_table\030\001 \001(\0132"
  "\036.greptime.v1.TruncateTableExpr\"H\n\020DropD"
  "atabaseTask\0224\n\rdrop_database\030\001 \001(\0132\035.gre"
  "ptime.v1.DropDatabaseExpr\"B\n\016CreateFlowT"
  "ask\0220\n\013create_flow\030\001 \001(\0132\033.greptime.v1.C"
  "reateFlowExpr\"<\n\014DropFlowTask\022,\n\tdrop_fl"
  "ow\030\001 \001(\0132\031.greptime.v1.DropFlowExpr\"U\n\016C"
  "reateViewTask\0220\n\013create_view\030\001 \001(\0132\033.gre"
  "ptime.v1.CreateViewExpr\022\021\n\tview_info\030\002 \001"
  "(\014\"<\n\014DropViewTask\022,\n\tdrop_view\030\001 \001(\0132\031."
  "greptime.v1.DropViewExpr\"A\n\021AlterDatabas"
  "eTask\022,\n\004task\030\001 \001(\0132\036.greptime.v1.AlterD"
  "atabaseExpr\"\365\007\n\016DdlTaskRequest\022/\n\006header"
  "\030\001 \001(\0132\037.greptime.v1.meta.RequestHeader\022"
  "0\n\rquery_context\030@ \001(\0132\031.greptime.v1.Que"
  "ryContext\022>\n\021create_table_task\030\002 \001(\0132!.g"
  "reptime.v1.meta.CreateTableTaskH\000\022:\n\017dro"
  "p_table_task\030\003 \001(\0132\037.greptime.v1.meta.Dr"
  "opTableTaskH\000\022<\n\020alter_table_task\030\004 \001(\0132"
  " .greptime.v1.meta.AlterTableTaskH\000\022B\n\023t"
  "runcate_table_task\030\005 \001(\0132#.greptime.v1.m"
  "eta.TruncateTableTaskH\000\022@\n\022create_table_"
  "tasks\030\006 \001(\0132\".greptime.v1.meta.CreateTab"
  "leTasksH\000\022<\n\020drop_table_tasks\030\007 \001(\0132 .gr"
  "eptime.v1.meta.DropTableTasksH\000\022>\n\021alter"
  "_table_tasks\030\010 \001(\0132!.greptime.v1.meta.Al"
  "terTableTasksH\000\022@\n\022drop_database_task\030\t "
  "\001(\0132\".greptime.v1.meta.DropDatabaseTaskH"
  "\000\022D\n\024create_database_task\030\n \001(\0132$.grepti"
  "me.v1.meta.CreateDatabaseTaskH\000\022<\n\020creat"
  "e_flow_task\030\013 \001(\0132 .greptime.v1.meta.Cre"
  "ateFlowTaskH\000\0228\n\016drop_flow_task\030\014 \001(\0132\036."
  "greptime.v1.meta.DropFlowTaskH\000\022<\n\020creat"
  "e_view_task\030\r \001(\0132 .greptime.v1.meta.Cre"
  "ateViewTaskH\000\0228\n\016drop_view_task\030\016 \001(\0132\036."
  "greptime.v1.meta.DropViewTaskH\000\022B\n\023alter"
  "_database_task\030\017 \001(\0132#.greptime.v1.meta."
  "AlterDatabaseTaskH\000B\006\n\004task\"\230\001\n\017DdlTaskR"
  "esponse\0220\n\006header\030\001 \001(\0132 .greptime.v1.me"
  "ta.ResponseHeader\022*\n\003pid\030\002 \001(\0132\035.greptim"
  "e.v1.meta.ProcedureId\022\'\n\ttable_ids\030\005 \003(\013"
  "2\024.greptime.v1.TableId*#\n\013DdlTaskType\022\n\n"
  "\006Create\020\000\022\010\n\004Drop\020\001B<Z:github.com/Grepti"
  "meTeam/greptime-proto/go/greptime/v1/met"
  "ab\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_deps[4] = {
  &::descriptor_table_greptime_2fv1_2fcommon_2eproto,
  &::descriptor_table_greptime_2fv1_2fddl_2eproto,
  &::descriptor_table_greptime_2fv1_2fmeta_2fcommon_2eproto,
  &::descriptor_table_greptime_2fv1_2fmeta_2froute_2eproto,
};
static ::_pbi::once_flag descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto = {
    false, false, 2489, descriptor_table_protodef_greptime_2fv1_2fmeta_2fddl_2eproto,
    "greptime/v1/meta/ddl.proto",
    &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_once, descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_deps, 4, 16,
    schemas, file_default_instances, TableStruct_greptime_2fv1_2fmeta_2fddl_2eproto::offsets,
    file_level_metadata_greptime_2fv1_2fmeta_2fddl_2eproto, file_level_enum_descriptors_greptime_2fv1_2fmeta_2fddl_2eproto,
    file_level_service_descriptors_greptime_2fv1_2fmeta_2fddl_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_getter() {
  return &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_greptime_2fv1_2fmeta_2fddl_2eproto(&descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto);
namespace greptime {
namespace v1 {
namespace meta {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DdlTaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto);
  return file_level_enum_descriptors_greptime_2fv1_2fmeta_2fddl_2eproto[0];
}
bool DdlTaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CreateDatabaseTask::_Internal {
 public:
  static const ::greptime::v1::CreateDatabaseExpr& create_database(const CreateDatabaseTask* msg);
};

const ::greptime::v1::CreateDatabaseExpr&
CreateDatabaseTask::_Internal::create_database(const CreateDatabaseTask* msg) {
  return *msg->_impl_.create_database_;
}
void CreateDatabaseTask::clear_create_database() {
  if (GetArenaForAllocation() == nullptr && _impl_.create_database_ != nullptr) {
    delete _impl_.create_database_;
  }
  _impl_.create_database_ = nullptr;
}
CreateDatabaseTask::CreateDatabaseTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.CreateDatabaseTask)
}
CreateDatabaseTask::CreateDatabaseTask(const CreateDatabaseTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateDatabaseTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.create_database_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_create_database()) {
    _this->_impl_.create_database_ = new ::greptime::v1::CreateDatabaseExpr(*from._impl_.create_database_);
  }
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.CreateDatabaseTask)
}

inline void CreateDatabaseTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.create_database_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateDatabaseTask::~CreateDatabaseTask() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.CreateDatabaseTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateDatabaseTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.create_database_;
}

void CreateDatabaseTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateDatabaseTask::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.CreateDatabaseTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.create_database_ != nullptr) {
    delete _impl_.create_database_;
  }
  _impl_.create_database_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateDatabaseTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .greptime.v1.CreateDatabaseExpr create_database = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_database(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateDatabaseTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.CreateDatabaseTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .greptime.v1.CreateDatabaseExpr create_database = 1;
  if (this->_internal_has_create_database()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::create_database(this),
        _Internal::create_database(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.CreateDatabaseTask)
  return target;
}

size_t CreateDatabaseTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.CreateDatabaseTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .greptime.v1.CreateDatabaseExpr create_database = 1;
  if (this->_internal_has_create_database()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_database_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateDatabaseTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateDatabaseTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateDatabaseTask::GetClassData() const { return &_class_data_; }


void CreateDatabaseTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateDatabaseTask*>(&to_msg);
  auto& from = static_cast<const CreateDatabaseTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.CreateDatabaseTask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_create_database()) {
    _this->_internal_mutable_create_database()->::greptime::v1::CreateDatabaseExpr::MergeFrom(
        from._internal_create_database());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateDatabaseTask::CopyFrom(const CreateDatabaseTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.CreateDatabaseTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDatabaseTask::IsInitialized() const {
  return true;
}

void CreateDatabaseTask::InternalSwap(CreateDatabaseTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.create_database_, other->_impl_.create_database_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDatabaseTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fddl_2eproto[0]);
}

// ===================================================================

class CreateTableTask::_Internal {
 public:
  static const ::greptime::v1::CreateTableExpr& create_table(const CreateTableTask* msg);
};

const ::greptime::v1::CreateTableExpr&
CreateTableTask::_Internal::create_table(const CreateTableTask* msg) {
  return *msg->_impl_.create_table_;
}
void CreateTableTask::clear_create_table() {
  if (GetArenaForAllocation() == nullptr && _impl_.create_table_ != nullptr) {
    delete _impl_.create_table_;
  }
  _impl_.create_table_ = nullptr;
}
void CreateTableTask::clear_partitions() {
  _impl_.partitions_.Clear();
}
CreateTableTask::CreateTableTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.CreateTableTask)
}
CreateTableTask::CreateTableTask(const CreateTableTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateTableTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partitions_){from._impl_.partitions_}
    , decltype(_impl_.table_info_){}
    , decltype(_impl_.create_table_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.table_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_info().empty()) {
    _this->_impl_.table_info_.Set(from._internal_table_info(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_create_table()) {
    _this->_impl_.create_table_ = new ::greptime::v1::CreateTableExpr(*from._impl_.create_table_);
  }
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.CreateTableTask)
}

inline void CreateTableTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partitions_){arena}
    , decltype(_impl_.table_info_){}
    , decltype(_impl_.create_table_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.table_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateTableTask::~CreateTableTask() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.CreateTableTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateTableTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partitions_.~RepeatedPtrField();
  _impl_.table_info_.Destroy();
  if (this != internal_default_instance()) delete _impl_.create_table_;
}

void CreateTableTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateTableTask::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.CreateTableTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partitions_.Clear();
  _impl_.table_info_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.create_table_ != nullptr) {
    delete _impl_.create_table_;
  }
  _impl_.create_table_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTableTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .greptime.v1.CreateTableExpr create_table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .greptime.v1.meta.Partition partitions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_partitions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes table_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_table_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateTableTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.CreateTableTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .greptime.v1.CreateTableExpr create_table = 1;
  if (this->_internal_has_create_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::create_table(this),
        _Internal::create_table(this).GetCachedSize(), target, stream);
  }

  // repeated .greptime.v1.meta.Partition partitions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_partitions_size()); i < n; i++) {
    const auto& repfield = this->_internal_partitions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes table_info = 3;
  if (!this->_internal_table_info().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_table_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.CreateTableTask)
  return target;
}

size_t CreateTableTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.CreateTableTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .greptime.v1.meta.Partition partitions = 2;
  total_size += 1UL * this->_internal_partitions_size();
  for (const auto& msg : this->_impl_.partitions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes table_info = 3;
  if (!this->_internal_table_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_table_info());
  }

  // .greptime.v1.CreateTableExpr create_table = 1;
  if (this->_internal_has_create_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_table_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTableTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateTableTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTableTask::GetClassData() const { return &_class_data_; }


void CreateTableTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateTableTask*>(&to_msg);
  auto& from = static_cast<const CreateTableTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.CreateTableTask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partitions_.MergeFrom(from._impl_.partitions_);
  if (!from._internal_table_info().empty()) {
    _this->_internal_set_table_info(from._internal_table_info());
  }
  if (from._internal_has_create_table()) {
    _this->_internal_mutable_create_table()->::greptime::v1::CreateTableExpr::MergeFrom(
        from._internal_create_table());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTableTask::CopyFrom(const CreateTableTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.CreateTableTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTableTask::IsInitialized() const {
  return true;
}

void CreateTableTask::InternalSwap(CreateTableTask* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partitions_.InternalSwap(&other->_impl_.partitions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_info_, lhs_arena,
      &other->_impl_.table_info_, rhs_arena
  );
  swap(_impl_.create_table_, other->_impl_.create_table_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTableTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fddl_2eproto[1]);
}

// ===================================================================

class CreateTableTasks::_Internal {
 public:
};

CreateTableTasks::CreateTableTasks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.CreateTableTasks)
}
CreateTableTasks::CreateTableTasks(const CreateTableTasks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateTableTasks* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){from._impl_.tasks_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.CreateTableTasks)
}

inline void CreateTableTasks::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateTableTasks::~CreateTableTasks() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.CreateTableTasks)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateTableTasks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tasks_.~RepeatedPtrField();
}

void CreateTableTasks::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateTableTasks::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.CreateTableTasks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tasks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTableTasks::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .greptime.v1.meta.CreateTableTask tasks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateTableTasks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.CreateTableTasks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .greptime.v1.meta.CreateTableTask tasks = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tasks_size()); i < n; i++) {
    const auto& repfield = this->_internal_tasks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.CreateTableTasks)
  return target;
}

size_t CreateTableTasks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.CreateTableTasks)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .greptime.v1.meta.CreateTableTask tasks = 1;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->_impl_.tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTableTasks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateTableTasks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTableTasks::GetClassData() const { return &_class_data_; }


void CreateTableTasks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateTableTasks*>(&to_msg);
  auto& from = static_cast<const CreateTableTasks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.CreateTableTasks)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tasks_.MergeFrom(from._impl_.tasks_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTableTasks::CopyFrom(const CreateTableTasks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.CreateTableTasks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTableTasks::IsInitialized() const {
  return true;
}

void CreateTableTasks::InternalSwap(CreateTableTasks* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tasks_.InternalSwap(&other->_impl_.tasks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTableTasks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fddl_2eproto[2]);
}

// ===================================================================

class DropTableTask::_Internal {
 public:
  static const ::greptime::v1::DropTableExpr& drop_table(const DropTableTask* msg);
};

const ::greptime::v1::DropTableExpr&
DropTableTask::_Internal::drop_table(const DropTableTask* msg) {
  return *msg->_impl_.drop_table_;
}
void DropTableTask::clear_drop_table() {
  if (GetArenaForAllocation() == nullptr && _impl_.drop_table_ != nullptr) {
    delete _impl_.drop_table_;
  }
  _impl_.drop_table_ = nullptr;
}
DropTableTask::DropTableTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.DropTableTask)
}
DropTableTask::DropTableTask(const DropTableTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropTableTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.drop_table_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_drop_table()) {
    _this->_impl_.drop_table_ = new ::greptime::v1::DropTableExpr(*from._impl_.drop_table_);
  }
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.DropTableTask)
}

inline void DropTableTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.drop_table_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DropTableTask::~DropTableTask() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.DropTableTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropTableTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.drop_table_;
}

void DropTableTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropTableTask::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.DropTableTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.drop_table_ != nullptr) {
    delete _impl_.drop_table_;
  }
  _impl_.drop_table_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropTableTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .greptime.v1.DropTableExpr drop_table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropTableTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.DropTableTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .greptime.v1.DropTableExpr drop_table = 1;
  if (this->_internal_has_drop_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::drop_table(this),
        _Internal::drop_table(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.DropTableTask)
  return target;
}

size_t DropTableTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.DropTableTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .greptime.v1.DropTableExpr drop_table = 1;
  if (this->_internal_has_drop_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drop_table_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropTableTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropTableTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropTableTask::GetClassData() const { return &_class_data_; }


void DropTableTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropTableTask*>(&to_msg);
  auto& from = static_cast<const DropTableTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.DropTableTask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_drop_table()) {
    _this->_internal_mutable_drop_table()->::greptime::v1::DropTableExpr::MergeFrom(
        from._internal_drop_table());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropTableTask::CopyFrom(const DropTableTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.DropTableTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropTableTask::IsInitialized() const {
  return true;
}

void DropTableTask::InternalSwap(DropTableTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.drop_table_, other->_impl_.drop_table_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropTableTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fddl_2eproto[3]);
}

// ===================================================================

class DropTableTasks::_Internal {
 public:
};

DropTableTasks::DropTableTasks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.DropTableTasks)
}
DropTableTasks::DropTableTasks(const DropTableTasks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropTableTasks* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){from._impl_.tasks_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.DropTableTasks)
}

inline void DropTableTasks::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DropTableTasks::~DropTableTasks() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.DropTableTasks)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropTableTasks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tasks_.~RepeatedPtrField();
}

void DropTableTasks::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropTableTasks::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.DropTableTasks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tasks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropTableTasks::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .greptime.v1.meta.DropTableTask tasks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropTableTasks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.DropTableTasks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .greptime.v1.meta.DropTableTask tasks = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tasks_size()); i < n; i++) {
    const auto& repfield = this->_internal_tasks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.DropTableTasks)
  return target;
}

size_t DropTableTasks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.DropTableTasks)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .greptime.v1.meta.DropTableTask tasks = 1;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->_impl_.tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropTableTasks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropTableTasks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropTableTasks::GetClassData() const { return &_class_data_; }


void DropTableTasks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropTableTasks*>(&to_msg);
  auto& from = static_cast<const DropTableTasks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.DropTableTasks)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tasks_.MergeFrom(from._impl_.tasks_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropTableTasks::CopyFrom(const DropTableTasks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.DropTableTasks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropTableTasks::IsInitialized() const {
  return true;
}

void DropTableTasks::InternalSwap(DropTableTasks* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tasks_.InternalSwap(&other->_impl_.tasks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropTableTasks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fddl_2eproto[4]);
}

// ===================================================================

class AlterTableTask::_Internal {
 public:
  static const ::greptime::v1::AlterTableExpr& alter_table(const AlterTableTask* msg);
};

const ::greptime::v1::AlterTableExpr&
AlterTableTask::_Internal::alter_table(const AlterTableTask* msg) {
  return *msg->_impl_.alter_table_;
}
void AlterTableTask::clear_alter_table() {
  if (GetArenaForAllocation() == nullptr && _impl_.alter_table_ != nullptr) {
    delete _impl_.alter_table_;
  }
  _impl_.alter_table_ = nullptr;
}
AlterTableTask::AlterTableTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.AlterTableTask)
}
AlterTableTask::AlterTableTask(const AlterTableTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AlterTableTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.alter_table_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_alter_table()) {
    _this->_impl_.alter_table_ = new ::greptime::v1::AlterTableExpr(*from._impl_.alter_table_);
  }
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.AlterTableTask)
}

inline void AlterTableTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.alter_table_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AlterTableTask::~AlterTableTask() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.AlterTableTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AlterTableTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.alter_table_;
}

void AlterTableTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlterTableTask::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.AlterTableTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.alter_table_ != nullptr) {
    delete _impl_.alter_table_;
  }
  _impl_.alter_table_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlterTableTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .greptime.v1.AlterTableExpr alter_table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_alter_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlterTableTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.AlterTableTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .greptime.v1.AlterTableExpr alter_table = 1;
  if (this->_internal_has_alter_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::alter_table(this),
        _Internal::alter_table(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.AlterTableTask)
  return target;
}

size_t AlterTableTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.AlterTableTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .greptime.v1.AlterTableExpr alter_table = 1;
  if (this->_internal_has_alter_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.alter_table_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlterTableTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AlterTableTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlterTableTask::GetClassData() const { return &_class_data_; }


void AlterTableTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AlterTableTask*>(&to_msg);
  auto& from = static_cast<const AlterTableTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.AlterTableTask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_alter_table()) {
    _this->_internal_mutable_alter_table()->::greptime::v1::AlterTableExpr::MergeFrom(
        from._internal_alter_table());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlterTableTask::CopyFrom(const AlterTableTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.AlterTableTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlterTableTask::IsInitialized() const {
  return true;
}

void AlterTableTask::InternalSwap(AlterTableTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.alter_table_, other->_impl_.alter_table_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlterTableTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fddl_2eproto[5]);
}

// ===================================================================

class AlterTableTasks::_Internal {
 public:
};

AlterTableTasks::AlterTableTasks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.AlterTableTasks)
}
AlterTableTasks::AlterTableTasks(const AlterTableTasks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AlterTableTasks* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){from._impl_.tasks_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.AlterTableTasks)
}

inline void AlterTableTasks::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AlterTableTasks::~AlterTableTasks() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.AlterTableTasks)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AlterTableTasks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tasks_.~RepeatedPtrField();
}

void AlterTableTasks::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlterTableTasks::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.AlterTableTasks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tasks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlterTableTasks::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .greptime.v1.meta.AlterTableTask tasks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlterTableTasks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.AlterTableTasks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .greptime.v1.meta.AlterTableTask tasks = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tasks_size()); i < n; i++) {
    const auto& repfield = this->_internal_tasks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.AlterTableTasks)
  return target;
}

size_t AlterTableTasks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.AlterTableTasks)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .greptime.v1.meta.AlterTableTask tasks = 1;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->_impl_.tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlterTableTasks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AlterTableTasks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlterTableTasks::GetClassData() const { return &_class_data_; }


void AlterTableTasks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AlterTableTasks*>(&to_msg);
  auto& from = static_cast<const AlterTableTasks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.AlterTableTasks)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tasks_.MergeFrom(from._impl_.tasks_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlterTableTasks::CopyFrom(const AlterTableTasks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.AlterTableTasks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlterTableTasks::IsInitialized() const {
  return true;
}

void AlterTableTasks::InternalSwap(AlterTableTasks* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tasks_.InternalSwap(&other->_impl_.tasks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlterTableTasks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fddl_2eproto[6]);
}

// ===================================================================

class TruncateTableTask::_Internal {
 public:
  static const ::greptime::v1::TruncateTableExpr& truncate_table(const TruncateTableTask* msg);
};

const ::greptime::v1::TruncateTableExpr&
TruncateTableTask::_Internal::truncate_table(const TruncateTableTask* msg) {
  return *msg->_impl_.truncate_table_;
}
void TruncateTableTask::clear_truncate_table() {
  if (GetArenaForAllocation() == nullptr && _impl_.truncate_table_ != nullptr) {
    delete _impl_.truncate_table_;
  }
  _impl_.truncate_table_ = nullptr;
}
TruncateTableTask::TruncateTableTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.TruncateTableTask)
}
TruncateTableTask::TruncateTableTask(const TruncateTableTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TruncateTableTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.truncate_table_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_truncate_table()) {
    _this->_impl_.truncate_table_ = new ::greptime::v1::TruncateTableExpr(*from._impl_.truncate_table_);
  }
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.TruncateTableTask)
}

inline void TruncateTableTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.truncate_table_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TruncateTableTask::~TruncateTableTask() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.TruncateTableTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TruncateTableTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.truncate_table_;
}

void TruncateTableTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TruncateTableTask::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.TruncateTableTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.truncate_table_ != nullptr) {
    delete _impl_.truncate_table_;
  }
  _impl_.truncate_table_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TruncateTableTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .greptime.v1.TruncateTableExpr truncate_table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_truncate_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TruncateTableTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.TruncateTableTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .greptime.v1.TruncateTableExpr truncate_table = 1;
  if (this->_internal_has_truncate_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::truncate_table(this),
        _Internal::truncate_table(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.TruncateTableTask)
  return target;
}

size_t TruncateTableTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.TruncateTableTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .greptime.v1.TruncateTableExpr truncate_table = 1;
  if (this->_internal_has_truncate_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.truncate_table_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TruncateTableTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TruncateTableTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TruncateTableTask::GetClassData() const { return &_class_data_; }


void TruncateTableTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TruncateTableTask*>(&to_msg);
  auto& from = static_cast<const TruncateTableTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.TruncateTableTask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_truncate_table()) {
    _this->_internal_mutable_truncate_table()->::greptime::v1::TruncateTableExpr::MergeFrom(
        from._internal_truncate_table());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TruncateTableTask::CopyFrom(const TruncateTableTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.TruncateTableTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruncateTableTask::IsInitialized() const {
  return true;
}

void TruncateTableTask::InternalSwap(TruncateTableTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.truncate_table_, other->_impl_.truncate_table_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TruncateTableTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fddl_2eproto[7]);
}

// ===================================================================

class DropDatabaseTask::_Internal {
 public:
  static const ::greptime::v1::DropDatabaseExpr& drop_database(const DropDatabaseTask* msg);
};

const ::greptime::v1::DropDatabaseExpr&
DropDatabaseTask::_Internal::drop_database(const DropDatabaseTask* msg) {
  return *msg->_impl_.drop_database_;
}
void DropDatabaseTask::clear_drop_database() {
  if (GetArenaForAllocation() == nullptr && _impl_.drop_database_ != nullptr) {
    delete _impl_.drop_database_;
  }
  _impl_.drop_database_ = nullptr;
}
DropDatabaseTask::DropDatabaseTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.DropDatabaseTask)
}
DropDatabaseTask::DropDatabaseTask(const DropDatabaseTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropDatabaseTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.drop_database_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_drop_database()) {
    _this->_impl_.drop_database_ = new ::greptime::v1::DropDatabaseExpr(*from._impl_.drop_database_);
  }
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.DropDatabaseTask)
}

inline void DropDatabaseTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.drop_database_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DropDatabaseTask::~DropDatabaseTask() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.DropDatabaseTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropDatabaseTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.drop_database_;
}

void DropDatabaseTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropDatabaseTask::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.DropDatabaseTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.drop_database_ != nullptr) {
    delete _impl_.drop_database_;
  }
  _impl_.drop_database_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropDatabaseTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .greptime.v1.DropDatabaseExpr drop_database = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_database(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropDatabaseTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.DropDatabaseTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .greptime.v1.DropDatabaseExpr drop_database = 1;
  if (this->_internal_has_drop_database()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::drop_database(this),
        _Internal::drop_database(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.DropDatabaseTask)
  return target;
}

size_t DropDatabaseTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.DropDatabaseTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .greptime.v1.DropDatabaseExpr drop_database = 1;
  if (this->_internal_has_drop_database()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drop_database_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropDatabaseTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropDatabaseTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropDatabaseTask::GetClassData() const { return &_class_data_; }


void DropDatabaseTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropDatabaseTask*>(&to_msg);
  auto& from = static_cast<const DropDatabaseTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.DropDatabaseTask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_drop_database()) {
    _this->_internal_mutable_drop_database()->::greptime::v1::DropDatabaseExpr::MergeFrom(
        from._internal_drop_database());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropDatabaseTask::CopyFrom(const DropDatabaseTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.DropDatabaseTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropDatabaseTask::IsInitialized() const {
  return true;
}

void DropDatabaseTask::InternalSwap(DropDatabaseTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.drop_database_, other->_impl_.drop_database_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropDatabaseTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fddl_2eproto[8]);
}

// ===================================================================

class CreateFlowTask::_Internal {
 public:
  static const ::greptime::v1::CreateFlowExpr& create_flow(const CreateFlowTask* msg);
};

const ::greptime::v1::CreateFlowExpr&
CreateFlowTask::_Internal::create_flow(const CreateFlowTask* msg) {
  return *msg->_impl_.create_flow_;
}
void CreateFlowTask::clear_create_flow() {
  if (GetArenaForAllocation() == nullptr && _impl_.create_flow_ != nullptr) {
    delete _impl_.create_flow_;
  }
  _impl_.create_flow_ = nullptr;
}
CreateFlowTask::CreateFlowTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.CreateFlowTask)
}
CreateFlowTask::CreateFlowTask(const CreateFlowTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateFlowTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.create_flow_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_create_flow()) {
    _this->_impl_.create_flow_ = new ::greptime::v1::CreateFlowExpr(*from._impl_.create_flow_);
  }
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.CreateFlowTask)
}

inline void CreateFlowTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.create_flow_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateFlowTask::~CreateFlowTask() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.CreateFlowTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateFlowTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.create_flow_;
}

void CreateFlowTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateFlowTask::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.CreateFlowTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.create_flow_ != nullptr) {
    delete _impl_.create_flow_;
  }
  _impl_.create_flow_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateFlowTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .greptime.v1.CreateFlowExpr create_flow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_flow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateFlowTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.CreateFlowTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .greptime.v1.CreateFlowExpr create_flow = 1;
  if (this->_internal_has_create_flow()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::create_flow(this),
        _Internal::create_flow(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.CreateFlowTask)
  return target;
}

size_t CreateFlowTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.CreateFlowTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .greptime.v1.CreateFlowExpr create_flow = 1;
  if (this->_internal_has_create_flow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_flow_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateFlowTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateFlowTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateFlowTask::GetClassData() const { return &_class_data_; }


void CreateFlowTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateFlowTask*>(&to_msg);
  auto& from = static_cast<const CreateFlowTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.CreateFlowTask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_create_flow()) {
    _this->_internal_mutable_create_flow()->::greptime::v1::CreateFlowExpr::MergeFrom(
        from._internal_create_flow());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateFlowTask::CopyFrom(const CreateFlowTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.CreateFlowTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateFlowTask::IsInitialized() const {
  return true;
}

void CreateFlowTask::InternalSwap(CreateFlowTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.create_flow_, other->_impl_.create_flow_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateFlowTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fddl_2eproto[9]);
}

// ===================================================================

class DropFlowTask::_Internal {
 public:
  static const ::greptime::v1::DropFlowExpr& drop_flow(const DropFlowTask* msg);
};

const ::greptime::v1::DropFlowExpr&
DropFlowTask::_Internal::drop_flow(const DropFlowTask* msg) {
  return *msg->_impl_.drop_flow_;
}
void DropFlowTask::clear_drop_flow() {
  if (GetArenaForAllocation() == nullptr && _impl_.drop_flow_ != nullptr) {
    delete _impl_.drop_flow_;
  }
  _impl_.drop_flow_ = nullptr;
}
DropFlowTask::DropFlowTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.DropFlowTask)
}
DropFlowTask::DropFlowTask(const DropFlowTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropFlowTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.drop_flow_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_drop_flow()) {
    _this->_impl_.drop_flow_ = new ::greptime::v1::DropFlowExpr(*from._impl_.drop_flow_);
  }
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.DropFlowTask)
}

inline void DropFlowTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.drop_flow_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DropFlowTask::~DropFlowTask() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.DropFlowTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropFlowTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.drop_flow_;
}

void DropFlowTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropFlowTask::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.DropFlowTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.drop_flow_ != nullptr) {
    delete _impl_.drop_flow_;
  }
  _impl_.drop_flow_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropFlowTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .greptime.v1.DropFlowExpr drop_flow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_flow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropFlowTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.DropFlowTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .greptime.v1.DropFlowExpr drop_flow = 1;
  if (this->_internal_has_drop_flow()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::drop_flow(this),
        _Internal::drop_flow(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.DropFlowTask)
  return target;
}

size_t DropFlowTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.DropFlowTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .greptime.v1.DropFlowExpr drop_flow = 1;
  if (this->_internal_has_drop_flow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drop_flow_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropFlowTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropFlowTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropFlowTask::GetClassData() const { return &_class_data_; }


void DropFlowTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropFlowTask*>(&to_msg);
  auto& from = static_cast<const DropFlowTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.DropFlowTask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_drop_flow()) {
    _this->_internal_mutable_drop_flow()->::greptime::v1::DropFlowExpr::MergeFrom(
        from._internal_drop_flow());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropFlowTask::CopyFrom(const DropFlowTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.DropFlowTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropFlowTask::IsInitialized() const {
  return true;
}

void DropFlowTask::InternalSwap(DropFlowTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.drop_flow_, other->_impl_.drop_flow_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropFlowTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fddl_2eproto[10]);
}

// ===================================================================

class CreateViewTask::_Internal {
 public:
  static const ::greptime::v1::CreateViewExpr& create_view(const CreateViewTask* msg);
};

const ::greptime::v1::CreateViewExpr&
CreateViewTask::_Internal::create_view(const CreateViewTask* msg) {
  return *msg->_impl_.create_view_;
}
void CreateViewTask::clear_create_view() {
  if (GetArenaForAllocation() == nullptr && _impl_.create_view_ != nullptr) {
    delete _impl_.create_view_;
  }
  _impl_.create_view_ = nullptr;
}
CreateViewTask::CreateViewTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.CreateViewTask)
}
CreateViewTask::CreateViewTask(const CreateViewTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateViewTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.view_info_){}
    , decltype(_impl_.create_view_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.view_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.view_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_view_info().empty()) {
    _this->_impl_.view_info_.Set(from._internal_view_info(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_create_view()) {
    _this->_impl_.create_view_ = new ::greptime::v1::CreateViewExpr(*from._impl_.create_view_);
  }
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.CreateViewTask)
}

inline void CreateViewTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.view_info_){}
    , decltype(_impl_.create_view_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.view_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.view_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateViewTask::~CreateViewTask() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.CreateViewTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateViewTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.view_info_.Destroy();
  if (this != internal_default_instance()) delete _impl_.create_view_;
}

void CreateViewTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateViewTask::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.CreateViewTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.view_info_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.create_view_ != nullptr) {
    delete _impl_.create_view_;
  }
  _impl_.create_view_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateViewTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .greptime.v1.CreateViewExpr create_view = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_view(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes view_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_view_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateViewTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.CreateViewTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .greptime.v1.CreateViewExpr create_view = 1;
  if (this->_internal_has_create_view()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::create_view(this),
        _Internal::create_view(this).GetCachedSize(), target, stream);
  }

  // bytes view_info = 2;
  if (!this->_internal_view_info().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_view_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.CreateViewTask)
  return target;
}

size_t CreateViewTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.CreateViewTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes view_info = 2;
  if (!this->_internal_view_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_view_info());
  }

  // .greptime.v1.CreateViewExpr create_view = 1;
  if (this->_internal_has_create_view()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_view_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateViewTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateViewTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateViewTask::GetClassData() const { return &_class_data_; }


void CreateViewTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateViewTask*>(&to_msg);
  auto& from = static_cast<const CreateViewTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.CreateViewTask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_view_info().empty()) {
    _this->_internal_set_view_info(from._internal_view_info());
  }
  if (from._internal_has_create_view()) {
    _this->_internal_mutable_create_view()->::greptime::v1::CreateViewExpr::MergeFrom(
        from._internal_create_view());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateViewTask::CopyFrom(const CreateViewTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.CreateViewTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateViewTask::IsInitialized() const {
  return true;
}

void CreateViewTask::InternalSwap(CreateViewTask* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.view_info_, lhs_arena,
      &other->_impl_.view_info_, rhs_arena
  );
  swap(_impl_.create_view_, other->_impl_.create_view_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateViewTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fddl_2eproto[11]);
}

// ===================================================================

class DropViewTask::_Internal {
 public:
  static const ::greptime::v1::DropViewExpr& drop_view(const DropViewTask* msg);
};

const ::greptime::v1::DropViewExpr&
DropViewTask::_Internal::drop_view(const DropViewTask* msg) {
  return *msg->_impl_.drop_view_;
}
void DropViewTask::clear_drop_view() {
  if (GetArenaForAllocation() == nullptr && _impl_.drop_view_ != nullptr) {
    delete _impl_.drop_view_;
  }
  _impl_.drop_view_ = nullptr;
}
DropViewTask::DropViewTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.DropViewTask)
}
DropViewTask::DropViewTask(const DropViewTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropViewTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.drop_view_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_drop_view()) {
    _this->_impl_.drop_view_ = new ::greptime::v1::DropViewExpr(*from._impl_.drop_view_);
  }
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.DropViewTask)
}

inline void DropViewTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.drop_view_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DropViewTask::~DropViewTask() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.DropViewTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropViewTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.drop_view_;
}

void DropViewTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropViewTask::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.DropViewTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.drop_view_ != nullptr) {
    delete _impl_.drop_view_;
  }
  _impl_.drop_view_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropViewTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .greptime.v1.DropViewExpr drop_view = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_view(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropViewTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.DropViewTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .greptime.v1.DropViewExpr drop_view = 1;
  if (this->_internal_has_drop_view()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::drop_view(this),
        _Internal::drop_view(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.DropViewTask)
  return target;
}

size_t DropViewTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.DropViewTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .greptime.v1.DropViewExpr drop_view = 1;
  if (this->_internal_has_drop_view()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drop_view_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropViewTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropViewTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropViewTask::GetClassData() const { return &_class_data_; }


void DropViewTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropViewTask*>(&to_msg);
  auto& from = static_cast<const DropViewTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.DropViewTask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_drop_view()) {
    _this->_internal_mutable_drop_view()->::greptime::v1::DropViewExpr::MergeFrom(
        from._internal_drop_view());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropViewTask::CopyFrom(const DropViewTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.DropViewTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropViewTask::IsInitialized() const {
  return true;
}

void DropViewTask::InternalSwap(DropViewTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.drop_view_, other->_impl_.drop_view_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropViewTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fddl_2eproto[12]);
}

// ===================================================================

class AlterDatabaseTask::_Internal {
 public:
  static const ::greptime::v1::AlterDatabaseExpr& task(const AlterDatabaseTask* msg);
};

const ::greptime::v1::AlterDatabaseExpr&
AlterDatabaseTask::_Internal::task(const AlterDatabaseTask* msg) {
  return *msg->_impl_.task_;
}
void AlterDatabaseTask::clear_task() {
  if (GetArenaForAllocation() == nullptr && _impl_.task_ != nullptr) {
    delete _impl_.task_;
  }
  _impl_.task_ = nullptr;
}
AlterDatabaseTask::AlterDatabaseTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.AlterDatabaseTask)
}
AlterDatabaseTask::AlterDatabaseTask(const AlterDatabaseTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AlterDatabaseTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.task_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task()) {
    _this->_impl_.task_ = new ::greptime::v1::AlterDatabaseExpr(*from._impl_.task_);
  }
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.AlterDatabaseTask)
}

inline void AlterDatabaseTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.task_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AlterDatabaseTask::~AlterDatabaseTask() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.AlterDatabaseTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AlterDatabaseTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.task_;
}

void AlterDatabaseTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlterDatabaseTask::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.AlterDatabaseTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.task_ != nullptr) {
    delete _impl_.task_;
  }
  _impl_.task_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlterDatabaseTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .greptime.v1.AlterDatabaseExpr task = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlterDatabaseTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.AlterDatabaseTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .greptime.v1.AlterDatabaseExpr task = 1;
  if (this->_internal_has_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::task(this),
        _Internal::task(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.AlterDatabaseTask)
  return target;
}

size_t AlterDatabaseTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.AlterDatabaseTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .greptime.v1.AlterDatabaseExpr task = 1;
  if (this->_internal_has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.task_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlterDatabaseTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AlterDatabaseTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlterDatabaseTask::GetClassData() const { return &_class_data_; }


void AlterDatabaseTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AlterDatabaseTask*>(&to_msg);
  auto& from = static_cast<const AlterDatabaseTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.AlterDatabaseTask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_task()) {
    _this->_internal_mutable_task()->::greptime::v1::AlterDatabaseExpr::MergeFrom(
        from._internal_task());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlterDatabaseTask::CopyFrom(const AlterDatabaseTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.AlterDatabaseTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlterDatabaseTask::IsInitialized() const {
  return true;
}

void AlterDatabaseTask::InternalSwap(AlterDatabaseTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.task_, other->_impl_.task_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlterDatabaseTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fddl_2eproto[13]);
}

// ===================================================================

class DdlTaskRequest::_Internal {
 public:
  static const ::greptime::v1::meta::RequestHeader& header(const DdlTaskRequest* msg);
  static const ::greptime::v1::QueryContext& query_context(const DdlTaskRequest* msg);
  static const ::greptime::v1::meta::CreateTableTask& create_table_task(const DdlTaskRequest* msg);
  static const ::greptime::v1::meta::DropTableTask& drop_table_task(const DdlTaskRequest* msg);
  static const ::greptime::v1::meta::AlterTableTask& alter_table_task(const DdlTaskRequest* msg);
  static const ::greptime::v1::meta::TruncateTableTask& truncate_table_task(const DdlTaskRequest* msg);
  static const ::greptime::v1::meta::CreateTableTasks& create_table_tasks(const DdlTaskRequest* msg);
  static const ::greptime::v1::meta::DropTableTasks& drop_table_tasks(const DdlTaskRequest* msg);
  static const ::greptime::v1::meta::AlterTableTasks& alter_table_tasks(const DdlTaskRequest* msg);
  static const ::greptime::v1::meta::DropDatabaseTask& drop_database_task(const DdlTaskRequest* msg);
  static const ::greptime::v1::meta::CreateDatabaseTask& create_database_task(const DdlTaskRequest* msg);
  static const ::greptime::v1::meta::CreateFlowTask& create_flow_task(const DdlTaskRequest* msg);
  static const ::greptime::v1::meta::DropFlowTask& drop_flow_task(const DdlTaskRequest* msg);
  static const ::greptime::v1::meta::CreateViewTask& create_view_task(const DdlTaskRequest* msg);
  static const ::greptime::v1::meta::DropViewTask& drop_view_task(const DdlTaskRequest* msg);
  static const ::greptime::v1::meta::AlterDatabaseTask& alter_database_task(const DdlTaskRequest* msg);
};

const ::greptime::v1::meta::RequestHeader&
DdlTaskRequest::_Internal::header(const DdlTaskRequest* msg) {
  return *msg->_impl_.header_;
}
const ::greptime::v1::QueryContext&
DdlTaskRequest::_Internal::query_context(const DdlTaskRequest* msg) {
  return *msg->_impl_.query_context_;
}
const ::greptime::v1::meta::CreateTableTask&
DdlTaskRequest::_Internal::create_table_task(const DdlTaskRequest* msg) {
  return *msg->_impl_.task_.create_table_task_;
}
const ::greptime::v1::meta::DropTableTask&
DdlTaskRequest::_Internal::drop_table_task(const DdlTaskRequest* msg) {
  return *msg->_impl_.task_.drop_table_task_;
}
const ::greptime::v1::meta::AlterTableTask&
DdlTaskRequest::_Internal::alter_table_task(const DdlTaskRequest* msg) {
  return *msg->_impl_.task_.alter_table_task_;
}
const ::greptime::v1::meta::TruncateTableTask&
DdlTaskRequest::_Internal::truncate_table_task(const DdlTaskRequest* msg) {
  return *msg->_impl_.task_.truncate_table_task_;
}
const ::greptime::v1::meta::CreateTableTasks&
DdlTaskRequest::_Internal::create_table_tasks(const DdlTaskRequest* msg) {
  return *msg->_impl_.task_.create_table_tasks_;
}
const ::greptime::v1::meta::DropTableTasks&
DdlTaskRequest::_Internal::drop_table_tasks(const DdlTaskRequest* msg) {
  return *msg->_impl_.task_.drop_table_tasks_;
}
const ::greptime::v1::meta::AlterTableTasks&
DdlTaskRequest::_Internal::alter_table_tasks(const DdlTaskRequest* msg) {
  return *msg->_impl_.task_.alter_table_tasks_;
}
const ::greptime::v1::meta::DropDatabaseTask&
DdlTaskRequest::_Internal::drop_database_task(const DdlTaskRequest* msg) {
  return *msg->_impl_.task_.drop_database_task_;
}
const ::greptime::v1::meta::CreateDatabaseTask&
DdlTaskRequest::_Internal::create_database_task(const DdlTaskRequest* msg) {
  return *msg->_impl_.task_.create_database_task_;
}
const ::greptime::v1::meta::CreateFlowTask&
DdlTaskRequest::_Internal::create_flow_task(const DdlTaskRequest* msg) {
  return *msg->_impl_.task_.create_flow_task_;
}
const ::greptime::v1::meta::DropFlowTask&
DdlTaskRequest::_Internal::drop_flow_task(const DdlTaskRequest* msg) {
  return *msg->_impl_.task_.drop_flow_task_;
}
const ::greptime::v1::meta::CreateViewTask&
DdlTaskRequest::_Internal::create_view_task(const DdlTaskRequest* msg) {
  return *msg->_impl_.task_.create_view_task_;
}
const ::greptime::v1::meta::DropViewTask&
DdlTaskRequest::_Internal::drop_view_task(const DdlTaskRequest* msg) {
  return *msg->_impl_.task_.drop_view_task_;
}
const ::greptime::v1::meta::AlterDatabaseTask&
DdlTaskRequest::_Internal::alter_database_task(const DdlTaskRequest* msg) {
  return *msg->_impl_.task_.alter_database_task_;
}
void DdlTaskRequest::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void DdlTaskRequest::clear_query_context() {
  if (GetArenaForAllocation() == nullptr && _impl_.query_context_ != nullptr) {
    delete _impl_.query_context_;
  }
  _impl_.query_context_ = nullptr;
}
void DdlTaskRequest::set_allocated_create_table_task(::greptime::v1::meta::CreateTableTask* create_table_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (create_table_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(create_table_task);
    if (message_arena != submessage_arena) {
      create_table_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_table_task, submessage_arena);
    }
    set_has_create_table_task();
    _impl_.task_.create_table_task_ = create_table_task;
  }
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.meta.DdlTaskRequest.create_table_task)
}
void DdlTaskRequest::set_allocated_drop_table_task(::greptime::v1::meta::DropTableTask* drop_table_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (drop_table_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(drop_table_task);
    if (message_arena != submessage_arena) {
      drop_table_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drop_table_task, submessage_arena);
    }
    set_has_drop_table_task();
    _impl_.task_.drop_table_task_ = drop_table_task;
  }
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.meta.DdlTaskRequest.drop_table_task)
}
void DdlTaskRequest::set_allocated_alter_table_task(::greptime::v1::meta::AlterTableTask* alter_table_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (alter_table_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(alter_table_task);
    if (message_arena != submessage_arena) {
      alter_table_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alter_table_task, submessage_arena);
    }
    set_has_alter_table_task();
    _impl_.task_.alter_table_task_ = alter_table_task;
  }
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.meta.DdlTaskRequest.alter_table_task)
}
void DdlTaskRequest::set_allocated_truncate_table_task(::greptime::v1::meta::TruncateTableTask* truncate_table_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (truncate_table_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(truncate_table_task);
    if (message_arena != submessage_arena) {
      truncate_table_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, truncate_table_task, submessage_arena);
    }
    set_has_truncate_table_task();
    _impl_.task_.truncate_table_task_ = truncate_table_task;
  }
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.meta.DdlTaskRequest.truncate_table_task)
}
void DdlTaskRequest::set_allocated_create_table_tasks(::greptime::v1::meta::CreateTableTasks* create_table_tasks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (create_table_tasks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(create_table_tasks);
    if (message_arena != submessage_arena) {
      create_table_tasks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_table_tasks, submessage_arena);
    }
    set_has_create_table_tasks();
    _impl_.task_.create_table_tasks_ = create_table_tasks;
  }
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.meta.DdlTaskRequest.create_table_tasks)
}
void DdlTaskRequest::set_allocated_drop_table_tasks(::greptime::v1::meta::DropTableTasks* drop_table_tasks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (drop_table_tasks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(drop_table_tasks);
    if (message_arena != submessage_arena) {
      drop_table_tasks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drop_table_tasks, submessage_arena);
    }
    set_has_drop_table_tasks();
    _impl_.task_.drop_table_tasks_ = drop_table_tasks;
  }
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.meta.DdlTaskRequest.drop_table_tasks)
}
void DdlTaskRequest::set_allocated_alter_table_tasks(::greptime::v1::meta::AlterTableTasks* alter_table_tasks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (alter_table_tasks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(alter_table_tasks);
    if (message_arena != submessage_arena) {
      alter_table_tasks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alter_table_tasks, submessage_arena);
    }
    set_has_alter_table_tasks();
    _impl_.task_.alter_table_tasks_ = alter_table_tasks;
  }
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.meta.DdlTaskRequest.alter_table_tasks)
}
void DdlTaskRequest::set_allocated_drop_database_task(::greptime::v1::meta::DropDatabaseTask* drop_database_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (drop_database_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(drop_database_task);
    if (message_arena != submessage_arena) {
      drop_database_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drop_database_task, submessage_arena);
    }
    set_has_drop_database_task();
    _impl_.task_.drop_database_task_ = drop_database_task;
  }
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.meta.DdlTaskRequest.drop_database_task)
}
void DdlTaskRequest::set_allocated_create_database_task(::greptime::v1::meta::CreateDatabaseTask* create_database_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (create_database_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(create_database_task);
    if (message_arena != submessage_arena) {
      create_database_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_database_task, submessage_arena);
    }
    set_has_create_database_task();
    _impl_.task_.create_database_task_ = create_database_task;
  }
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.meta.DdlTaskRequest.create_database_task)
}
void DdlTaskRequest::set_allocated_create_flow_task(::greptime::v1::meta::CreateFlowTask* create_flow_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (create_flow_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(create_flow_task);
    if (message_arena != submessage_arena) {
      create_flow_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_flow_task, submessage_arena);
    }
    set_has_create_flow_task();
    _impl_.task_.create_flow_task_ = create_flow_task;
  }
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.meta.DdlTaskRequest.create_flow_task)
}
void DdlTaskRequest::set_allocated_drop_flow_task(::greptime::v1::meta::DropFlowTask* drop_flow_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (drop_flow_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(drop_flow_task);
    if (message_arena != submessage_arena) {
      drop_flow_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drop_flow_task, submessage_arena);
    }
    set_has_drop_flow_task();
    _impl_.task_.drop_flow_task_ = drop_flow_task;
  }
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.meta.DdlTaskRequest.drop_flow_task)
}
void DdlTaskRequest::set_allocated_create_view_task(::greptime::v1::meta::CreateViewTask* create_view_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (create_view_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(create_view_task);
    if (message_arena != submessage_arena) {
      create_view_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_view_task, submessage_arena);
    }
    set_has_create_view_task();
    _impl_.task_.create_view_task_ = create_view_task;
  }
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.meta.DdlTaskRequest.create_view_task)
}
void DdlTaskRequest::set_allocated_drop_view_task(::greptime::v1::meta::DropViewTask* drop_view_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (drop_view_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(drop_view_task);
    if (message_arena != submessage_arena) {
      drop_view_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drop_view_task, submessage_arena);
    }
    set_has_drop_view_task();
    _impl_.task_.drop_view_task_ = drop_view_task;
  }
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.meta.DdlTaskRequest.drop_view_task)
}
void DdlTaskRequest::set_allocated_alter_database_task(::greptime::v1::meta::AlterDatabaseTask* alter_database_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (alter_database_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(alter_database_task);
    if (message_arena != submessage_arena) {
      alter_database_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alter_database_task, submessage_arena);
    }
    set_has_alter_database_task();
    _impl_.task_.alter_database_task_ = alter_database_task;
  }
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.meta.DdlTaskRequest.alter_database_task)
}
DdlTaskRequest::DdlTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.DdlTaskRequest)
}
DdlTaskRequest::DdlTaskRequest(const DdlTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DdlTaskRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.query_context_){nullptr}
    , decltype(_impl_.task_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::greptime::v1::meta::RequestHeader(*from._impl_.header_);
  }
  if (from._internal_has_query_context()) {
    _this->_impl_.query_context_ = new ::greptime::v1::QueryContext(*from._impl_.query_context_);
  }
  clear_has_task();
  switch (from.task_case()) {
    case kCreateTableTask: {
      _this->_internal_mutable_create_table_task()->::greptime::v1::meta::CreateTableTask::MergeFrom(
          from._internal_create_table_task());
      break;
    }
    case kDropTableTask: {
      _this->_internal_mutable_drop_table_task()->::greptime::v1::meta::DropTableTask::MergeFrom(
          from._internal_drop_table_task());
      break;
    }
    case kAlterTableTask: {
      _this->_internal_mutable_alter_table_task()->::greptime::v1::meta::AlterTableTask::MergeFrom(
          from._internal_alter_table_task());
      break;
    }
    case kTruncateTableTask: {
      _this->_internal_mutable_truncate_table_task()->::greptime::v1::meta::TruncateTableTask::MergeFrom(
          from._internal_truncate_table_task());
      break;
    }
    case kCreateTableTasks: {
      _this->_internal_mutable_create_table_tasks()->::greptime::v1::meta::CreateTableTasks::MergeFrom(
          from._internal_create_table_tasks());
      break;
    }
    case kDropTableTasks: {
      _this->_internal_mutable_drop_table_tasks()->::greptime::v1::meta::DropTableTasks::MergeFrom(
          from._internal_drop_table_tasks());
      break;
    }
    case kAlterTableTasks: {
      _this->_internal_mutable_alter_table_tasks()->::greptime::v1::meta::AlterTableTasks::MergeFrom(
          from._internal_alter_table_tasks());
      break;
    }
    case kDropDatabaseTask: {
      _this->_internal_mutable_drop_database_task()->::greptime::v1::meta::DropDatabaseTask::MergeFrom(
          from._internal_drop_database_task());
      break;
    }
    case kCreateDatabaseTask: {
      _this->_internal_mutable_create_database_task()->::greptime::v1::meta::CreateDatabaseTask::MergeFrom(
          from._internal_create_database_task());
      break;
    }
    case kCreateFlowTask: {
      _this->_internal_mutable_create_flow_task()->::greptime::v1::meta::CreateFlowTask::MergeFrom(
          from._internal_create_flow_task());
      break;
    }
    case kDropFlowTask: {
      _this->_internal_mutable_drop_flow_task()->::greptime::v1::meta::DropFlowTask::MergeFrom(
          from._internal_drop_flow_task());
      break;
    }
    case kCreateViewTask: {
      _this->_internal_mutable_create_view_task()->::greptime::v1::meta::CreateViewTask::MergeFrom(
          from._internal_create_view_task());
      break;
    }
    case kDropViewTask: {
      _this->_internal_mutable_drop_view_task()->::greptime::v1::meta::DropViewTask::MergeFrom(
          from._internal_drop_view_task());
      break;
    }
    case kAlterDatabaseTask: {
      _this->_internal_mutable_alter_database_task()->::greptime::v1::meta::AlterDatabaseTask::MergeFrom(
          from._internal_alter_database_task());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.DdlTaskRequest)
}

inline void DdlTaskRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.query_context_){nullptr}
    , decltype(_impl_.task_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_task();
}

DdlTaskRequest::~DdlTaskRequest() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.DdlTaskRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DdlTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.query_context_;
  if (has_task()) {
    clear_task();
  }
}

void DdlTaskRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DdlTaskRequest::clear_task() {
// @@protoc_insertion_point(one_of_clear_start:greptime.v1.meta.DdlTaskRequest)
  switch (task_case()) {
    case kCreateTableTask: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.create_table_task_;
      }
      break;
    }
    case kDropTableTask: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.drop_table_task_;
      }
      break;
    }
    case kAlterTableTask: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.alter_table_task_;
      }
      break;
    }
    case kTruncateTableTask: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.truncate_table_task_;
      }
      break;
    }
    case kCreateTableTasks: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.create_table_tasks_;
      }
      break;
    }
    case kDropTableTasks: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.drop_table_tasks_;
      }
      break;
    }
    case kAlterTableTasks: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.alter_table_tasks_;
      }
      break;
    }
    case kDropDatabaseTask: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.drop_database_task_;
      }
      break;
    }
    case kCreateDatabaseTask: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.create_database_task_;
      }
      break;
    }
    case kCreateFlowTask: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.create_flow_task_;
      }
      break;
    }
    case kDropFlowTask: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.drop_flow_task_;
      }
      break;
    }
    case kCreateViewTask: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.create_view_task_;
      }
      break;
    }
    case kDropViewTask: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.drop_view_task_;
      }
      break;
    }
    case kAlterDatabaseTask: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.alter_database_task_;
      }
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TASK_NOT_SET;
}


void DdlTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.DdlTaskRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.query_context_ != nullptr) {
    delete _impl_.query_context_;
  }
  _impl_.query_context_ = nullptr;
  clear_task();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DdlTaskRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .greptime.v1.meta.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.CreateTableTask create_table_task = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_table_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.DropTableTask drop_table_task = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_table_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.AlterTableTask alter_table_task = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_alter_table_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.TruncateTableTask truncate_table_task = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_truncate_table_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.CreateTableTasks create_table_tasks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_table_tasks(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.DropTableTasks drop_table_tasks = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_table_tasks(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.AlterTableTasks alter_table_tasks = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_alter_table_tasks(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.DropDatabaseTask drop_database_task = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_database_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.CreateDatabaseTask create_database_task = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_database_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.CreateFlowTask create_flow_task = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_flow_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.DropFlowTask drop_flow_task = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_flow_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.CreateViewTask create_view_task = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_view_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.DropViewTask drop_view_task = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_view_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.AlterDatabaseTask alter_database_task = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_alter_database_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.QueryContext query_context = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_query_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DdlTaskRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.DdlTaskRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .greptime.v1.meta.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .greptime.v1.meta.CreateTableTask create_table_task = 2;
  if (_internal_has_create_table_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::create_table_task(this),
        _Internal::create_table_task(this).GetCachedSize(), target, stream);
  }

  // .greptime.v1.meta.DropTableTask drop_table_task = 3;
  if (_internal_has_drop_table_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::drop_table_task(this),
        _Internal::drop_table_task(this).GetCachedSize(), target, stream);
  }

  // .greptime.v1.meta.AlterTableTask alter_table_task = 4;
  if (_internal_has_alter_table_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::alter_table_task(this),
        _Internal::alter_table_task(this).GetCachedSize(), target, stream);
  }

  // .greptime.v1.meta.TruncateTableTask truncate_table_task = 5;
  if (_internal_has_truncate_table_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::truncate_table_task(this),
        _Internal::truncate_table_task(this).GetCachedSize(), target, stream);
  }

  // .greptime.v1.meta.CreateTableTasks create_table_tasks = 6;
  if (_internal_has_create_table_tasks()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::create_table_tasks(this),
        _Internal::create_table_tasks(this).GetCachedSize(), target, stream);
  }

  // .greptime.v1.meta.DropTableTasks drop_table_tasks = 7;
  if (_internal_has_drop_table_tasks()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::drop_table_tasks(this),
        _Internal::drop_table_tasks(this).GetCachedSize(), target, stream);
  }

  // .greptime.v1.meta.AlterTableTasks alter_table_tasks = 8;
  if (_internal_has_alter_table_tasks()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::alter_table_tasks(this),
        _Internal::alter_table_tasks(this).GetCachedSize(), target, stream);
  }

  // .greptime.v1.meta.DropDatabaseTask drop_database_task = 9;
  if (_internal_has_drop_database_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::drop_database_task(this),
        _Internal::drop_database_task(this).GetCachedSize(), target, stream);
  }

  // .greptime.v1.meta.CreateDatabaseTask create_database_task = 10;
  if (_internal_has_create_database_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::create_database_task(this),
        _Internal::create_database_task(this).GetCachedSize(), target, stream);
  }

  // .greptime.v1.meta.CreateFlowTask create_flow_task = 11;
  if (_internal_has_create_flow_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::create_flow_task(this),
        _Internal::create_flow_task(this).GetCachedSize(), target, stream);
  }

  // .greptime.v1.meta.DropFlowTask drop_flow_task = 12;
  if (_internal_has_drop_flow_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::drop_flow_task(this),
        _Internal::drop_flow_task(this).GetCachedSize(), target, stream);
  }

  // .greptime.v1.meta.CreateViewTask create_view_task = 13;
  if (_internal_has_create_view_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::create_view_task(this),
        _Internal::create_view_task(this).GetCachedSize(), target, stream);
  }

  // .greptime.v1.meta.DropViewTask drop_view_task = 14;
  if (_internal_has_drop_view_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::drop_view_task(this),
        _Internal::drop_view_task(this).GetCachedSize(), target, stream);
  }

  // .greptime.v1.meta.AlterDatabaseTask alter_database_task = 15;
  if (_internal_has_alter_database_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::alter_database_task(this),
        _Internal::alter_database_task(this).GetCachedSize(), target, stream);
  }

  // .greptime.v1.QueryContext query_context = 64;
  if (this->_internal_has_query_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(64, _Internal::query_context(this),
        _Internal::query_context(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.DdlTaskRequest)
  return target;
}

size_t DdlTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.DdlTaskRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .greptime.v1.meta.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .greptime.v1.QueryContext query_context = 64;
  if (this->_internal_has_query_context()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.query_context_);
  }

  switch (task_case()) {
    // .greptime.v1.meta.CreateTableTask create_table_task = 2;
    case kCreateTableTask: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.create_table_task_);
      break;
    }
    // .greptime.v1.meta.DropTableTask drop_table_task = 3;
    case kDropTableTask: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.drop_table_task_);
      break;
    }
    // .greptime.v1.meta.AlterTableTask alter_table_task = 4;
    case kAlterTableTask: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.alter_table_task_);
      break;
    }
    // .greptime.v1.meta.TruncateTableTask truncate_table_task = 5;
    case kTruncateTableTask: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.truncate_table_task_);
      break;
    }
    // .greptime.v1.meta.CreateTableTasks create_table_tasks = 6;
    case kCreateTableTasks: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.create_table_tasks_);
      break;
    }
    // .greptime.v1.meta.DropTableTasks drop_table_tasks = 7;
    case kDropTableTasks: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.drop_table_tasks_);
      break;
    }
    // .greptime.v1.meta.AlterTableTasks alter_table_tasks = 8;
    case kAlterTableTasks: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.alter_table_tasks_);
      break;
    }
    // .greptime.v1.meta.DropDatabaseTask drop_database_task = 9;
    case kDropDatabaseTask: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.drop_database_task_);
      break;
    }
    // .greptime.v1.meta.CreateDatabaseTask create_database_task = 10;
    case kCreateDatabaseTask: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.create_database_task_);
      break;
    }
    // .greptime.v1.meta.CreateFlowTask create_flow_task = 11;
    case kCreateFlowTask: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.create_flow_task_);
      break;
    }
    // .greptime.v1.meta.DropFlowTask drop_flow_task = 12;
    case kDropFlowTask: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.drop_flow_task_);
      break;
    }
    // .greptime.v1.meta.CreateViewTask create_view_task = 13;
    case kCreateViewTask: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.create_view_task_);
      break;
    }
    // .greptime.v1.meta.DropViewTask drop_view_task = 14;
    case kDropViewTask: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.drop_view_task_);
      break;
    }
    // .greptime.v1.meta.AlterDatabaseTask alter_database_task = 15;
    case kAlterDatabaseTask: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.alter_database_task_);
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DdlTaskRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DdlTaskRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DdlTaskRequest::GetClassData() const { return &_class_data_; }


void DdlTaskRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DdlTaskRequest*>(&to_msg);
  auto& from = static_cast<const DdlTaskRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.DdlTaskRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::greptime::v1::meta::RequestHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_query_context()) {
    _this->_internal_mutable_query_context()->::greptime::v1::QueryContext::MergeFrom(
        from._internal_query_context());
  }
  switch (from.task_case()) {
    case kCreateTableTask: {
      _this->_internal_mutable_create_table_task()->::greptime::v1::meta::CreateTableTask::MergeFrom(
          from._internal_create_table_task());
      break;
    }
    case kDropTableTask: {
      _this->_internal_mutable_drop_table_task()->::greptime::v1::meta::DropTableTask::MergeFrom(
          from._internal_drop_table_task());
      break;
    }
    case kAlterTableTask: {
      _this->_internal_mutable_alter_table_task()->::greptime::v1::meta::AlterTableTask::MergeFrom(
          from._internal_alter_table_task());
      break;
    }
    case kTruncateTableTask: {
      _this->_internal_mutable_truncate_table_task()->::greptime::v1::meta::TruncateTableTask::MergeFrom(
          from._internal_truncate_table_task());
      break;
    }
    case kCreateTableTasks: {
      _this->_internal_mutable_create_table_tasks()->::greptime::v1::meta::CreateTableTasks::MergeFrom(
          from._internal_create_table_tasks());
      break;
    }
    case kDropTableTasks: {
      _this->_internal_mutable_drop_table_tasks()->::greptime::v1::meta::DropTableTasks::MergeFrom(
          from._internal_drop_table_tasks());
      break;
    }
    case kAlterTableTasks: {
      _this->_internal_mutable_alter_table_tasks()->::greptime::v1::meta::AlterTableTasks::MergeFrom(
          from._internal_alter_table_tasks());
      break;
    }
    case kDropDatabaseTask: {
      _this->_internal_mutable_drop_database_task()->::greptime::v1::meta::DropDatabaseTask::MergeFrom(
          from._internal_drop_database_task());
      break;
    }
    case kCreateDatabaseTask: {
      _this->_internal_mutable_create_database_task()->::greptime::v1::meta::CreateDatabaseTask::MergeFrom(
          from._internal_create_database_task());
      break;
    }
    case kCreateFlowTask: {
      _this->_internal_mutable_create_flow_task()->::greptime::v1::meta::CreateFlowTask::MergeFrom(
          from._internal_create_flow_task());
      break;
    }
    case kDropFlowTask: {
      _this->_internal_mutable_drop_flow_task()->::greptime::v1::meta::DropFlowTask::MergeFrom(
          from._internal_drop_flow_task());
      break;
    }
    case kCreateViewTask: {
      _this->_internal_mutable_create_view_task()->::greptime::v1::meta::CreateViewTask::MergeFrom(
          from._internal_create_view_task());
      break;
    }
    case kDropViewTask: {
      _this->_internal_mutable_drop_view_task()->::greptime::v1::meta::DropViewTask::MergeFrom(
          from._internal_drop_view_task());
      break;
    }
    case kAlterDatabaseTask: {
      _this->_internal_mutable_alter_database_task()->::greptime::v1::meta::AlterDatabaseTask::MergeFrom(
          from._internal_alter_database_task());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DdlTaskRequest::CopyFrom(const DdlTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.DdlTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DdlTaskRequest::IsInitialized() const {
  return true;
}

void DdlTaskRequest::InternalSwap(DdlTaskRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DdlTaskRequest, _impl_.query_context_)
      + sizeof(DdlTaskRequest::_impl_.query_context_)
      - PROTOBUF_FIELD_OFFSET(DdlTaskRequest, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
  swap(_impl_.task_, other->_impl_.task_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DdlTaskRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fddl_2eproto[14]);
}

// ===================================================================

class DdlTaskResponse::_Internal {
 public:
  static const ::greptime::v1::meta::ResponseHeader& header(const DdlTaskResponse* msg);
  static const ::greptime::v1::meta::ProcedureId& pid(const DdlTaskResponse* msg);
};

const ::greptime::v1::meta::ResponseHeader&
DdlTaskResponse::_Internal::header(const DdlTaskResponse* msg) {
  return *msg->_impl_.header_;
}
const ::greptime::v1::meta::ProcedureId&
DdlTaskResponse::_Internal::pid(const DdlTaskResponse* msg) {
  return *msg->_impl_.pid_;
}
void DdlTaskResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void DdlTaskResponse::clear_pid() {
  if (GetArenaForAllocation() == nullptr && _impl_.pid_ != nullptr) {
    delete _impl_.pid_;
  }
  _impl_.pid_ = nullptr;
}
void DdlTaskResponse::clear_table_ids() {
  _impl_.table_ids_.Clear();
}
DdlTaskResponse::DdlTaskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.DdlTaskResponse)
}
DdlTaskResponse::DdlTaskResponse(const DdlTaskResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DdlTaskResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_ids_){from._impl_.table_ids_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.pid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::greptime::v1::meta::ResponseHeader(*from._impl_.header_);
  }
  if (from._internal_has_pid()) {
    _this->_impl_.pid_ = new ::greptime::v1::meta::ProcedureId(*from._impl_.pid_);
  }
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.DdlTaskResponse)
}

inline void DdlTaskResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_ids_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.pid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DdlTaskResponse::~DdlTaskResponse() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.DdlTaskResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DdlTaskResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.table_ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.pid_;
}

void DdlTaskResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DdlTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.DdlTaskResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.table_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pid_ != nullptr) {
    delete _impl_.pid_;
  }
  _impl_.pid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DdlTaskResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .greptime.v1.meta.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.ProcedureId pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .greptime.v1.TableId table_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_table_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DdlTaskResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.DdlTaskResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .greptime.v1.meta.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .greptime.v1.meta.ProcedureId pid = 2;
  if (this->_internal_has_pid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pid(this),
        _Internal::pid(this).GetCachedSize(), target, stream);
  }

  // repeated .greptime.v1.TableId table_ids = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_table_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_table_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.DdlTaskResponse)
  return target;
}

size_t DdlTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.DdlTaskResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .greptime.v1.TableId table_ids = 5;
  total_size += 1UL * this->_internal_table_ids_size();
  for (const auto& msg : this->_impl_.table_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .greptime.v1.meta.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .greptime.v1.meta.ProcedureId pid = 2;
  if (this->_internal_has_pid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DdlTaskResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DdlTaskResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DdlTaskResponse::GetClassData() const { return &_class_data_; }


void DdlTaskResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DdlTaskResponse*>(&to_msg);
  auto& from = static_cast<const DdlTaskResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.DdlTaskResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.table_ids_.MergeFrom(from._impl_.table_ids_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::greptime::v1::meta::ResponseHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_pid()) {
    _this->_internal_mutable_pid()->::greptime::v1::meta::ProcedureId::MergeFrom(
        from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DdlTaskResponse::CopyFrom(const DdlTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.DdlTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DdlTaskResponse::IsInitialized() const {
  return true;
}

void DdlTaskResponse::InternalSwap(DdlTaskResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.table_ids_.InternalSwap(&other->_impl_.table_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DdlTaskResponse, _impl_.pid_)
      + sizeof(DdlTaskResponse::_impl_.pid_)
      - PROTOBUF_FIELD_OFFSET(DdlTaskResponse, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DdlTaskResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fddl_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace meta
}  // namespace v1
}  // namespace greptime
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::CreateDatabaseTask*
Arena::CreateMaybeMessage< ::greptime::v1::meta::CreateDatabaseTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::CreateDatabaseTask >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::CreateTableTask*
Arena::CreateMaybeMessage< ::greptime::v1::meta::CreateTableTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::CreateTableTask >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::CreateTableTasks*
Arena::CreateMaybeMessage< ::greptime::v1::meta::CreateTableTasks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::CreateTableTasks >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::DropTableTask*
Arena::CreateMaybeMessage< ::greptime::v1::meta::DropTableTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::DropTableTask >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::DropTableTasks*
Arena::CreateMaybeMessage< ::greptime::v1::meta::DropTableTasks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::DropTableTasks >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::AlterTableTask*
Arena::CreateMaybeMessage< ::greptime::v1::meta::AlterTableTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::AlterTableTask >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::AlterTableTasks*
Arena::CreateMaybeMessage< ::greptime::v1::meta::AlterTableTasks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::AlterTableTasks >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::TruncateTableTask*
Arena::CreateMaybeMessage< ::greptime::v1::meta::TruncateTableTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::TruncateTableTask >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::DropDatabaseTask*
Arena::CreateMaybeMessage< ::greptime::v1::meta::DropDatabaseTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::DropDatabaseTask >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::CreateFlowTask*
Arena::CreateMaybeMessage< ::greptime::v1::meta::CreateFlowTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::CreateFlowTask >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::DropFlowTask*
Arena::CreateMaybeMessage< ::greptime::v1::meta::DropFlowTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::DropFlowTask >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::CreateViewTask*
Arena::CreateMaybeMessage< ::greptime::v1::meta::CreateViewTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::CreateViewTask >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::DropViewTask*
Arena::CreateMaybeMessage< ::greptime::v1::meta::DropViewTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::DropViewTask >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::AlterDatabaseTask*
Arena::CreateMaybeMessage< ::greptime::v1::meta::AlterDatabaseTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::AlterDatabaseTask >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::DdlTaskRequest*
Arena::CreateMaybeMessage< ::greptime::v1::meta::DdlTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::DdlTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::DdlTaskResponse*
Arena::CreateMaybeMessage< ::greptime::v1::meta::DdlTaskResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::DdlTaskResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
