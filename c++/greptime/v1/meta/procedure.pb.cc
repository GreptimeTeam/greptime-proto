// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: greptime/v1/meta/procedure.proto

#include "greptime/v1/meta/procedure.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace greptime {
namespace v1 {
namespace meta {
PROTOBUF_CONSTEXPR ProcedureMeta::ProcedureMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lock_keys_)*/{}
  , /*decltype(_impl_.type_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.start_time_ms_)*/int64_t{0}
  , /*decltype(_impl_.end_time_ms_)*/int64_t{0}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcedureMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcedureMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcedureMetaDefaultTypeInternal() {}
  union {
    ProcedureMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcedureMetaDefaultTypeInternal _ProcedureMeta_default_instance_;
PROTOBUF_CONSTEXPR QueryProcedureRequest::QueryProcedureRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.pid_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryProcedureRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryProcedureRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryProcedureRequestDefaultTypeInternal() {}
  union {
    QueryProcedureRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryProcedureRequestDefaultTypeInternal _QueryProcedureRequest_default_instance_;
PROTOBUF_CONSTEXPR ProcedureStateResponse::ProcedureStateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcedureStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcedureStateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcedureStateResponseDefaultTypeInternal() {}
  union {
    ProcedureStateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcedureStateResponseDefaultTypeInternal _ProcedureStateResponse_default_instance_;
PROTOBUF_CONSTEXPR ProcedureDetailRequest::ProcedureDetailRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcedureDetailRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcedureDetailRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcedureDetailRequestDefaultTypeInternal() {}
  union {
    ProcedureDetailRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcedureDetailRequestDefaultTypeInternal _ProcedureDetailRequest_default_instance_;
PROTOBUF_CONSTEXPR ProcedureDetailResponse::ProcedureDetailResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.procedures_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcedureDetailResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcedureDetailResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcedureDetailResponseDefaultTypeInternal() {}
  union {
    ProcedureDetailResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcedureDetailResponseDefaultTypeInternal _ProcedureDetailResponse_default_instance_;
PROTOBUF_CONSTEXPR ReconcileTable::ReconcileTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.catalog_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.schema_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resolve_strategy_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReconcileTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReconcileTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReconcileTableDefaultTypeInternal() {}
  union {
    ReconcileTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReconcileTableDefaultTypeInternal _ReconcileTable_default_instance_;
PROTOBUF_CONSTEXPR ReconcileDatabase::ReconcileDatabase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.catalog_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.database_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parallelism_)*/0u
  , /*decltype(_impl_.resolve_strategy_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReconcileDatabaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReconcileDatabaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReconcileDatabaseDefaultTypeInternal() {}
  union {
    ReconcileDatabase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReconcileDatabaseDefaultTypeInternal _ReconcileDatabase_default_instance_;
PROTOBUF_CONSTEXPR ReconcileCatalog::ReconcileCatalog(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.catalog_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parallelism_)*/0u
  , /*decltype(_impl_.resolve_strategy_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReconcileCatalogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReconcileCatalogDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReconcileCatalogDefaultTypeInternal() {}
  union {
    ReconcileCatalog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReconcileCatalogDefaultTypeInternal _ReconcileCatalog_default_instance_;
PROTOBUF_CONSTEXPR ReconcileRequest::ReconcileRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.target_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ReconcileRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReconcileRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReconcileRequestDefaultTypeInternal() {}
  union {
    ReconcileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReconcileRequestDefaultTypeInternal _ReconcileRequest_default_instance_;
PROTOBUF_CONSTEXPR ReconcileResponse::ReconcileResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.pid_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReconcileResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReconcileResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReconcileResponseDefaultTypeInternal() {}
  union {
    ReconcileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReconcileResponseDefaultTypeInternal _ReconcileResponse_default_instance_;
}  // namespace meta
}  // namespace v1
}  // namespace greptime
static ::_pb::Metadata file_level_metadata_greptime_2fv1_2fmeta_2fprocedure_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_greptime_2fv1_2fmeta_2fprocedure_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_greptime_2fv1_2fmeta_2fprocedure_2eproto = nullptr;

const uint32_t TableStruct_greptime_2fv1_2fmeta_2fprocedure_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ProcedureMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ProcedureMeta, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ProcedureMeta, _impl_.type_name_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ProcedureMeta, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ProcedureMeta, _impl_.start_time_ms_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ProcedureMeta, _impl_.end_time_ms_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ProcedureMeta, _impl_.lock_keys_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ProcedureMeta, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::QueryProcedureRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::QueryProcedureRequest, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::QueryProcedureRequest, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ProcedureStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ProcedureStateResponse, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ProcedureStateResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ProcedureStateResponse, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ProcedureDetailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ProcedureDetailRequest, _impl_.header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ProcedureDetailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ProcedureDetailResponse, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ProcedureDetailResponse, _impl_.procedures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ReconcileTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ReconcileTable, _impl_.catalog_name_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ReconcileTable, _impl_.schema_name_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ReconcileTable, _impl_.table_name_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ReconcileTable, _impl_.resolve_strategy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ReconcileDatabase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ReconcileDatabase, _impl_.catalog_name_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ReconcileDatabase, _impl_.database_name_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ReconcileDatabase, _impl_.parallelism_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ReconcileDatabase, _impl_.resolve_strategy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ReconcileCatalog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ReconcileCatalog, _impl_.catalog_name_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ReconcileCatalog, _impl_.parallelism_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ReconcileCatalog, _impl_.resolve_strategy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ReconcileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ReconcileRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ReconcileRequest, _impl_.header_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ReconcileRequest, _impl_.target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ReconcileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ReconcileResponse, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::greptime::v1::meta::ReconcileResponse, _impl_.pid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::greptime::v1::meta::ProcedureMeta)},
  { 13, -1, -1, sizeof(::greptime::v1::meta::QueryProcedureRequest)},
  { 21, -1, -1, sizeof(::greptime::v1::meta::ProcedureStateResponse)},
  { 30, -1, -1, sizeof(::greptime::v1::meta::ProcedureDetailRequest)},
  { 37, -1, -1, sizeof(::greptime::v1::meta::ProcedureDetailResponse)},
  { 45, -1, -1, sizeof(::greptime::v1::meta::ReconcileTable)},
  { 55, -1, -1, sizeof(::greptime::v1::meta::ReconcileDatabase)},
  { 65, -1, -1, sizeof(::greptime::v1::meta::ReconcileCatalog)},
  { 74, -1, -1, sizeof(::greptime::v1::meta::ReconcileRequest)},
  { 85, -1, -1, sizeof(::greptime::v1::meta::ReconcileResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::greptime::v1::meta::_ProcedureMeta_default_instance_._instance,
  &::greptime::v1::meta::_QueryProcedureRequest_default_instance_._instance,
  &::greptime::v1::meta::_ProcedureStateResponse_default_instance_._instance,
  &::greptime::v1::meta::_ProcedureDetailRequest_default_instance_._instance,
  &::greptime::v1::meta::_ProcedureDetailResponse_default_instance_._instance,
  &::greptime::v1::meta::_ReconcileTable_default_instance_._instance,
  &::greptime::v1::meta::_ReconcileDatabase_default_instance_._instance,
  &::greptime::v1::meta::_ReconcileCatalog_default_instance_._instance,
  &::greptime::v1::meta::_ReconcileRequest_default_instance_._instance,
  &::greptime::v1::meta::_ReconcileResponse_default_instance_._instance,
};

const char descriptor_table_protodef_greptime_2fv1_2fmeta_2fprocedure_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n greptime/v1/meta/procedure.proto\022\020grep"
  "time.v1.meta\032\035greptime/v1/meta/common.pr"
  "oto\032\032greptime/v1/meta/ddl.proto\032\035greptim"
  "e/v1/meta/region.proto\"\316\001\n\rProcedureMeta"
  "\022)\n\002id\030\001 \001(\0132\035.greptime.v1.meta.Procedur"
  "eId\022\021\n\ttype_name\030\002 \001(\t\0221\n\006status\030\003 \001(\0162!"
  ".greptime.v1.meta.ProcedureStatus\022\025\n\rsta"
  "rt_time_ms\030\004 \001(\003\022\023\n\013end_time_ms\030\005 \001(\003\022\021\n"
  "\tlock_keys\030\006 \003(\t\022\r\n\005error\030\007 \001(\t\"t\n\025Query"
  "ProcedureRequest\022/\n\006header\030\001 \001(\0132\037.grept"
  "ime.v1.meta.RequestHeader\022*\n\003pid\030\002 \001(\0132\035"
  ".greptime.v1.meta.ProcedureId\"\214\001\n\026Proced"
  "ureStateResponse\0220\n\006header\030\001 \001(\0132 .grept"
  "ime.v1.meta.ResponseHeader\0221\n\006status\030\002 \001"
  "(\0162!.greptime.v1.meta.ProcedureStatus\022\r\n"
  "\005error\030\003 \001(\t\"I\n\026ProcedureDetailRequest\022/"
  "\n\006header\030\001 \001(\0132\037.greptime.v1.meta.Reques"
  "tHeader\"\200\001\n\027ProcedureDetailResponse\0220\n\006h"
  "eader\030\001 \001(\0132 .greptime.v1.meta.ResponseH"
  "eader\0223\n\nprocedures\030\002 \003(\0132\037.greptime.v1."
  "meta.ProcedureMeta\"\214\001\n\016ReconcileTable\022\024\n"
  "\014catalog_name\030\001 \001(\t\022\023\n\013schema_name\030\002 \001(\t"
  "\022\022\n\ntable_name\030\003 \001(\t\022;\n\020resolve_strategy"
  "\030\004 \001(\0162!.greptime.v1.meta.ResolveStrateg"
  "y\"\222\001\n\021ReconcileDatabase\022\024\n\014catalog_name\030"
  "\001 \001(\t\022\025\n\rdatabase_name\030\002 \001(\t\022\023\n\013parallel"
  "ism\030\003 \001(\r\022;\n\020resolve_strategy\030\004 \001(\0162!.gr"
  "eptime.v1.meta.ResolveStrategy\"z\n\020Reconc"
  "ileCatalog\022\024\n\014catalog_name\030\001 \001(\t\022\023\n\013para"
  "llelism\030\002 \001(\r\022;\n\020resolve_strategy\030\003 \001(\0162"
  "!.greptime.v1.meta.ResolveStrategy\"\216\002\n\020R"
  "econcileRequest\022/\n\006header\030\001 \001(\0132\037.grepti"
  "me.v1.meta.RequestHeader\022;\n\017reconcile_ta"
  "ble\030\002 \001(\0132 .greptime.v1.meta.ReconcileTa"
  "bleH\000\022A\n\022reconcile_database\030\003 \001(\0132#.grep"
  "time.v1.meta.ReconcileDatabaseH\000\022\?\n\021reco"
  "ncile_catalog\030\004 \001(\0132\".greptime.v1.meta.R"
  "econcileCatalogH\000B\010\n\006target\"q\n\021Reconcile"
  "Response\0220\n\006header\030\001 \001(\0132 .greptime.v1.m"
  "eta.ResponseHeader\022*\n\003pid\030\002 \001(\0132\035.grepti"
  "me.v1.meta.ProcedureId*v\n\017ProcedureStatu"
  "s\022\013\n\007Running\020\000\022\010\n\004Done\020\001\022\014\n\010Retrying\020\002\022\n"
  "\n\006Failed\020\003\022\023\n\017PrepareRollback\020\004\022\017\n\013Rolli"
  "ngBack\020\005\022\014\n\010Poisoned\020\006*E\n\017ResolveStrateg"
  "y\022\016\n\nUseMetasrv\020\000\022\r\n\tUseLatest\020\001\022\023\n\017Abor"
  "tOnConflict\020\0022\314\003\n\020ProcedureService\022Z\n\005qu"
  "ery\022\'.greptime.v1.meta.QueryProcedureReq"
  "uest\032(.greptime.v1.meta.ProcedureStateRe"
  "sponse\022J\n\003ddl\022 .greptime.v1.meta.DdlTask"
  "Request\032!.greptime.v1.meta.DdlTaskRespon"
  "se\022T\n\treconcile\022\".greptime.v1.meta.Recon"
  "cileRequest\032#.greptime.v1.meta.Reconcile"
  "Response\022Z\n\007migrate\022&.greptime.v1.meta.M"
  "igrateRegionRequest\032\'.greptime.v1.meta.M"
  "igrateRegionResponse\022^\n\007details\022(.grepti"
  "me.v1.meta.ProcedureDetailRequest\032).grep"
  "time.v1.meta.ProcedureDetailResponseB<Z:"
  "github.com/GreptimeTeam/greptime-proto/g"
  "o/greptime/v1/metab\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto_deps[3] = {
  &::descriptor_table_greptime_2fv1_2fmeta_2fcommon_2eproto,
  &::descriptor_table_greptime_2fv1_2fmeta_2fddl_2eproto,
  &::descriptor_table_greptime_2fv1_2fmeta_2fregion_2eproto,
};
static ::_pbi::once_flag descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto = {
    false, false, 2346, descriptor_table_protodef_greptime_2fv1_2fmeta_2fprocedure_2eproto,
    "greptime/v1/meta/procedure.proto",
    &descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto_once, descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto_deps, 3, 10,
    schemas, file_default_instances, TableStruct_greptime_2fv1_2fmeta_2fprocedure_2eproto::offsets,
    file_level_metadata_greptime_2fv1_2fmeta_2fprocedure_2eproto, file_level_enum_descriptors_greptime_2fv1_2fmeta_2fprocedure_2eproto,
    file_level_service_descriptors_greptime_2fv1_2fmeta_2fprocedure_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto_getter() {
  return &descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_greptime_2fv1_2fmeta_2fprocedure_2eproto(&descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto);
namespace greptime {
namespace v1 {
namespace meta {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProcedureStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto);
  return file_level_enum_descriptors_greptime_2fv1_2fmeta_2fprocedure_2eproto[0];
}
bool ProcedureStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResolveStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto);
  return file_level_enum_descriptors_greptime_2fv1_2fmeta_2fprocedure_2eproto[1];
}
bool ResolveStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ProcedureMeta::_Internal {
 public:
  static const ::greptime::v1::meta::ProcedureId& id(const ProcedureMeta* msg);
};

const ::greptime::v1::meta::ProcedureId&
ProcedureMeta::_Internal::id(const ProcedureMeta* msg) {
  return *msg->_impl_.id_;
}
void ProcedureMeta::clear_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
}
ProcedureMeta::ProcedureMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.ProcedureMeta)
}
ProcedureMeta::ProcedureMeta(const ProcedureMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcedureMeta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lock_keys_){from._impl_.lock_keys_}
    , decltype(_impl_.type_name_){}
    , decltype(_impl_.error_){}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.start_time_ms_){}
    , decltype(_impl_.end_time_ms_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type_name().empty()) {
    _this->_impl_.type_name_.Set(from._internal_type_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    _this->_impl_.id_ = new ::greptime::v1::meta::ProcedureId(*from._impl_.id_);
  }
  ::memcpy(&_impl_.start_time_ms_, &from._impl_.start_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.start_time_ms_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.ProcedureMeta)
}

inline void ProcedureMeta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lock_keys_){arena}
    , decltype(_impl_.type_name_){}
    , decltype(_impl_.error_){}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.start_time_ms_){int64_t{0}}
    , decltype(_impl_.end_time_ms_){int64_t{0}}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcedureMeta::~ProcedureMeta() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.ProcedureMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcedureMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lock_keys_.~RepeatedPtrField();
  _impl_.type_name_.Destroy();
  _impl_.error_.Destroy();
  if (this != internal_default_instance()) delete _impl_.id_;
}

void ProcedureMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcedureMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.ProcedureMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lock_keys_.Clear();
  _impl_.type_name_.ClearToEmpty();
  _impl_.error_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
  ::memset(&_impl_.start_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.start_time_ms_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcedureMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .greptime.v1.meta.ProcedureId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "greptime.v1.meta.ProcedureMeta.type_name"));
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.ProcedureStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::greptime::v1::meta::ProcedureStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 start_time_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.start_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 end_time_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.end_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string lock_keys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_lock_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "greptime.v1.meta.ProcedureMeta.lock_keys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string error = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "greptime.v1.meta.ProcedureMeta.error"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcedureMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.ProcedureMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .greptime.v1.meta.ProcedureId id = 1;
  if (this->_internal_has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // string type_name = 2;
  if (!this->_internal_type_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type_name().data(), static_cast<int>(this->_internal_type_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "greptime.v1.meta.ProcedureMeta.type_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type_name(), target);
  }

  // .greptime.v1.meta.ProcedureStatus status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // int64 start_time_ms = 4;
  if (this->_internal_start_time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_start_time_ms(), target);
  }

  // int64 end_time_ms = 5;
  if (this->_internal_end_time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_end_time_ms(), target);
  }

  // repeated string lock_keys = 6;
  for (int i = 0, n = this->_internal_lock_keys_size(); i < n; i++) {
    const auto& s = this->_internal_lock_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "greptime.v1.meta.ProcedureMeta.lock_keys");
    target = stream->WriteString(6, s, target);
  }

  // string error = 7;
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "greptime.v1.meta.ProcedureMeta.error");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.ProcedureMeta)
  return target;
}

size_t ProcedureMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.ProcedureMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string lock_keys = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.lock_keys_.size());
  for (int i = 0, n = _impl_.lock_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.lock_keys_.Get(i));
  }

  // string type_name = 2;
  if (!this->_internal_type_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type_name());
  }

  // string error = 7;
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // .greptime.v1.meta.ProcedureId id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id_);
  }

  // int64 start_time_ms = 4;
  if (this->_internal_start_time_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_time_ms());
  }

  // int64 end_time_ms = 5;
  if (this->_internal_end_time_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_end_time_ms());
  }

  // .greptime.v1.meta.ProcedureStatus status = 3;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcedureMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcedureMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcedureMeta::GetClassData() const { return &_class_data_; }


void ProcedureMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcedureMeta*>(&to_msg);
  auto& from = static_cast<const ProcedureMeta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.ProcedureMeta)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lock_keys_.MergeFrom(from._impl_.lock_keys_);
  if (!from._internal_type_name().empty()) {
    _this->_internal_set_type_name(from._internal_type_name());
  }
  if (!from._internal_error().empty()) {
    _this->_internal_set_error(from._internal_error());
  }
  if (from._internal_has_id()) {
    _this->_internal_mutable_id()->::greptime::v1::meta::ProcedureId::MergeFrom(
        from._internal_id());
  }
  if (from._internal_start_time_ms() != 0) {
    _this->_internal_set_start_time_ms(from._internal_start_time_ms());
  }
  if (from._internal_end_time_ms() != 0) {
    _this->_internal_set_end_time_ms(from._internal_end_time_ms());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcedureMeta::CopyFrom(const ProcedureMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.ProcedureMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcedureMeta::IsInitialized() const {
  return true;
}

void ProcedureMeta::InternalSwap(ProcedureMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lock_keys_.InternalSwap(&other->_impl_.lock_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_name_, lhs_arena,
      &other->_impl_.type_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcedureMeta, _impl_.status_)
      + sizeof(ProcedureMeta::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(ProcedureMeta, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcedureMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fprocedure_2eproto[0]);
}

// ===================================================================

class QueryProcedureRequest::_Internal {
 public:
  static const ::greptime::v1::meta::RequestHeader& header(const QueryProcedureRequest* msg);
  static const ::greptime::v1::meta::ProcedureId& pid(const QueryProcedureRequest* msg);
};

const ::greptime::v1::meta::RequestHeader&
QueryProcedureRequest::_Internal::header(const QueryProcedureRequest* msg) {
  return *msg->_impl_.header_;
}
const ::greptime::v1::meta::ProcedureId&
QueryProcedureRequest::_Internal::pid(const QueryProcedureRequest* msg) {
  return *msg->_impl_.pid_;
}
void QueryProcedureRequest::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void QueryProcedureRequest::clear_pid() {
  if (GetArenaForAllocation() == nullptr && _impl_.pid_ != nullptr) {
    delete _impl_.pid_;
  }
  _impl_.pid_ = nullptr;
}
QueryProcedureRequest::QueryProcedureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.QueryProcedureRequest)
}
QueryProcedureRequest::QueryProcedureRequest(const QueryProcedureRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryProcedureRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.pid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::greptime::v1::meta::RequestHeader(*from._impl_.header_);
  }
  if (from._internal_has_pid()) {
    _this->_impl_.pid_ = new ::greptime::v1::meta::ProcedureId(*from._impl_.pid_);
  }
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.QueryProcedureRequest)
}

inline void QueryProcedureRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.pid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryProcedureRequest::~QueryProcedureRequest() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.QueryProcedureRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryProcedureRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.pid_;
}

void QueryProcedureRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryProcedureRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.QueryProcedureRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pid_ != nullptr) {
    delete _impl_.pid_;
  }
  _impl_.pid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryProcedureRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .greptime.v1.meta.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.ProcedureId pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryProcedureRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.QueryProcedureRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .greptime.v1.meta.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .greptime.v1.meta.ProcedureId pid = 2;
  if (this->_internal_has_pid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pid(this),
        _Internal::pid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.QueryProcedureRequest)
  return target;
}

size_t QueryProcedureRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.QueryProcedureRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .greptime.v1.meta.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .greptime.v1.meta.ProcedureId pid = 2;
  if (this->_internal_has_pid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryProcedureRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryProcedureRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryProcedureRequest::GetClassData() const { return &_class_data_; }


void QueryProcedureRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryProcedureRequest*>(&to_msg);
  auto& from = static_cast<const QueryProcedureRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.QueryProcedureRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::greptime::v1::meta::RequestHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_pid()) {
    _this->_internal_mutable_pid()->::greptime::v1::meta::ProcedureId::MergeFrom(
        from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryProcedureRequest::CopyFrom(const QueryProcedureRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.QueryProcedureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryProcedureRequest::IsInitialized() const {
  return true;
}

void QueryProcedureRequest::InternalSwap(QueryProcedureRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryProcedureRequest, _impl_.pid_)
      + sizeof(QueryProcedureRequest::_impl_.pid_)
      - PROTOBUF_FIELD_OFFSET(QueryProcedureRequest, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryProcedureRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fprocedure_2eproto[1]);
}

// ===================================================================

class ProcedureStateResponse::_Internal {
 public:
  static const ::greptime::v1::meta::ResponseHeader& header(const ProcedureStateResponse* msg);
};

const ::greptime::v1::meta::ResponseHeader&
ProcedureStateResponse::_Internal::header(const ProcedureStateResponse* msg) {
  return *msg->_impl_.header_;
}
void ProcedureStateResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
ProcedureStateResponse::ProcedureStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.ProcedureStateResponse)
}
ProcedureStateResponse::ProcedureStateResponse(const ProcedureStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcedureStateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::greptime::v1::meta::ResponseHeader(*from._impl_.header_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.ProcedureStateResponse)
}

inline void ProcedureStateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcedureStateResponse::~ProcedureStateResponse() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.ProcedureStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcedureStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void ProcedureStateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcedureStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.ProcedureStateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcedureStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .greptime.v1.meta.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.ProcedureStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::greptime::v1::meta::ProcedureStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "greptime.v1.meta.ProcedureStateResponse.error"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcedureStateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.ProcedureStateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .greptime.v1.meta.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .greptime.v1.meta.ProcedureStatus status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // string error = 3;
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "greptime.v1.meta.ProcedureStateResponse.error");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.ProcedureStateResponse)
  return target;
}

size_t ProcedureStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.ProcedureStateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 3;
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // .greptime.v1.meta.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .greptime.v1.meta.ProcedureStatus status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcedureStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcedureStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcedureStateResponse::GetClassData() const { return &_class_data_; }


void ProcedureStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcedureStateResponse*>(&to_msg);
  auto& from = static_cast<const ProcedureStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.ProcedureStateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error().empty()) {
    _this->_internal_set_error(from._internal_error());
  }
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::greptime::v1::meta::ResponseHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcedureStateResponse::CopyFrom(const ProcedureStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.ProcedureStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcedureStateResponse::IsInitialized() const {
  return true;
}

void ProcedureStateResponse::InternalSwap(ProcedureStateResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcedureStateResponse, _impl_.status_)
      + sizeof(ProcedureStateResponse::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(ProcedureStateResponse, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcedureStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fprocedure_2eproto[2]);
}

// ===================================================================

class ProcedureDetailRequest::_Internal {
 public:
  static const ::greptime::v1::meta::RequestHeader& header(const ProcedureDetailRequest* msg);
};

const ::greptime::v1::meta::RequestHeader&
ProcedureDetailRequest::_Internal::header(const ProcedureDetailRequest* msg) {
  return *msg->_impl_.header_;
}
void ProcedureDetailRequest::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
ProcedureDetailRequest::ProcedureDetailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.ProcedureDetailRequest)
}
ProcedureDetailRequest::ProcedureDetailRequest(const ProcedureDetailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcedureDetailRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::greptime::v1::meta::RequestHeader(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.ProcedureDetailRequest)
}

inline void ProcedureDetailRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProcedureDetailRequest::~ProcedureDetailRequest() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.ProcedureDetailRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcedureDetailRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
}

void ProcedureDetailRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcedureDetailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.ProcedureDetailRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcedureDetailRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .greptime.v1.meta.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcedureDetailRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.ProcedureDetailRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .greptime.v1.meta.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.ProcedureDetailRequest)
  return target;
}

size_t ProcedureDetailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.ProcedureDetailRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .greptime.v1.meta.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcedureDetailRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcedureDetailRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcedureDetailRequest::GetClassData() const { return &_class_data_; }


void ProcedureDetailRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcedureDetailRequest*>(&to_msg);
  auto& from = static_cast<const ProcedureDetailRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.ProcedureDetailRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::greptime::v1::meta::RequestHeader::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcedureDetailRequest::CopyFrom(const ProcedureDetailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.ProcedureDetailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcedureDetailRequest::IsInitialized() const {
  return true;
}

void ProcedureDetailRequest::InternalSwap(ProcedureDetailRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcedureDetailRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fprocedure_2eproto[3]);
}

// ===================================================================

class ProcedureDetailResponse::_Internal {
 public:
  static const ::greptime::v1::meta::ResponseHeader& header(const ProcedureDetailResponse* msg);
};

const ::greptime::v1::meta::ResponseHeader&
ProcedureDetailResponse::_Internal::header(const ProcedureDetailResponse* msg) {
  return *msg->_impl_.header_;
}
void ProcedureDetailResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
ProcedureDetailResponse::ProcedureDetailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.ProcedureDetailResponse)
}
ProcedureDetailResponse::ProcedureDetailResponse(const ProcedureDetailResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcedureDetailResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.procedures_){from._impl_.procedures_}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::greptime::v1::meta::ResponseHeader(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.ProcedureDetailResponse)
}

inline void ProcedureDetailResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.procedures_){arena}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProcedureDetailResponse::~ProcedureDetailResponse() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.ProcedureDetailResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcedureDetailResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.procedures_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void ProcedureDetailResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcedureDetailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.ProcedureDetailResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.procedures_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcedureDetailResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .greptime.v1.meta.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .greptime.v1.meta.ProcedureMeta procedures = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_procedures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcedureDetailResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.ProcedureDetailResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .greptime.v1.meta.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .greptime.v1.meta.ProcedureMeta procedures = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_procedures_size()); i < n; i++) {
    const auto& repfield = this->_internal_procedures(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.ProcedureDetailResponse)
  return target;
}

size_t ProcedureDetailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.ProcedureDetailResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .greptime.v1.meta.ProcedureMeta procedures = 2;
  total_size += 1UL * this->_internal_procedures_size();
  for (const auto& msg : this->_impl_.procedures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .greptime.v1.meta.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcedureDetailResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcedureDetailResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcedureDetailResponse::GetClassData() const { return &_class_data_; }


void ProcedureDetailResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcedureDetailResponse*>(&to_msg);
  auto& from = static_cast<const ProcedureDetailResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.ProcedureDetailResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.procedures_.MergeFrom(from._impl_.procedures_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::greptime::v1::meta::ResponseHeader::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcedureDetailResponse::CopyFrom(const ProcedureDetailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.ProcedureDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcedureDetailResponse::IsInitialized() const {
  return true;
}

void ProcedureDetailResponse::InternalSwap(ProcedureDetailResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.procedures_.InternalSwap(&other->_impl_.procedures_);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcedureDetailResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fprocedure_2eproto[4]);
}

// ===================================================================

class ReconcileTable::_Internal {
 public:
};

ReconcileTable::ReconcileTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.ReconcileTable)
}
ReconcileTable::ReconcileTable(const ReconcileTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReconcileTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.catalog_name_){}
    , decltype(_impl_.schema_name_){}
    , decltype(_impl_.table_name_){}
    , decltype(_impl_.resolve_strategy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.catalog_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.catalog_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_catalog_name().empty()) {
    _this->_impl_.catalog_name_.Set(from._internal_catalog_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.schema_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_schema_name().empty()) {
    _this->_impl_.schema_name_.Set(from._internal_schema_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    _this->_impl_.table_name_.Set(from._internal_table_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.resolve_strategy_ = from._impl_.resolve_strategy_;
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.ReconcileTable)
}

inline void ReconcileTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.catalog_name_){}
    , decltype(_impl_.schema_name_){}
    , decltype(_impl_.table_name_){}
    , decltype(_impl_.resolve_strategy_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.catalog_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.catalog_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.schema_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReconcileTable::~ReconcileTable() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.ReconcileTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReconcileTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.catalog_name_.Destroy();
  _impl_.schema_name_.Destroy();
  _impl_.table_name_.Destroy();
}

void ReconcileTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReconcileTable::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.ReconcileTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.catalog_name_.ClearToEmpty();
  _impl_.schema_name_.ClearToEmpty();
  _impl_.table_name_.ClearToEmpty();
  _impl_.resolve_strategy_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReconcileTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string catalog_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_catalog_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "greptime.v1.meta.ReconcileTable.catalog_name"));
        } else
          goto handle_unusual;
        continue;
      // string schema_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_schema_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "greptime.v1.meta.ReconcileTable.schema_name"));
        } else
          goto handle_unusual;
        continue;
      // string table_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "greptime.v1.meta.ReconcileTable.table_name"));
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.ResolveStrategy resolve_strategy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resolve_strategy(static_cast<::greptime::v1::meta::ResolveStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReconcileTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.ReconcileTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string catalog_name = 1;
  if (!this->_internal_catalog_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_catalog_name().data(), static_cast<int>(this->_internal_catalog_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "greptime.v1.meta.ReconcileTable.catalog_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_catalog_name(), target);
  }

  // string schema_name = 2;
  if (!this->_internal_schema_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_schema_name().data(), static_cast<int>(this->_internal_schema_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "greptime.v1.meta.ReconcileTable.schema_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_schema_name(), target);
  }

  // string table_name = 3;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "greptime.v1.meta.ReconcileTable.table_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_table_name(), target);
  }

  // .greptime.v1.meta.ResolveStrategy resolve_strategy = 4;
  if (this->_internal_resolve_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_resolve_strategy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.ReconcileTable)
  return target;
}

size_t ReconcileTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.ReconcileTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string catalog_name = 1;
  if (!this->_internal_catalog_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_catalog_name());
  }

  // string schema_name = 2;
  if (!this->_internal_schema_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_schema_name());
  }

  // string table_name = 3;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  // .greptime.v1.meta.ResolveStrategy resolve_strategy = 4;
  if (this->_internal_resolve_strategy() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_resolve_strategy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReconcileTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReconcileTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReconcileTable::GetClassData() const { return &_class_data_; }


void ReconcileTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReconcileTable*>(&to_msg);
  auto& from = static_cast<const ReconcileTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.ReconcileTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_catalog_name().empty()) {
    _this->_internal_set_catalog_name(from._internal_catalog_name());
  }
  if (!from._internal_schema_name().empty()) {
    _this->_internal_set_schema_name(from._internal_schema_name());
  }
  if (!from._internal_table_name().empty()) {
    _this->_internal_set_table_name(from._internal_table_name());
  }
  if (from._internal_resolve_strategy() != 0) {
    _this->_internal_set_resolve_strategy(from._internal_resolve_strategy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReconcileTable::CopyFrom(const ReconcileTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.ReconcileTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconcileTable::IsInitialized() const {
  return true;
}

void ReconcileTable::InternalSwap(ReconcileTable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.catalog_name_, lhs_arena,
      &other->_impl_.catalog_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.schema_name_, lhs_arena,
      &other->_impl_.schema_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_name_, lhs_arena,
      &other->_impl_.table_name_, rhs_arena
  );
  swap(_impl_.resolve_strategy_, other->_impl_.resolve_strategy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReconcileTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fprocedure_2eproto[5]);
}

// ===================================================================

class ReconcileDatabase::_Internal {
 public:
};

ReconcileDatabase::ReconcileDatabase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.ReconcileDatabase)
}
ReconcileDatabase::ReconcileDatabase(const ReconcileDatabase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReconcileDatabase* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.catalog_name_){}
    , decltype(_impl_.database_name_){}
    , decltype(_impl_.parallelism_){}
    , decltype(_impl_.resolve_strategy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.catalog_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.catalog_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_catalog_name().empty()) {
    _this->_impl_.catalog_name_.Set(from._internal_catalog_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.database_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_database_name().empty()) {
    _this->_impl_.database_name_.Set(from._internal_database_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.parallelism_, &from._impl_.parallelism_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.resolve_strategy_) -
    reinterpret_cast<char*>(&_impl_.parallelism_)) + sizeof(_impl_.resolve_strategy_));
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.ReconcileDatabase)
}

inline void ReconcileDatabase::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.catalog_name_){}
    , decltype(_impl_.database_name_){}
    , decltype(_impl_.parallelism_){0u}
    , decltype(_impl_.resolve_strategy_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.catalog_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.catalog_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.database_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReconcileDatabase::~ReconcileDatabase() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.ReconcileDatabase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReconcileDatabase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.catalog_name_.Destroy();
  _impl_.database_name_.Destroy();
}

void ReconcileDatabase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReconcileDatabase::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.ReconcileDatabase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.catalog_name_.ClearToEmpty();
  _impl_.database_name_.ClearToEmpty();
  ::memset(&_impl_.parallelism_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.resolve_strategy_) -
      reinterpret_cast<char*>(&_impl_.parallelism_)) + sizeof(_impl_.resolve_strategy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReconcileDatabase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string catalog_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_catalog_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "greptime.v1.meta.ReconcileDatabase.catalog_name"));
        } else
          goto handle_unusual;
        continue;
      // string database_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_database_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "greptime.v1.meta.ReconcileDatabase.database_name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 parallelism = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.parallelism_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.ResolveStrategy resolve_strategy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resolve_strategy(static_cast<::greptime::v1::meta::ResolveStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReconcileDatabase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.ReconcileDatabase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string catalog_name = 1;
  if (!this->_internal_catalog_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_catalog_name().data(), static_cast<int>(this->_internal_catalog_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "greptime.v1.meta.ReconcileDatabase.catalog_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_catalog_name(), target);
  }

  // string database_name = 2;
  if (!this->_internal_database_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_database_name().data(), static_cast<int>(this->_internal_database_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "greptime.v1.meta.ReconcileDatabase.database_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_database_name(), target);
  }

  // uint32 parallelism = 3;
  if (this->_internal_parallelism() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_parallelism(), target);
  }

  // .greptime.v1.meta.ResolveStrategy resolve_strategy = 4;
  if (this->_internal_resolve_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_resolve_strategy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.ReconcileDatabase)
  return target;
}

size_t ReconcileDatabase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.ReconcileDatabase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string catalog_name = 1;
  if (!this->_internal_catalog_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_catalog_name());
  }

  // string database_name = 2;
  if (!this->_internal_database_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_database_name());
  }

  // uint32 parallelism = 3;
  if (this->_internal_parallelism() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_parallelism());
  }

  // .greptime.v1.meta.ResolveStrategy resolve_strategy = 4;
  if (this->_internal_resolve_strategy() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_resolve_strategy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReconcileDatabase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReconcileDatabase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReconcileDatabase::GetClassData() const { return &_class_data_; }


void ReconcileDatabase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReconcileDatabase*>(&to_msg);
  auto& from = static_cast<const ReconcileDatabase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.ReconcileDatabase)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_catalog_name().empty()) {
    _this->_internal_set_catalog_name(from._internal_catalog_name());
  }
  if (!from._internal_database_name().empty()) {
    _this->_internal_set_database_name(from._internal_database_name());
  }
  if (from._internal_parallelism() != 0) {
    _this->_internal_set_parallelism(from._internal_parallelism());
  }
  if (from._internal_resolve_strategy() != 0) {
    _this->_internal_set_resolve_strategy(from._internal_resolve_strategy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReconcileDatabase::CopyFrom(const ReconcileDatabase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.ReconcileDatabase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconcileDatabase::IsInitialized() const {
  return true;
}

void ReconcileDatabase::InternalSwap(ReconcileDatabase* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.catalog_name_, lhs_arena,
      &other->_impl_.catalog_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.database_name_, lhs_arena,
      &other->_impl_.database_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReconcileDatabase, _impl_.resolve_strategy_)
      + sizeof(ReconcileDatabase::_impl_.resolve_strategy_)
      - PROTOBUF_FIELD_OFFSET(ReconcileDatabase, _impl_.parallelism_)>(
          reinterpret_cast<char*>(&_impl_.parallelism_),
          reinterpret_cast<char*>(&other->_impl_.parallelism_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReconcileDatabase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fprocedure_2eproto[6]);
}

// ===================================================================

class ReconcileCatalog::_Internal {
 public:
};

ReconcileCatalog::ReconcileCatalog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.ReconcileCatalog)
}
ReconcileCatalog::ReconcileCatalog(const ReconcileCatalog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReconcileCatalog* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.catalog_name_){}
    , decltype(_impl_.parallelism_){}
    , decltype(_impl_.resolve_strategy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.catalog_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.catalog_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_catalog_name().empty()) {
    _this->_impl_.catalog_name_.Set(from._internal_catalog_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.parallelism_, &from._impl_.parallelism_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.resolve_strategy_) -
    reinterpret_cast<char*>(&_impl_.parallelism_)) + sizeof(_impl_.resolve_strategy_));
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.ReconcileCatalog)
}

inline void ReconcileCatalog::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.catalog_name_){}
    , decltype(_impl_.parallelism_){0u}
    , decltype(_impl_.resolve_strategy_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.catalog_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.catalog_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReconcileCatalog::~ReconcileCatalog() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.ReconcileCatalog)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReconcileCatalog::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.catalog_name_.Destroy();
}

void ReconcileCatalog::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReconcileCatalog::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.ReconcileCatalog)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.catalog_name_.ClearToEmpty();
  ::memset(&_impl_.parallelism_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.resolve_strategy_) -
      reinterpret_cast<char*>(&_impl_.parallelism_)) + sizeof(_impl_.resolve_strategy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReconcileCatalog::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string catalog_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_catalog_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "greptime.v1.meta.ReconcileCatalog.catalog_name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 parallelism = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.parallelism_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.ResolveStrategy resolve_strategy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resolve_strategy(static_cast<::greptime::v1::meta::ResolveStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReconcileCatalog::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.ReconcileCatalog)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string catalog_name = 1;
  if (!this->_internal_catalog_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_catalog_name().data(), static_cast<int>(this->_internal_catalog_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "greptime.v1.meta.ReconcileCatalog.catalog_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_catalog_name(), target);
  }

  // uint32 parallelism = 2;
  if (this->_internal_parallelism() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_parallelism(), target);
  }

  // .greptime.v1.meta.ResolveStrategy resolve_strategy = 3;
  if (this->_internal_resolve_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_resolve_strategy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.ReconcileCatalog)
  return target;
}

size_t ReconcileCatalog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.ReconcileCatalog)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string catalog_name = 1;
  if (!this->_internal_catalog_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_catalog_name());
  }

  // uint32 parallelism = 2;
  if (this->_internal_parallelism() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_parallelism());
  }

  // .greptime.v1.meta.ResolveStrategy resolve_strategy = 3;
  if (this->_internal_resolve_strategy() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_resolve_strategy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReconcileCatalog::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReconcileCatalog::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReconcileCatalog::GetClassData() const { return &_class_data_; }


void ReconcileCatalog::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReconcileCatalog*>(&to_msg);
  auto& from = static_cast<const ReconcileCatalog&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.ReconcileCatalog)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_catalog_name().empty()) {
    _this->_internal_set_catalog_name(from._internal_catalog_name());
  }
  if (from._internal_parallelism() != 0) {
    _this->_internal_set_parallelism(from._internal_parallelism());
  }
  if (from._internal_resolve_strategy() != 0) {
    _this->_internal_set_resolve_strategy(from._internal_resolve_strategy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReconcileCatalog::CopyFrom(const ReconcileCatalog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.ReconcileCatalog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconcileCatalog::IsInitialized() const {
  return true;
}

void ReconcileCatalog::InternalSwap(ReconcileCatalog* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.catalog_name_, lhs_arena,
      &other->_impl_.catalog_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReconcileCatalog, _impl_.resolve_strategy_)
      + sizeof(ReconcileCatalog::_impl_.resolve_strategy_)
      - PROTOBUF_FIELD_OFFSET(ReconcileCatalog, _impl_.parallelism_)>(
          reinterpret_cast<char*>(&_impl_.parallelism_),
          reinterpret_cast<char*>(&other->_impl_.parallelism_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReconcileCatalog::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fprocedure_2eproto[7]);
}

// ===================================================================

class ReconcileRequest::_Internal {
 public:
  static const ::greptime::v1::meta::RequestHeader& header(const ReconcileRequest* msg);
  static const ::greptime::v1::meta::ReconcileTable& reconcile_table(const ReconcileRequest* msg);
  static const ::greptime::v1::meta::ReconcileDatabase& reconcile_database(const ReconcileRequest* msg);
  static const ::greptime::v1::meta::ReconcileCatalog& reconcile_catalog(const ReconcileRequest* msg);
};

const ::greptime::v1::meta::RequestHeader&
ReconcileRequest::_Internal::header(const ReconcileRequest* msg) {
  return *msg->_impl_.header_;
}
const ::greptime::v1::meta::ReconcileTable&
ReconcileRequest::_Internal::reconcile_table(const ReconcileRequest* msg) {
  return *msg->_impl_.target_.reconcile_table_;
}
const ::greptime::v1::meta::ReconcileDatabase&
ReconcileRequest::_Internal::reconcile_database(const ReconcileRequest* msg) {
  return *msg->_impl_.target_.reconcile_database_;
}
const ::greptime::v1::meta::ReconcileCatalog&
ReconcileRequest::_Internal::reconcile_catalog(const ReconcileRequest* msg) {
  return *msg->_impl_.target_.reconcile_catalog_;
}
void ReconcileRequest::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void ReconcileRequest::set_allocated_reconcile_table(::greptime::v1::meta::ReconcileTable* reconcile_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target();
  if (reconcile_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reconcile_table);
    if (message_arena != submessage_arena) {
      reconcile_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reconcile_table, submessage_arena);
    }
    set_has_reconcile_table();
    _impl_.target_.reconcile_table_ = reconcile_table;
  }
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.meta.ReconcileRequest.reconcile_table)
}
void ReconcileRequest::set_allocated_reconcile_database(::greptime::v1::meta::ReconcileDatabase* reconcile_database) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target();
  if (reconcile_database) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reconcile_database);
    if (message_arena != submessage_arena) {
      reconcile_database = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reconcile_database, submessage_arena);
    }
    set_has_reconcile_database();
    _impl_.target_.reconcile_database_ = reconcile_database;
  }
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.meta.ReconcileRequest.reconcile_database)
}
void ReconcileRequest::set_allocated_reconcile_catalog(::greptime::v1::meta::ReconcileCatalog* reconcile_catalog) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target();
  if (reconcile_catalog) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reconcile_catalog);
    if (message_arena != submessage_arena) {
      reconcile_catalog = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reconcile_catalog, submessage_arena);
    }
    set_has_reconcile_catalog();
    _impl_.target_.reconcile_catalog_ = reconcile_catalog;
  }
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.meta.ReconcileRequest.reconcile_catalog)
}
ReconcileRequest::ReconcileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.ReconcileRequest)
}
ReconcileRequest::ReconcileRequest(const ReconcileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReconcileRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.target_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::greptime::v1::meta::RequestHeader(*from._impl_.header_);
  }
  clear_has_target();
  switch (from.target_case()) {
    case kReconcileTable: {
      _this->_internal_mutable_reconcile_table()->::greptime::v1::meta::ReconcileTable::MergeFrom(
          from._internal_reconcile_table());
      break;
    }
    case kReconcileDatabase: {
      _this->_internal_mutable_reconcile_database()->::greptime::v1::meta::ReconcileDatabase::MergeFrom(
          from._internal_reconcile_database());
      break;
    }
    case kReconcileCatalog: {
      _this->_internal_mutable_reconcile_catalog()->::greptime::v1::meta::ReconcileCatalog::MergeFrom(
          from._internal_reconcile_catalog());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.ReconcileRequest)
}

inline void ReconcileRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.target_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_target();
}

ReconcileRequest::~ReconcileRequest() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.ReconcileRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReconcileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (has_target()) {
    clear_target();
  }
}

void ReconcileRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReconcileRequest::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:greptime.v1.meta.ReconcileRequest)
  switch (target_case()) {
    case kReconcileTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.target_.reconcile_table_;
      }
      break;
    }
    case kReconcileDatabase: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.target_.reconcile_database_;
      }
      break;
    }
    case kReconcileCatalog: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.target_.reconcile_catalog_;
      }
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TARGET_NOT_SET;
}


void ReconcileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.ReconcileRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  clear_target();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReconcileRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .greptime.v1.meta.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.ReconcileTable reconcile_table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reconcile_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.ReconcileDatabase reconcile_database = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reconcile_database(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.ReconcileCatalog reconcile_catalog = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reconcile_catalog(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReconcileRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.ReconcileRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .greptime.v1.meta.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .greptime.v1.meta.ReconcileTable reconcile_table = 2;
  if (_internal_has_reconcile_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::reconcile_table(this),
        _Internal::reconcile_table(this).GetCachedSize(), target, stream);
  }

  // .greptime.v1.meta.ReconcileDatabase reconcile_database = 3;
  if (_internal_has_reconcile_database()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::reconcile_database(this),
        _Internal::reconcile_database(this).GetCachedSize(), target, stream);
  }

  // .greptime.v1.meta.ReconcileCatalog reconcile_catalog = 4;
  if (_internal_has_reconcile_catalog()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::reconcile_catalog(this),
        _Internal::reconcile_catalog(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.ReconcileRequest)
  return target;
}

size_t ReconcileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.ReconcileRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .greptime.v1.meta.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  switch (target_case()) {
    // .greptime.v1.meta.ReconcileTable reconcile_table = 2;
    case kReconcileTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_.reconcile_table_);
      break;
    }
    // .greptime.v1.meta.ReconcileDatabase reconcile_database = 3;
    case kReconcileDatabase: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_.reconcile_database_);
      break;
    }
    // .greptime.v1.meta.ReconcileCatalog reconcile_catalog = 4;
    case kReconcileCatalog: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_.reconcile_catalog_);
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReconcileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReconcileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReconcileRequest::GetClassData() const { return &_class_data_; }


void ReconcileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReconcileRequest*>(&to_msg);
  auto& from = static_cast<const ReconcileRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.ReconcileRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::greptime::v1::meta::RequestHeader::MergeFrom(
        from._internal_header());
  }
  switch (from.target_case()) {
    case kReconcileTable: {
      _this->_internal_mutable_reconcile_table()->::greptime::v1::meta::ReconcileTable::MergeFrom(
          from._internal_reconcile_table());
      break;
    }
    case kReconcileDatabase: {
      _this->_internal_mutable_reconcile_database()->::greptime::v1::meta::ReconcileDatabase::MergeFrom(
          from._internal_reconcile_database());
      break;
    }
    case kReconcileCatalog: {
      _this->_internal_mutable_reconcile_catalog()->::greptime::v1::meta::ReconcileCatalog::MergeFrom(
          from._internal_reconcile_catalog());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReconcileRequest::CopyFrom(const ReconcileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.ReconcileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconcileRequest::IsInitialized() const {
  return true;
}

void ReconcileRequest::InternalSwap(ReconcileRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.header_, other->_impl_.header_);
  swap(_impl_.target_, other->_impl_.target_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReconcileRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fprocedure_2eproto[8]);
}

// ===================================================================

class ReconcileResponse::_Internal {
 public:
  static const ::greptime::v1::meta::ResponseHeader& header(const ReconcileResponse* msg);
  static const ::greptime::v1::meta::ProcedureId& pid(const ReconcileResponse* msg);
};

const ::greptime::v1::meta::ResponseHeader&
ReconcileResponse::_Internal::header(const ReconcileResponse* msg) {
  return *msg->_impl_.header_;
}
const ::greptime::v1::meta::ProcedureId&
ReconcileResponse::_Internal::pid(const ReconcileResponse* msg) {
  return *msg->_impl_.pid_;
}
void ReconcileResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void ReconcileResponse::clear_pid() {
  if (GetArenaForAllocation() == nullptr && _impl_.pid_ != nullptr) {
    delete _impl_.pid_;
  }
  _impl_.pid_ = nullptr;
}
ReconcileResponse::ReconcileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:greptime.v1.meta.ReconcileResponse)
}
ReconcileResponse::ReconcileResponse(const ReconcileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReconcileResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.pid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::greptime::v1::meta::ResponseHeader(*from._impl_.header_);
  }
  if (from._internal_has_pid()) {
    _this->_impl_.pid_ = new ::greptime::v1::meta::ProcedureId(*from._impl_.pid_);
  }
  // @@protoc_insertion_point(copy_constructor:greptime.v1.meta.ReconcileResponse)
}

inline void ReconcileResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.pid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReconcileResponse::~ReconcileResponse() {
  // @@protoc_insertion_point(destructor:greptime.v1.meta.ReconcileResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReconcileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.pid_;
}

void ReconcileResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReconcileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:greptime.v1.meta.ReconcileResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pid_ != nullptr) {
    delete _impl_.pid_;
  }
  _impl_.pid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReconcileResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .greptime.v1.meta.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .greptime.v1.meta.ProcedureId pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReconcileResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:greptime.v1.meta.ReconcileResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .greptime.v1.meta.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .greptime.v1.meta.ProcedureId pid = 2;
  if (this->_internal_has_pid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pid(this),
        _Internal::pid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:greptime.v1.meta.ReconcileResponse)
  return target;
}

size_t ReconcileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:greptime.v1.meta.ReconcileResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .greptime.v1.meta.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .greptime.v1.meta.ProcedureId pid = 2;
  if (this->_internal_has_pid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReconcileResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReconcileResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReconcileResponse::GetClassData() const { return &_class_data_; }


void ReconcileResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReconcileResponse*>(&to_msg);
  auto& from = static_cast<const ReconcileResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:greptime.v1.meta.ReconcileResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::greptime::v1::meta::ResponseHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_pid()) {
    _this->_internal_mutable_pid()->::greptime::v1::meta::ProcedureId::MergeFrom(
        from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReconcileResponse::CopyFrom(const ReconcileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:greptime.v1.meta.ReconcileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconcileResponse::IsInitialized() const {
  return true;
}

void ReconcileResponse::InternalSwap(ReconcileResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReconcileResponse, _impl_.pid_)
      + sizeof(ReconcileResponse::_impl_.pid_)
      - PROTOBUF_FIELD_OFFSET(ReconcileResponse, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReconcileResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto_getter, &descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto_once,
      file_level_metadata_greptime_2fv1_2fmeta_2fprocedure_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace meta
}  // namespace v1
}  // namespace greptime
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::ProcedureMeta*
Arena::CreateMaybeMessage< ::greptime::v1::meta::ProcedureMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::ProcedureMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::QueryProcedureRequest*
Arena::CreateMaybeMessage< ::greptime::v1::meta::QueryProcedureRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::QueryProcedureRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::ProcedureStateResponse*
Arena::CreateMaybeMessage< ::greptime::v1::meta::ProcedureStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::ProcedureStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::ProcedureDetailRequest*
Arena::CreateMaybeMessage< ::greptime::v1::meta::ProcedureDetailRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::ProcedureDetailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::ProcedureDetailResponse*
Arena::CreateMaybeMessage< ::greptime::v1::meta::ProcedureDetailResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::ProcedureDetailResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::ReconcileTable*
Arena::CreateMaybeMessage< ::greptime::v1::meta::ReconcileTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::ReconcileTable >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::ReconcileDatabase*
Arena::CreateMaybeMessage< ::greptime::v1::meta::ReconcileDatabase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::ReconcileDatabase >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::ReconcileCatalog*
Arena::CreateMaybeMessage< ::greptime::v1::meta::ReconcileCatalog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::ReconcileCatalog >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::ReconcileRequest*
Arena::CreateMaybeMessage< ::greptime::v1::meta::ReconcileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::ReconcileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::greptime::v1::meta::ReconcileResponse*
Arena::CreateMaybeMessage< ::greptime::v1::meta::ReconcileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::greptime::v1::meta::ReconcileResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
