// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: greptime/v1/meta/store.proto
// Original file comments:
// Copyright 2023 Greptime Team
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_greptime_2fv1_2fmeta_2fstore_2eproto__INCLUDED
#define GRPC_greptime_2fv1_2fmeta_2fstore_2eproto__INCLUDED

#include "greptime/v1/meta/store.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace greptime {
namespace v1 {
namespace meta {

class Store final {
 public:
  static constexpr char const* service_full_name() {
    return "greptime.v1.meta.Store";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Range gets the keys in the range from the key-value store.
    virtual ::grpc::Status Range(::grpc::ClientContext* context, const ::greptime::v1::meta::RangeRequest& request, ::greptime::v1::meta::RangeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::RangeResponse>> AsyncRange(::grpc::ClientContext* context, const ::greptime::v1::meta::RangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::RangeResponse>>(AsyncRangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::RangeResponse>> PrepareAsyncRange(::grpc::ClientContext* context, const ::greptime::v1::meta::RangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::RangeResponse>>(PrepareAsyncRangeRaw(context, request, cq));
    }
    // Put puts the given key into the key-value store.
    virtual ::grpc::Status Put(::grpc::ClientContext* context, const ::greptime::v1::meta::PutRequest& request, ::greptime::v1::meta::PutResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::PutResponse>> AsyncPut(::grpc::ClientContext* context, const ::greptime::v1::meta::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::PutResponse>>(AsyncPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::PutResponse>> PrepareAsyncPut(::grpc::ClientContext* context, const ::greptime::v1::meta::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::PutResponse>>(PrepareAsyncPutRaw(context, request, cq));
    }
    // BatchGet atomically get values by the given keys from the key-value store.
    virtual ::grpc::Status BatchGet(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchGetRequest& request, ::greptime::v1::meta::BatchGetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::BatchGetResponse>> AsyncBatchGet(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::BatchGetResponse>>(AsyncBatchGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::BatchGetResponse>> PrepareAsyncBatchGet(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::BatchGetResponse>>(PrepareAsyncBatchGetRaw(context, request, cq));
    }
    // BatchPut atomically puts the given keys into the key-value store.
    virtual ::grpc::Status BatchPut(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchPutRequest& request, ::greptime::v1::meta::BatchPutResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::BatchPutResponse>> AsyncBatchPut(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::BatchPutResponse>>(AsyncBatchPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::BatchPutResponse>> PrepareAsyncBatchPut(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::BatchPutResponse>>(PrepareAsyncBatchPutRaw(context, request, cq));
    }
    // BatchDelete atomically deletes the given keys and its associating values
    // from the key-value store.
    virtual ::grpc::Status BatchDelete(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchDeleteRequest& request, ::greptime::v1::meta::BatchDeleteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::BatchDeleteResponse>> AsyncBatchDelete(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::BatchDeleteResponse>>(AsyncBatchDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::BatchDeleteResponse>> PrepareAsyncBatchDelete(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::BatchDeleteResponse>>(PrepareAsyncBatchDeleteRaw(context, request, cq));
    }
    // CompareAndPut atomically puts the value to the given updated
    // value if the current value == the expected value.
    virtual ::grpc::Status CompareAndPut(::grpc::ClientContext* context, const ::greptime::v1::meta::CompareAndPutRequest& request, ::greptime::v1::meta::CompareAndPutResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::CompareAndPutResponse>> AsyncCompareAndPut(::grpc::ClientContext* context, const ::greptime::v1::meta::CompareAndPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::CompareAndPutResponse>>(AsyncCompareAndPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::CompareAndPutResponse>> PrepareAsyncCompareAndPut(::grpc::ClientContext* context, const ::greptime::v1::meta::CompareAndPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::CompareAndPutResponse>>(PrepareAsyncCompareAndPutRaw(context, request, cq));
    }
    // DeleteRange deletes the given range from the key-value store.
    virtual ::grpc::Status DeleteRange(::grpc::ClientContext* context, const ::greptime::v1::meta::DeleteRangeRequest& request, ::greptime::v1::meta::DeleteRangeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::DeleteRangeResponse>> AsyncDeleteRange(::grpc::ClientContext* context, const ::greptime::v1::meta::DeleteRangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::DeleteRangeResponse>>(AsyncDeleteRangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::DeleteRangeResponse>> PrepareAsyncDeleteRange(::grpc::ClientContext* context, const ::greptime::v1::meta::DeleteRangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::DeleteRangeResponse>>(PrepareAsyncDeleteRangeRaw(context, request, cq));
    }
    // MoveValue atomically renames the key to the given updated key.
    virtual ::grpc::Status MoveValue(::grpc::ClientContext* context, const ::greptime::v1::meta::MoveValueRequest& request, ::greptime::v1::meta::MoveValueResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::MoveValueResponse>> AsyncMoveValue(::grpc::ClientContext* context, const ::greptime::v1::meta::MoveValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::MoveValueResponse>>(AsyncMoveValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::MoveValueResponse>> PrepareAsyncMoveValue(::grpc::ClientContext* context, const ::greptime::v1::meta::MoveValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::MoveValueResponse>>(PrepareAsyncMoveValueRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Range gets the keys in the range from the key-value store.
      virtual void Range(::grpc::ClientContext* context, const ::greptime::v1::meta::RangeRequest* request, ::greptime::v1::meta::RangeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Range(::grpc::ClientContext* context, const ::greptime::v1::meta::RangeRequest* request, ::greptime::v1::meta::RangeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Put puts the given key into the key-value store.
      virtual void Put(::grpc::ClientContext* context, const ::greptime::v1::meta::PutRequest* request, ::greptime::v1::meta::PutResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Put(::grpc::ClientContext* context, const ::greptime::v1::meta::PutRequest* request, ::greptime::v1::meta::PutResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // BatchGet atomically get values by the given keys from the key-value store.
      virtual void BatchGet(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchGetRequest* request, ::greptime::v1::meta::BatchGetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BatchGet(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchGetRequest* request, ::greptime::v1::meta::BatchGetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // BatchPut atomically puts the given keys into the key-value store.
      virtual void BatchPut(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchPutRequest* request, ::greptime::v1::meta::BatchPutResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BatchPut(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchPutRequest* request, ::greptime::v1::meta::BatchPutResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // BatchDelete atomically deletes the given keys and its associating values
      // from the key-value store.
      virtual void BatchDelete(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchDeleteRequest* request, ::greptime::v1::meta::BatchDeleteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BatchDelete(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchDeleteRequest* request, ::greptime::v1::meta::BatchDeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // CompareAndPut atomically puts the value to the given updated
      // value if the current value == the expected value.
      virtual void CompareAndPut(::grpc::ClientContext* context, const ::greptime::v1::meta::CompareAndPutRequest* request, ::greptime::v1::meta::CompareAndPutResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CompareAndPut(::grpc::ClientContext* context, const ::greptime::v1::meta::CompareAndPutRequest* request, ::greptime::v1::meta::CompareAndPutResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DeleteRange deletes the given range from the key-value store.
      virtual void DeleteRange(::grpc::ClientContext* context, const ::greptime::v1::meta::DeleteRangeRequest* request, ::greptime::v1::meta::DeleteRangeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRange(::grpc::ClientContext* context, const ::greptime::v1::meta::DeleteRangeRequest* request, ::greptime::v1::meta::DeleteRangeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // MoveValue atomically renames the key to the given updated key.
      virtual void MoveValue(::grpc::ClientContext* context, const ::greptime::v1::meta::MoveValueRequest* request, ::greptime::v1::meta::MoveValueResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MoveValue(::grpc::ClientContext* context, const ::greptime::v1::meta::MoveValueRequest* request, ::greptime::v1::meta::MoveValueResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::RangeResponse>* AsyncRangeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::RangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::RangeResponse>* PrepareAsyncRangeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::RangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::PutResponse>* AsyncPutRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::PutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::PutResponse>* PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::PutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::BatchGetResponse>* AsyncBatchGetRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::BatchGetResponse>* PrepareAsyncBatchGetRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::BatchPutResponse>* AsyncBatchPutRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchPutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::BatchPutResponse>* PrepareAsyncBatchPutRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchPutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::BatchDeleteResponse>* AsyncBatchDeleteRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::BatchDeleteResponse>* PrepareAsyncBatchDeleteRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::CompareAndPutResponse>* AsyncCompareAndPutRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::CompareAndPutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::CompareAndPutResponse>* PrepareAsyncCompareAndPutRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::CompareAndPutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::DeleteRangeResponse>* AsyncDeleteRangeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::DeleteRangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::DeleteRangeResponse>* PrepareAsyncDeleteRangeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::DeleteRangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::MoveValueResponse>* AsyncMoveValueRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::MoveValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::MoveValueResponse>* PrepareAsyncMoveValueRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::MoveValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Range(::grpc::ClientContext* context, const ::greptime::v1::meta::RangeRequest& request, ::greptime::v1::meta::RangeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::RangeResponse>> AsyncRange(::grpc::ClientContext* context, const ::greptime::v1::meta::RangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::RangeResponse>>(AsyncRangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::RangeResponse>> PrepareAsyncRange(::grpc::ClientContext* context, const ::greptime::v1::meta::RangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::RangeResponse>>(PrepareAsyncRangeRaw(context, request, cq));
    }
    ::grpc::Status Put(::grpc::ClientContext* context, const ::greptime::v1::meta::PutRequest& request, ::greptime::v1::meta::PutResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::PutResponse>> AsyncPut(::grpc::ClientContext* context, const ::greptime::v1::meta::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::PutResponse>>(AsyncPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::PutResponse>> PrepareAsyncPut(::grpc::ClientContext* context, const ::greptime::v1::meta::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::PutResponse>>(PrepareAsyncPutRaw(context, request, cq));
    }
    ::grpc::Status BatchGet(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchGetRequest& request, ::greptime::v1::meta::BatchGetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::BatchGetResponse>> AsyncBatchGet(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::BatchGetResponse>>(AsyncBatchGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::BatchGetResponse>> PrepareAsyncBatchGet(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::BatchGetResponse>>(PrepareAsyncBatchGetRaw(context, request, cq));
    }
    ::grpc::Status BatchPut(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchPutRequest& request, ::greptime::v1::meta::BatchPutResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::BatchPutResponse>> AsyncBatchPut(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::BatchPutResponse>>(AsyncBatchPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::BatchPutResponse>> PrepareAsyncBatchPut(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::BatchPutResponse>>(PrepareAsyncBatchPutRaw(context, request, cq));
    }
    ::grpc::Status BatchDelete(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchDeleteRequest& request, ::greptime::v1::meta::BatchDeleteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::BatchDeleteResponse>> AsyncBatchDelete(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::BatchDeleteResponse>>(AsyncBatchDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::BatchDeleteResponse>> PrepareAsyncBatchDelete(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::BatchDeleteResponse>>(PrepareAsyncBatchDeleteRaw(context, request, cq));
    }
    ::grpc::Status CompareAndPut(::grpc::ClientContext* context, const ::greptime::v1::meta::CompareAndPutRequest& request, ::greptime::v1::meta::CompareAndPutResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::CompareAndPutResponse>> AsyncCompareAndPut(::grpc::ClientContext* context, const ::greptime::v1::meta::CompareAndPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::CompareAndPutResponse>>(AsyncCompareAndPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::CompareAndPutResponse>> PrepareAsyncCompareAndPut(::grpc::ClientContext* context, const ::greptime::v1::meta::CompareAndPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::CompareAndPutResponse>>(PrepareAsyncCompareAndPutRaw(context, request, cq));
    }
    ::grpc::Status DeleteRange(::grpc::ClientContext* context, const ::greptime::v1::meta::DeleteRangeRequest& request, ::greptime::v1::meta::DeleteRangeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::DeleteRangeResponse>> AsyncDeleteRange(::grpc::ClientContext* context, const ::greptime::v1::meta::DeleteRangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::DeleteRangeResponse>>(AsyncDeleteRangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::DeleteRangeResponse>> PrepareAsyncDeleteRange(::grpc::ClientContext* context, const ::greptime::v1::meta::DeleteRangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::DeleteRangeResponse>>(PrepareAsyncDeleteRangeRaw(context, request, cq));
    }
    ::grpc::Status MoveValue(::grpc::ClientContext* context, const ::greptime::v1::meta::MoveValueRequest& request, ::greptime::v1::meta::MoveValueResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::MoveValueResponse>> AsyncMoveValue(::grpc::ClientContext* context, const ::greptime::v1::meta::MoveValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::MoveValueResponse>>(AsyncMoveValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::MoveValueResponse>> PrepareAsyncMoveValue(::grpc::ClientContext* context, const ::greptime::v1::meta::MoveValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::MoveValueResponse>>(PrepareAsyncMoveValueRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Range(::grpc::ClientContext* context, const ::greptime::v1::meta::RangeRequest* request, ::greptime::v1::meta::RangeResponse* response, std::function<void(::grpc::Status)>) override;
      void Range(::grpc::ClientContext* context, const ::greptime::v1::meta::RangeRequest* request, ::greptime::v1::meta::RangeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Put(::grpc::ClientContext* context, const ::greptime::v1::meta::PutRequest* request, ::greptime::v1::meta::PutResponse* response, std::function<void(::grpc::Status)>) override;
      void Put(::grpc::ClientContext* context, const ::greptime::v1::meta::PutRequest* request, ::greptime::v1::meta::PutResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BatchGet(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchGetRequest* request, ::greptime::v1::meta::BatchGetResponse* response, std::function<void(::grpc::Status)>) override;
      void BatchGet(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchGetRequest* request, ::greptime::v1::meta::BatchGetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BatchPut(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchPutRequest* request, ::greptime::v1::meta::BatchPutResponse* response, std::function<void(::grpc::Status)>) override;
      void BatchPut(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchPutRequest* request, ::greptime::v1::meta::BatchPutResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BatchDelete(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchDeleteRequest* request, ::greptime::v1::meta::BatchDeleteResponse* response, std::function<void(::grpc::Status)>) override;
      void BatchDelete(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchDeleteRequest* request, ::greptime::v1::meta::BatchDeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CompareAndPut(::grpc::ClientContext* context, const ::greptime::v1::meta::CompareAndPutRequest* request, ::greptime::v1::meta::CompareAndPutResponse* response, std::function<void(::grpc::Status)>) override;
      void CompareAndPut(::grpc::ClientContext* context, const ::greptime::v1::meta::CompareAndPutRequest* request, ::greptime::v1::meta::CompareAndPutResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteRange(::grpc::ClientContext* context, const ::greptime::v1::meta::DeleteRangeRequest* request, ::greptime::v1::meta::DeleteRangeResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteRange(::grpc::ClientContext* context, const ::greptime::v1::meta::DeleteRangeRequest* request, ::greptime::v1::meta::DeleteRangeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MoveValue(::grpc::ClientContext* context, const ::greptime::v1::meta::MoveValueRequest* request, ::greptime::v1::meta::MoveValueResponse* response, std::function<void(::grpc::Status)>) override;
      void MoveValue(::grpc::ClientContext* context, const ::greptime::v1::meta::MoveValueRequest* request, ::greptime::v1::meta::MoveValueResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::RangeResponse>* AsyncRangeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::RangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::RangeResponse>* PrepareAsyncRangeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::RangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::PutResponse>* AsyncPutRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::PutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::PutResponse>* PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::PutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::BatchGetResponse>* AsyncBatchGetRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::BatchGetResponse>* PrepareAsyncBatchGetRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::BatchPutResponse>* AsyncBatchPutRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchPutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::BatchPutResponse>* PrepareAsyncBatchPutRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchPutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::BatchDeleteResponse>* AsyncBatchDeleteRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::BatchDeleteResponse>* PrepareAsyncBatchDeleteRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::CompareAndPutResponse>* AsyncCompareAndPutRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::CompareAndPutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::CompareAndPutResponse>* PrepareAsyncCompareAndPutRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::CompareAndPutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::DeleteRangeResponse>* AsyncDeleteRangeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::DeleteRangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::DeleteRangeResponse>* PrepareAsyncDeleteRangeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::DeleteRangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::MoveValueResponse>* AsyncMoveValueRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::MoveValueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::MoveValueResponse>* PrepareAsyncMoveValueRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::MoveValueRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Range_;
    const ::grpc::internal::RpcMethod rpcmethod_Put_;
    const ::grpc::internal::RpcMethod rpcmethod_BatchGet_;
    const ::grpc::internal::RpcMethod rpcmethod_BatchPut_;
    const ::grpc::internal::RpcMethod rpcmethod_BatchDelete_;
    const ::grpc::internal::RpcMethod rpcmethod_CompareAndPut_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRange_;
    const ::grpc::internal::RpcMethod rpcmethod_MoveValue_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Range gets the keys in the range from the key-value store.
    virtual ::grpc::Status Range(::grpc::ServerContext* context, const ::greptime::v1::meta::RangeRequest* request, ::greptime::v1::meta::RangeResponse* response);
    // Put puts the given key into the key-value store.
    virtual ::grpc::Status Put(::grpc::ServerContext* context, const ::greptime::v1::meta::PutRequest* request, ::greptime::v1::meta::PutResponse* response);
    // BatchGet atomically get values by the given keys from the key-value store.
    virtual ::grpc::Status BatchGet(::grpc::ServerContext* context, const ::greptime::v1::meta::BatchGetRequest* request, ::greptime::v1::meta::BatchGetResponse* response);
    // BatchPut atomically puts the given keys into the key-value store.
    virtual ::grpc::Status BatchPut(::grpc::ServerContext* context, const ::greptime::v1::meta::BatchPutRequest* request, ::greptime::v1::meta::BatchPutResponse* response);
    // BatchDelete atomically deletes the given keys and its associating values
    // from the key-value store.
    virtual ::grpc::Status BatchDelete(::grpc::ServerContext* context, const ::greptime::v1::meta::BatchDeleteRequest* request, ::greptime::v1::meta::BatchDeleteResponse* response);
    // CompareAndPut atomically puts the value to the given updated
    // value if the current value == the expected value.
    virtual ::grpc::Status CompareAndPut(::grpc::ServerContext* context, const ::greptime::v1::meta::CompareAndPutRequest* request, ::greptime::v1::meta::CompareAndPutResponse* response);
    // DeleteRange deletes the given range from the key-value store.
    virtual ::grpc::Status DeleteRange(::grpc::ServerContext* context, const ::greptime::v1::meta::DeleteRangeRequest* request, ::greptime::v1::meta::DeleteRangeResponse* response);
    // MoveValue atomically renames the key to the given updated key.
    virtual ::grpc::Status MoveValue(::grpc::ServerContext* context, const ::greptime::v1::meta::MoveValueRequest* request, ::greptime::v1::meta::MoveValueResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Range : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Range() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Range() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Range(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::RangeRequest* /*request*/, ::greptime::v1::meta::RangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRange(::grpc::ServerContext* context, ::greptime::v1::meta::RangeRequest* request, ::grpc::ServerAsyncResponseWriter< ::greptime::v1::meta::RangeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Put() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::PutRequest* /*request*/, ::greptime::v1::meta::PutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPut(::grpc::ServerContext* context, ::greptime::v1::meta::PutRequest* request, ::grpc::ServerAsyncResponseWriter< ::greptime::v1::meta::PutResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BatchGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BatchGet() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_BatchGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchGet(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::BatchGetRequest* /*request*/, ::greptime::v1::meta::BatchGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchGet(::grpc::ServerContext* context, ::greptime::v1::meta::BatchGetRequest* request, ::grpc::ServerAsyncResponseWriter< ::greptime::v1::meta::BatchGetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BatchPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BatchPut() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_BatchPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchPut(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::BatchPutRequest* /*request*/, ::greptime::v1::meta::BatchPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchPut(::grpc::ServerContext* context, ::greptime::v1::meta::BatchPutRequest* request, ::grpc::ServerAsyncResponseWriter< ::greptime::v1::meta::BatchPutResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BatchDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BatchDelete() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_BatchDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchDelete(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::BatchDeleteRequest* /*request*/, ::greptime::v1::meta::BatchDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchDelete(::grpc::ServerContext* context, ::greptime::v1::meta::BatchDeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::greptime::v1::meta::BatchDeleteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CompareAndPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CompareAndPut() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CompareAndPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompareAndPut(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::CompareAndPutRequest* /*request*/, ::greptime::v1::meta::CompareAndPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompareAndPut(::grpc::ServerContext* context, ::greptime::v1::meta::CompareAndPutRequest* request, ::grpc::ServerAsyncResponseWriter< ::greptime::v1::meta::CompareAndPutResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRange() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DeleteRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRange(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::DeleteRangeRequest* /*request*/, ::greptime::v1::meta::DeleteRangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRange(::grpc::ServerContext* context, ::greptime::v1::meta::DeleteRangeRequest* request, ::grpc::ServerAsyncResponseWriter< ::greptime::v1::meta::DeleteRangeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MoveValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MoveValue() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_MoveValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveValue(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::MoveValueRequest* /*request*/, ::greptime::v1::meta::MoveValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveValue(::grpc::ServerContext* context, ::greptime::v1::meta::MoveValueRequest* request, ::grpc::ServerAsyncResponseWriter< ::greptime::v1::meta::MoveValueResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Range<WithAsyncMethod_Put<WithAsyncMethod_BatchGet<WithAsyncMethod_BatchPut<WithAsyncMethod_BatchDelete<WithAsyncMethod_CompareAndPut<WithAsyncMethod_DeleteRange<WithAsyncMethod_MoveValue<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Range : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Range() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::greptime::v1::meta::RangeRequest, ::greptime::v1::meta::RangeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::greptime::v1::meta::RangeRequest* request, ::greptime::v1::meta::RangeResponse* response) { return this->Range(context, request, response); }));}
    void SetMessageAllocatorFor_Range(
        ::grpc::MessageAllocator< ::greptime::v1::meta::RangeRequest, ::greptime::v1::meta::RangeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::greptime::v1::meta::RangeRequest, ::greptime::v1::meta::RangeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Range() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Range(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::RangeRequest* /*request*/, ::greptime::v1::meta::RangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Range(
      ::grpc::CallbackServerContext* /*context*/, const ::greptime::v1::meta::RangeRequest* /*request*/, ::greptime::v1::meta::RangeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Put() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::greptime::v1::meta::PutRequest, ::greptime::v1::meta::PutResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::greptime::v1::meta::PutRequest* request, ::greptime::v1::meta::PutResponse* response) { return this->Put(context, request, response); }));}
    void SetMessageAllocatorFor_Put(
        ::grpc::MessageAllocator< ::greptime::v1::meta::PutRequest, ::greptime::v1::meta::PutResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::greptime::v1::meta::PutRequest, ::greptime::v1::meta::PutResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::PutRequest* /*request*/, ::greptime::v1::meta::PutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Put(
      ::grpc::CallbackServerContext* /*context*/, const ::greptime::v1::meta::PutRequest* /*request*/, ::greptime::v1::meta::PutResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BatchGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BatchGet() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::greptime::v1::meta::BatchGetRequest, ::greptime::v1::meta::BatchGetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::greptime::v1::meta::BatchGetRequest* request, ::greptime::v1::meta::BatchGetResponse* response) { return this->BatchGet(context, request, response); }));}
    void SetMessageAllocatorFor_BatchGet(
        ::grpc::MessageAllocator< ::greptime::v1::meta::BatchGetRequest, ::greptime::v1::meta::BatchGetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::greptime::v1::meta::BatchGetRequest, ::greptime::v1::meta::BatchGetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BatchGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchGet(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::BatchGetRequest* /*request*/, ::greptime::v1::meta::BatchGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BatchGet(
      ::grpc::CallbackServerContext* /*context*/, const ::greptime::v1::meta::BatchGetRequest* /*request*/, ::greptime::v1::meta::BatchGetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BatchPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BatchPut() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::greptime::v1::meta::BatchPutRequest, ::greptime::v1::meta::BatchPutResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::greptime::v1::meta::BatchPutRequest* request, ::greptime::v1::meta::BatchPutResponse* response) { return this->BatchPut(context, request, response); }));}
    void SetMessageAllocatorFor_BatchPut(
        ::grpc::MessageAllocator< ::greptime::v1::meta::BatchPutRequest, ::greptime::v1::meta::BatchPutResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::greptime::v1::meta::BatchPutRequest, ::greptime::v1::meta::BatchPutResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BatchPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchPut(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::BatchPutRequest* /*request*/, ::greptime::v1::meta::BatchPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BatchPut(
      ::grpc::CallbackServerContext* /*context*/, const ::greptime::v1::meta::BatchPutRequest* /*request*/, ::greptime::v1::meta::BatchPutResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BatchDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BatchDelete() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::greptime::v1::meta::BatchDeleteRequest, ::greptime::v1::meta::BatchDeleteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::greptime::v1::meta::BatchDeleteRequest* request, ::greptime::v1::meta::BatchDeleteResponse* response) { return this->BatchDelete(context, request, response); }));}
    void SetMessageAllocatorFor_BatchDelete(
        ::grpc::MessageAllocator< ::greptime::v1::meta::BatchDeleteRequest, ::greptime::v1::meta::BatchDeleteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::greptime::v1::meta::BatchDeleteRequest, ::greptime::v1::meta::BatchDeleteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BatchDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchDelete(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::BatchDeleteRequest* /*request*/, ::greptime::v1::meta::BatchDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BatchDelete(
      ::grpc::CallbackServerContext* /*context*/, const ::greptime::v1::meta::BatchDeleteRequest* /*request*/, ::greptime::v1::meta::BatchDeleteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CompareAndPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CompareAndPut() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::greptime::v1::meta::CompareAndPutRequest, ::greptime::v1::meta::CompareAndPutResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::greptime::v1::meta::CompareAndPutRequest* request, ::greptime::v1::meta::CompareAndPutResponse* response) { return this->CompareAndPut(context, request, response); }));}
    void SetMessageAllocatorFor_CompareAndPut(
        ::grpc::MessageAllocator< ::greptime::v1::meta::CompareAndPutRequest, ::greptime::v1::meta::CompareAndPutResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::greptime::v1::meta::CompareAndPutRequest, ::greptime::v1::meta::CompareAndPutResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CompareAndPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompareAndPut(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::CompareAndPutRequest* /*request*/, ::greptime::v1::meta::CompareAndPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CompareAndPut(
      ::grpc::CallbackServerContext* /*context*/, const ::greptime::v1::meta::CompareAndPutRequest* /*request*/, ::greptime::v1::meta::CompareAndPutResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteRange() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::greptime::v1::meta::DeleteRangeRequest, ::greptime::v1::meta::DeleteRangeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::greptime::v1::meta::DeleteRangeRequest* request, ::greptime::v1::meta::DeleteRangeResponse* response) { return this->DeleteRange(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteRange(
        ::grpc::MessageAllocator< ::greptime::v1::meta::DeleteRangeRequest, ::greptime::v1::meta::DeleteRangeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::greptime::v1::meta::DeleteRangeRequest, ::greptime::v1::meta::DeleteRangeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRange(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::DeleteRangeRequest* /*request*/, ::greptime::v1::meta::DeleteRangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRange(
      ::grpc::CallbackServerContext* /*context*/, const ::greptime::v1::meta::DeleteRangeRequest* /*request*/, ::greptime::v1::meta::DeleteRangeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MoveValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MoveValue() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::greptime::v1::meta::MoveValueRequest, ::greptime::v1::meta::MoveValueResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::greptime::v1::meta::MoveValueRequest* request, ::greptime::v1::meta::MoveValueResponse* response) { return this->MoveValue(context, request, response); }));}
    void SetMessageAllocatorFor_MoveValue(
        ::grpc::MessageAllocator< ::greptime::v1::meta::MoveValueRequest, ::greptime::v1::meta::MoveValueResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::greptime::v1::meta::MoveValueRequest, ::greptime::v1::meta::MoveValueResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MoveValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveValue(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::MoveValueRequest* /*request*/, ::greptime::v1::meta::MoveValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MoveValue(
      ::grpc::CallbackServerContext* /*context*/, const ::greptime::v1::meta::MoveValueRequest* /*request*/, ::greptime::v1::meta::MoveValueResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Range<WithCallbackMethod_Put<WithCallbackMethod_BatchGet<WithCallbackMethod_BatchPut<WithCallbackMethod_BatchDelete<WithCallbackMethod_CompareAndPut<WithCallbackMethod_DeleteRange<WithCallbackMethod_MoveValue<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Range : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Range() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Range() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Range(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::RangeRequest* /*request*/, ::greptime::v1::meta::RangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Put() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::PutRequest* /*request*/, ::greptime::v1::meta::PutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BatchGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BatchGet() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_BatchGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchGet(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::BatchGetRequest* /*request*/, ::greptime::v1::meta::BatchGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BatchPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BatchPut() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_BatchPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchPut(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::BatchPutRequest* /*request*/, ::greptime::v1::meta::BatchPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BatchDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BatchDelete() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_BatchDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchDelete(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::BatchDeleteRequest* /*request*/, ::greptime::v1::meta::BatchDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CompareAndPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CompareAndPut() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CompareAndPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompareAndPut(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::CompareAndPutRequest* /*request*/, ::greptime::v1::meta::CompareAndPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRange() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DeleteRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRange(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::DeleteRangeRequest* /*request*/, ::greptime::v1::meta::DeleteRangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MoveValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MoveValue() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_MoveValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveValue(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::MoveValueRequest* /*request*/, ::greptime::v1::meta::MoveValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Range : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Range() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Range() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Range(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::RangeRequest* /*request*/, ::greptime::v1::meta::RangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRange(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Put() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::PutRequest* /*request*/, ::greptime::v1::meta::PutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BatchGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BatchGet() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_BatchGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchGet(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::BatchGetRequest* /*request*/, ::greptime::v1::meta::BatchGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BatchPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BatchPut() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_BatchPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchPut(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::BatchPutRequest* /*request*/, ::greptime::v1::meta::BatchPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchPut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BatchDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BatchDelete() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_BatchDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchDelete(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::BatchDeleteRequest* /*request*/, ::greptime::v1::meta::BatchDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CompareAndPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CompareAndPut() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CompareAndPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompareAndPut(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::CompareAndPutRequest* /*request*/, ::greptime::v1::meta::CompareAndPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompareAndPut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRange() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DeleteRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRange(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::DeleteRangeRequest* /*request*/, ::greptime::v1::meta::DeleteRangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRange(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MoveValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MoveValue() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_MoveValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveValue(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::MoveValueRequest* /*request*/, ::greptime::v1::meta::MoveValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveValue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Range : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Range() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Range(context, request, response); }));
    }
    ~WithRawCallbackMethod_Range() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Range(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::RangeRequest* /*request*/, ::greptime::v1::meta::RangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Range(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Put() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Put(context, request, response); }));
    }
    ~WithRawCallbackMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::PutRequest* /*request*/, ::greptime::v1::meta::PutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Put(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BatchGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BatchGet() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BatchGet(context, request, response); }));
    }
    ~WithRawCallbackMethod_BatchGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchGet(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::BatchGetRequest* /*request*/, ::greptime::v1::meta::BatchGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BatchGet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BatchPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BatchPut() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BatchPut(context, request, response); }));
    }
    ~WithRawCallbackMethod_BatchPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchPut(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::BatchPutRequest* /*request*/, ::greptime::v1::meta::BatchPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BatchPut(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BatchDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BatchDelete() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BatchDelete(context, request, response); }));
    }
    ~WithRawCallbackMethod_BatchDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchDelete(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::BatchDeleteRequest* /*request*/, ::greptime::v1::meta::BatchDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BatchDelete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CompareAndPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CompareAndPut() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CompareAndPut(context, request, response); }));
    }
    ~WithRawCallbackMethod_CompareAndPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompareAndPut(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::CompareAndPutRequest* /*request*/, ::greptime::v1::meta::CompareAndPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CompareAndPut(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteRange() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteRange(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRange(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::DeleteRangeRequest* /*request*/, ::greptime::v1::meta::DeleteRangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRange(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MoveValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MoveValue() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MoveValue(context, request, response); }));
    }
    ~WithRawCallbackMethod_MoveValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveValue(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::MoveValueRequest* /*request*/, ::greptime::v1::meta::MoveValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MoveValue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Range : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Range() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::greptime::v1::meta::RangeRequest, ::greptime::v1::meta::RangeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::greptime::v1::meta::RangeRequest, ::greptime::v1::meta::RangeResponse>* streamer) {
                       return this->StreamedRange(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Range() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Range(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::RangeRequest* /*request*/, ::greptime::v1::meta::RangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRange(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::greptime::v1::meta::RangeRequest,::greptime::v1::meta::RangeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Put() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::greptime::v1::meta::PutRequest, ::greptime::v1::meta::PutResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::greptime::v1::meta::PutRequest, ::greptime::v1::meta::PutResponse>* streamer) {
                       return this->StreamedPut(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::PutRequest* /*request*/, ::greptime::v1::meta::PutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::greptime::v1::meta::PutRequest,::greptime::v1::meta::PutResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BatchGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BatchGet() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::greptime::v1::meta::BatchGetRequest, ::greptime::v1::meta::BatchGetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::greptime::v1::meta::BatchGetRequest, ::greptime::v1::meta::BatchGetResponse>* streamer) {
                       return this->StreamedBatchGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BatchGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BatchGet(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::BatchGetRequest* /*request*/, ::greptime::v1::meta::BatchGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBatchGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::greptime::v1::meta::BatchGetRequest,::greptime::v1::meta::BatchGetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BatchPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BatchPut() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::greptime::v1::meta::BatchPutRequest, ::greptime::v1::meta::BatchPutResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::greptime::v1::meta::BatchPutRequest, ::greptime::v1::meta::BatchPutResponse>* streamer) {
                       return this->StreamedBatchPut(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BatchPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BatchPut(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::BatchPutRequest* /*request*/, ::greptime::v1::meta::BatchPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBatchPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::greptime::v1::meta::BatchPutRequest,::greptime::v1::meta::BatchPutResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BatchDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BatchDelete() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::greptime::v1::meta::BatchDeleteRequest, ::greptime::v1::meta::BatchDeleteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::greptime::v1::meta::BatchDeleteRequest, ::greptime::v1::meta::BatchDeleteResponse>* streamer) {
                       return this->StreamedBatchDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BatchDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BatchDelete(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::BatchDeleteRequest* /*request*/, ::greptime::v1::meta::BatchDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBatchDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::greptime::v1::meta::BatchDeleteRequest,::greptime::v1::meta::BatchDeleteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CompareAndPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CompareAndPut() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::greptime::v1::meta::CompareAndPutRequest, ::greptime::v1::meta::CompareAndPutResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::greptime::v1::meta::CompareAndPutRequest, ::greptime::v1::meta::CompareAndPutResponse>* streamer) {
                       return this->StreamedCompareAndPut(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CompareAndPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CompareAndPut(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::CompareAndPutRequest* /*request*/, ::greptime::v1::meta::CompareAndPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCompareAndPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::greptime::v1::meta::CompareAndPutRequest,::greptime::v1::meta::CompareAndPutResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteRange() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::greptime::v1::meta::DeleteRangeRequest, ::greptime::v1::meta::DeleteRangeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::greptime::v1::meta::DeleteRangeRequest, ::greptime::v1::meta::DeleteRangeResponse>* streamer) {
                       return this->StreamedDeleteRange(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRange(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::DeleteRangeRequest* /*request*/, ::greptime::v1::meta::DeleteRangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRange(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::greptime::v1::meta::DeleteRangeRequest,::greptime::v1::meta::DeleteRangeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MoveValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MoveValue() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::greptime::v1::meta::MoveValueRequest, ::greptime::v1::meta::MoveValueResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::greptime::v1::meta::MoveValueRequest, ::greptime::v1::meta::MoveValueResponse>* streamer) {
                       return this->StreamedMoveValue(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MoveValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MoveValue(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::MoveValueRequest* /*request*/, ::greptime::v1::meta::MoveValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMoveValue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::greptime::v1::meta::MoveValueRequest,::greptime::v1::meta::MoveValueResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Range<WithStreamedUnaryMethod_Put<WithStreamedUnaryMethod_BatchGet<WithStreamedUnaryMethod_BatchPut<WithStreamedUnaryMethod_BatchDelete<WithStreamedUnaryMethod_CompareAndPut<WithStreamedUnaryMethod_DeleteRange<WithStreamedUnaryMethod_MoveValue<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Range<WithStreamedUnaryMethod_Put<WithStreamedUnaryMethod_BatchGet<WithStreamedUnaryMethod_BatchPut<WithStreamedUnaryMethod_BatchDelete<WithStreamedUnaryMethod_CompareAndPut<WithStreamedUnaryMethod_DeleteRange<WithStreamedUnaryMethod_MoveValue<Service > > > > > > > > StreamedService;
};

}  // namespace meta
}  // namespace v1
}  // namespace greptime


#endif  // GRPC_greptime_2fv1_2fmeta_2fstore_2eproto__INCLUDED
