// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: greptime/v1/meta/store.proto

#include "greptime/v1/meta/store.pb.h"
#include "greptime/v1/meta/store.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace greptime {
namespace v1 {
namespace meta {

static const char* Store_method_names[] = {
  "/greptime.v1.meta.Store/Range",
  "/greptime.v1.meta.Store/Put",
  "/greptime.v1.meta.Store/BatchGet",
  "/greptime.v1.meta.Store/BatchPut",
  "/greptime.v1.meta.Store/BatchDelete",
  "/greptime.v1.meta.Store/CompareAndPut",
  "/greptime.v1.meta.Store/DeleteRange",
  "/greptime.v1.meta.Store/MoveValue",
};

std::unique_ptr< Store::Stub> Store::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Store::Stub> stub(new Store::Stub(channel, options));
  return stub;
}

Store::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Range_(Store_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Put_(Store_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchGet_(Store_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchPut_(Store_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchDelete_(Store_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CompareAndPut_(Store_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRange_(Store_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveValue_(Store_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Store::Stub::Range(::grpc::ClientContext* context, const ::greptime::v1::meta::RangeRequest& request, ::greptime::v1::meta::RangeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::greptime::v1::meta::RangeRequest, ::greptime::v1::meta::RangeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Range_, context, request, response);
}

void Store::Stub::async::Range(::grpc::ClientContext* context, const ::greptime::v1::meta::RangeRequest* request, ::greptime::v1::meta::RangeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::greptime::v1::meta::RangeRequest, ::greptime::v1::meta::RangeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Range_, context, request, response, std::move(f));
}

void Store::Stub::async::Range(::grpc::ClientContext* context, const ::greptime::v1::meta::RangeRequest* request, ::greptime::v1::meta::RangeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Range_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::RangeResponse>* Store::Stub::PrepareAsyncRangeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::RangeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::greptime::v1::meta::RangeResponse, ::greptime::v1::meta::RangeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Range_, context, request);
}

::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::RangeResponse>* Store::Stub::AsyncRangeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::RangeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRangeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Store::Stub::Put(::grpc::ClientContext* context, const ::greptime::v1::meta::PutRequest& request, ::greptime::v1::meta::PutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::greptime::v1::meta::PutRequest, ::greptime::v1::meta::PutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Put_, context, request, response);
}

void Store::Stub::async::Put(::grpc::ClientContext* context, const ::greptime::v1::meta::PutRequest* request, ::greptime::v1::meta::PutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::greptime::v1::meta::PutRequest, ::greptime::v1::meta::PutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, std::move(f));
}

void Store::Stub::async::Put(::grpc::ClientContext* context, const ::greptime::v1::meta::PutRequest* request, ::greptime::v1::meta::PutResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::PutResponse>* Store::Stub::PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::PutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::greptime::v1::meta::PutResponse, ::greptime::v1::meta::PutRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Put_, context, request);
}

::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::PutResponse>* Store::Stub::AsyncPutRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::PutRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Store::Stub::BatchGet(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchGetRequest& request, ::greptime::v1::meta::BatchGetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::greptime::v1::meta::BatchGetRequest, ::greptime::v1::meta::BatchGetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BatchGet_, context, request, response);
}

void Store::Stub::async::BatchGet(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchGetRequest* request, ::greptime::v1::meta::BatchGetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::greptime::v1::meta::BatchGetRequest, ::greptime::v1::meta::BatchGetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchGet_, context, request, response, std::move(f));
}

void Store::Stub::async::BatchGet(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchGetRequest* request, ::greptime::v1::meta::BatchGetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchGet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::BatchGetResponse>* Store::Stub::PrepareAsyncBatchGetRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::greptime::v1::meta::BatchGetResponse, ::greptime::v1::meta::BatchGetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BatchGet_, context, request);
}

::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::BatchGetResponse>* Store::Stub::AsyncBatchGetRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchGetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBatchGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Store::Stub::BatchPut(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchPutRequest& request, ::greptime::v1::meta::BatchPutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::greptime::v1::meta::BatchPutRequest, ::greptime::v1::meta::BatchPutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BatchPut_, context, request, response);
}

void Store::Stub::async::BatchPut(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchPutRequest* request, ::greptime::v1::meta::BatchPutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::greptime::v1::meta::BatchPutRequest, ::greptime::v1::meta::BatchPutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchPut_, context, request, response, std::move(f));
}

void Store::Stub::async::BatchPut(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchPutRequest* request, ::greptime::v1::meta::BatchPutResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchPut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::BatchPutResponse>* Store::Stub::PrepareAsyncBatchPutRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchPutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::greptime::v1::meta::BatchPutResponse, ::greptime::v1::meta::BatchPutRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BatchPut_, context, request);
}

::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::BatchPutResponse>* Store::Stub::AsyncBatchPutRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchPutRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBatchPutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Store::Stub::BatchDelete(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchDeleteRequest& request, ::greptime::v1::meta::BatchDeleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::greptime::v1::meta::BatchDeleteRequest, ::greptime::v1::meta::BatchDeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BatchDelete_, context, request, response);
}

void Store::Stub::async::BatchDelete(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchDeleteRequest* request, ::greptime::v1::meta::BatchDeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::greptime::v1::meta::BatchDeleteRequest, ::greptime::v1::meta::BatchDeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchDelete_, context, request, response, std::move(f));
}

void Store::Stub::async::BatchDelete(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchDeleteRequest* request, ::greptime::v1::meta::BatchDeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchDelete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::BatchDeleteResponse>* Store::Stub::PrepareAsyncBatchDeleteRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::greptime::v1::meta::BatchDeleteResponse, ::greptime::v1::meta::BatchDeleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BatchDelete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::BatchDeleteResponse>* Store::Stub::AsyncBatchDeleteRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::BatchDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBatchDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Store::Stub::CompareAndPut(::grpc::ClientContext* context, const ::greptime::v1::meta::CompareAndPutRequest& request, ::greptime::v1::meta::CompareAndPutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::greptime::v1::meta::CompareAndPutRequest, ::greptime::v1::meta::CompareAndPutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CompareAndPut_, context, request, response);
}

void Store::Stub::async::CompareAndPut(::grpc::ClientContext* context, const ::greptime::v1::meta::CompareAndPutRequest* request, ::greptime::v1::meta::CompareAndPutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::greptime::v1::meta::CompareAndPutRequest, ::greptime::v1::meta::CompareAndPutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CompareAndPut_, context, request, response, std::move(f));
}

void Store::Stub::async::CompareAndPut(::grpc::ClientContext* context, const ::greptime::v1::meta::CompareAndPutRequest* request, ::greptime::v1::meta::CompareAndPutResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CompareAndPut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::CompareAndPutResponse>* Store::Stub::PrepareAsyncCompareAndPutRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::CompareAndPutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::greptime::v1::meta::CompareAndPutResponse, ::greptime::v1::meta::CompareAndPutRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CompareAndPut_, context, request);
}

::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::CompareAndPutResponse>* Store::Stub::AsyncCompareAndPutRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::CompareAndPutRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCompareAndPutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Store::Stub::DeleteRange(::grpc::ClientContext* context, const ::greptime::v1::meta::DeleteRangeRequest& request, ::greptime::v1::meta::DeleteRangeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::greptime::v1::meta::DeleteRangeRequest, ::greptime::v1::meta::DeleteRangeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteRange_, context, request, response);
}

void Store::Stub::async::DeleteRange(::grpc::ClientContext* context, const ::greptime::v1::meta::DeleteRangeRequest* request, ::greptime::v1::meta::DeleteRangeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::greptime::v1::meta::DeleteRangeRequest, ::greptime::v1::meta::DeleteRangeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRange_, context, request, response, std::move(f));
}

void Store::Stub::async::DeleteRange(::grpc::ClientContext* context, const ::greptime::v1::meta::DeleteRangeRequest* request, ::greptime::v1::meta::DeleteRangeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRange_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::DeleteRangeResponse>* Store::Stub::PrepareAsyncDeleteRangeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::DeleteRangeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::greptime::v1::meta::DeleteRangeResponse, ::greptime::v1::meta::DeleteRangeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteRange_, context, request);
}

::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::DeleteRangeResponse>* Store::Stub::AsyncDeleteRangeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::DeleteRangeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRangeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Store::Stub::MoveValue(::grpc::ClientContext* context, const ::greptime::v1::meta::MoveValueRequest& request, ::greptime::v1::meta::MoveValueResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::greptime::v1::meta::MoveValueRequest, ::greptime::v1::meta::MoveValueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MoveValue_, context, request, response);
}

void Store::Stub::async::MoveValue(::grpc::ClientContext* context, const ::greptime::v1::meta::MoveValueRequest* request, ::greptime::v1::meta::MoveValueResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::greptime::v1::meta::MoveValueRequest, ::greptime::v1::meta::MoveValueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveValue_, context, request, response, std::move(f));
}

void Store::Stub::async::MoveValue(::grpc::ClientContext* context, const ::greptime::v1::meta::MoveValueRequest* request, ::greptime::v1::meta::MoveValueResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveValue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::MoveValueResponse>* Store::Stub::PrepareAsyncMoveValueRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::MoveValueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::greptime::v1::meta::MoveValueResponse, ::greptime::v1::meta::MoveValueRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MoveValue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::MoveValueResponse>* Store::Stub::AsyncMoveValueRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::MoveValueRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveValueRaw(context, request, cq);
  result->StartCall();
  return result;
}

Store::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Store_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Store::Service, ::greptime::v1::meta::RangeRequest, ::greptime::v1::meta::RangeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Store::Service* service,
             ::grpc::ServerContext* ctx,
             const ::greptime::v1::meta::RangeRequest* req,
             ::greptime::v1::meta::RangeResponse* resp) {
               return service->Range(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Store_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Store::Service, ::greptime::v1::meta::PutRequest, ::greptime::v1::meta::PutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Store::Service* service,
             ::grpc::ServerContext* ctx,
             const ::greptime::v1::meta::PutRequest* req,
             ::greptime::v1::meta::PutResponse* resp) {
               return service->Put(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Store_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Store::Service, ::greptime::v1::meta::BatchGetRequest, ::greptime::v1::meta::BatchGetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Store::Service* service,
             ::grpc::ServerContext* ctx,
             const ::greptime::v1::meta::BatchGetRequest* req,
             ::greptime::v1::meta::BatchGetResponse* resp) {
               return service->BatchGet(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Store_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Store::Service, ::greptime::v1::meta::BatchPutRequest, ::greptime::v1::meta::BatchPutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Store::Service* service,
             ::grpc::ServerContext* ctx,
             const ::greptime::v1::meta::BatchPutRequest* req,
             ::greptime::v1::meta::BatchPutResponse* resp) {
               return service->BatchPut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Store_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Store::Service, ::greptime::v1::meta::BatchDeleteRequest, ::greptime::v1::meta::BatchDeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Store::Service* service,
             ::grpc::ServerContext* ctx,
             const ::greptime::v1::meta::BatchDeleteRequest* req,
             ::greptime::v1::meta::BatchDeleteResponse* resp) {
               return service->BatchDelete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Store_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Store::Service, ::greptime::v1::meta::CompareAndPutRequest, ::greptime::v1::meta::CompareAndPutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Store::Service* service,
             ::grpc::ServerContext* ctx,
             const ::greptime::v1::meta::CompareAndPutRequest* req,
             ::greptime::v1::meta::CompareAndPutResponse* resp) {
               return service->CompareAndPut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Store_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Store::Service, ::greptime::v1::meta::DeleteRangeRequest, ::greptime::v1::meta::DeleteRangeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Store::Service* service,
             ::grpc::ServerContext* ctx,
             const ::greptime::v1::meta::DeleteRangeRequest* req,
             ::greptime::v1::meta::DeleteRangeResponse* resp) {
               return service->DeleteRange(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Store_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Store::Service, ::greptime::v1::meta::MoveValueRequest, ::greptime::v1::meta::MoveValueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Store::Service* service,
             ::grpc::ServerContext* ctx,
             const ::greptime::v1::meta::MoveValueRequest* req,
             ::greptime::v1::meta::MoveValueResponse* resp) {
               return service->MoveValue(ctx, req, resp);
             }, this)));
}

Store::Service::~Service() {
}

::grpc::Status Store::Service::Range(::grpc::ServerContext* context, const ::greptime::v1::meta::RangeRequest* request, ::greptime::v1::meta::RangeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Store::Service::Put(::grpc::ServerContext* context, const ::greptime::v1::meta::PutRequest* request, ::greptime::v1::meta::PutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Store::Service::BatchGet(::grpc::ServerContext* context, const ::greptime::v1::meta::BatchGetRequest* request, ::greptime::v1::meta::BatchGetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Store::Service::BatchPut(::grpc::ServerContext* context, const ::greptime::v1::meta::BatchPutRequest* request, ::greptime::v1::meta::BatchPutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Store::Service::BatchDelete(::grpc::ServerContext* context, const ::greptime::v1::meta::BatchDeleteRequest* request, ::greptime::v1::meta::BatchDeleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Store::Service::CompareAndPut(::grpc::ServerContext* context, const ::greptime::v1::meta::CompareAndPutRequest* request, ::greptime::v1::meta::CompareAndPutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Store::Service::DeleteRange(::grpc::ServerContext* context, const ::greptime::v1::meta::DeleteRangeRequest* request, ::greptime::v1::meta::DeleteRangeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Store::Service::MoveValue(::grpc::ServerContext* context, const ::greptime::v1::meta::MoveValueRequest* request, ::greptime::v1::meta::MoveValueResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace greptime
}  // namespace v1
}  // namespace meta

