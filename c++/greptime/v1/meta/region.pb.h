// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: greptime/v1/meta/region.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2fmeta_2fregion_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2fmeta_2fregion_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "greptime/v1/meta/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_greptime_2fv1_2fmeta_2fregion_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_greptime_2fv1_2fmeta_2fregion_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_greptime_2fv1_2fmeta_2fregion_2eproto;
namespace greptime {
namespace v1 {
namespace meta {
class MigrateRegionRequest;
struct MigrateRegionRequestDefaultTypeInternal;
extern MigrateRegionRequestDefaultTypeInternal _MigrateRegionRequest_default_instance_;
class MigrateRegionResponse;
struct MigrateRegionResponseDefaultTypeInternal;
extern MigrateRegionResponseDefaultTypeInternal _MigrateRegionResponse_default_instance_;
}  // namespace meta
}  // namespace v1
}  // namespace greptime
PROTOBUF_NAMESPACE_OPEN
template<> ::greptime::v1::meta::MigrateRegionRequest* Arena::CreateMaybeMessage<::greptime::v1::meta::MigrateRegionRequest>(Arena*);
template<> ::greptime::v1::meta::MigrateRegionResponse* Arena::CreateMaybeMessage<::greptime::v1::meta::MigrateRegionResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace greptime {
namespace v1 {
namespace meta {

// ===================================================================

class MigrateRegionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greptime.v1.meta.MigrateRegionRequest) */ {
 public:
  inline MigrateRegionRequest() : MigrateRegionRequest(nullptr) {}
  ~MigrateRegionRequest() override;
  explicit PROTOBUF_CONSTEXPR MigrateRegionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MigrateRegionRequest(const MigrateRegionRequest& from);
  MigrateRegionRequest(MigrateRegionRequest&& from) noexcept
    : MigrateRegionRequest() {
    *this = ::std::move(from);
  }

  inline MigrateRegionRequest& operator=(const MigrateRegionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MigrateRegionRequest& operator=(MigrateRegionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MigrateRegionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MigrateRegionRequest* internal_default_instance() {
    return reinterpret_cast<const MigrateRegionRequest*>(
               &_MigrateRegionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MigrateRegionRequest& a, MigrateRegionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MigrateRegionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MigrateRegionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MigrateRegionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MigrateRegionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MigrateRegionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MigrateRegionRequest& from) {
    MigrateRegionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MigrateRegionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greptime.v1.meta.MigrateRegionRequest";
  }
  protected:
  explicit MigrateRegionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kRegionIdFieldNumber = 3,
    kFromPeerFieldNumber = 4,
    kToPeerFieldNumber = 5,
    kReplayTimeoutSecsFieldNumber = 6,
  };
  // .greptime.v1.meta.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::greptime::v1::meta::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::greptime::v1::meta::RequestHeader* release_header();
  ::greptime::v1::meta::RequestHeader* mutable_header();
  void set_allocated_header(::greptime::v1::meta::RequestHeader* header);
  private:
  const ::greptime::v1::meta::RequestHeader& _internal_header() const;
  ::greptime::v1::meta::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::greptime::v1::meta::RequestHeader* header);
  ::greptime::v1::meta::RequestHeader* unsafe_arena_release_header();

  // uint64 region_id = 3;
  void clear_region_id();
  uint64_t region_id() const;
  void set_region_id(uint64_t value);
  private:
  uint64_t _internal_region_id() const;
  void _internal_set_region_id(uint64_t value);
  public:

  // uint64 from_peer = 4;
  void clear_from_peer();
  uint64_t from_peer() const;
  void set_from_peer(uint64_t value);
  private:
  uint64_t _internal_from_peer() const;
  void _internal_set_from_peer(uint64_t value);
  public:

  // uint64 to_peer = 5;
  void clear_to_peer();
  uint64_t to_peer() const;
  void set_to_peer(uint64_t value);
  private:
  uint64_t _internal_to_peer() const;
  void _internal_set_to_peer(uint64_t value);
  public:

  // uint32 replay_timeout_secs = 6;
  void clear_replay_timeout_secs();
  uint32_t replay_timeout_secs() const;
  void set_replay_timeout_secs(uint32_t value);
  private:
  uint32_t _internal_replay_timeout_secs() const;
  void _internal_set_replay_timeout_secs(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:greptime.v1.meta.MigrateRegionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::greptime::v1::meta::RequestHeader* header_;
    uint64_t region_id_;
    uint64_t from_peer_;
    uint64_t to_peer_;
    uint32_t replay_timeout_secs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greptime_2fv1_2fmeta_2fregion_2eproto;
};
// -------------------------------------------------------------------

class MigrateRegionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greptime.v1.meta.MigrateRegionResponse) */ {
 public:
  inline MigrateRegionResponse() : MigrateRegionResponse(nullptr) {}
  ~MigrateRegionResponse() override;
  explicit PROTOBUF_CONSTEXPR MigrateRegionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MigrateRegionResponse(const MigrateRegionResponse& from);
  MigrateRegionResponse(MigrateRegionResponse&& from) noexcept
    : MigrateRegionResponse() {
    *this = ::std::move(from);
  }

  inline MigrateRegionResponse& operator=(const MigrateRegionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MigrateRegionResponse& operator=(MigrateRegionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MigrateRegionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MigrateRegionResponse* internal_default_instance() {
    return reinterpret_cast<const MigrateRegionResponse*>(
               &_MigrateRegionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MigrateRegionResponse& a, MigrateRegionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MigrateRegionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MigrateRegionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MigrateRegionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MigrateRegionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MigrateRegionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MigrateRegionResponse& from) {
    MigrateRegionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MigrateRegionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greptime.v1.meta.MigrateRegionResponse";
  }
  protected:
  explicit MigrateRegionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPidFieldNumber = 2,
  };
  // .greptime.v1.meta.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::greptime::v1::meta::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::greptime::v1::meta::ResponseHeader* release_header();
  ::greptime::v1::meta::ResponseHeader* mutable_header();
  void set_allocated_header(::greptime::v1::meta::ResponseHeader* header);
  private:
  const ::greptime::v1::meta::ResponseHeader& _internal_header() const;
  ::greptime::v1::meta::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::greptime::v1::meta::ResponseHeader* header);
  ::greptime::v1::meta::ResponseHeader* unsafe_arena_release_header();

  // .greptime.v1.meta.ProcedureId pid = 2;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  const ::greptime::v1::meta::ProcedureId& pid() const;
  PROTOBUF_NODISCARD ::greptime::v1::meta::ProcedureId* release_pid();
  ::greptime::v1::meta::ProcedureId* mutable_pid();
  void set_allocated_pid(::greptime::v1::meta::ProcedureId* pid);
  private:
  const ::greptime::v1::meta::ProcedureId& _internal_pid() const;
  ::greptime::v1::meta::ProcedureId* _internal_mutable_pid();
  public:
  void unsafe_arena_set_allocated_pid(
      ::greptime::v1::meta::ProcedureId* pid);
  ::greptime::v1::meta::ProcedureId* unsafe_arena_release_pid();

  // @@protoc_insertion_point(class_scope:greptime.v1.meta.MigrateRegionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::greptime::v1::meta::ResponseHeader* header_;
    ::greptime::v1::meta::ProcedureId* pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greptime_2fv1_2fmeta_2fregion_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MigrateRegionRequest

// .greptime.v1.meta.RequestHeader header = 1;
inline bool MigrateRegionRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool MigrateRegionRequest::has_header() const {
  return _internal_has_header();
}
inline const ::greptime::v1::meta::RequestHeader& MigrateRegionRequest::_internal_header() const {
  const ::greptime::v1::meta::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::greptime::v1::meta::RequestHeader&>(
      ::greptime::v1::meta::_RequestHeader_default_instance_);
}
inline const ::greptime::v1::meta::RequestHeader& MigrateRegionRequest::header() const {
  // @@protoc_insertion_point(field_get:greptime.v1.meta.MigrateRegionRequest.header)
  return _internal_header();
}
inline void MigrateRegionRequest::unsafe_arena_set_allocated_header(
    ::greptime::v1::meta::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:greptime.v1.meta.MigrateRegionRequest.header)
}
inline ::greptime::v1::meta::RequestHeader* MigrateRegionRequest::release_header() {
  
  ::greptime::v1::meta::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::greptime::v1::meta::RequestHeader* MigrateRegionRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:greptime.v1.meta.MigrateRegionRequest.header)
  
  ::greptime::v1::meta::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::greptime::v1::meta::RequestHeader* MigrateRegionRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::greptime::v1::meta::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::greptime::v1::meta::RequestHeader* MigrateRegionRequest::mutable_header() {
  ::greptime::v1::meta::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:greptime.v1.meta.MigrateRegionRequest.header)
  return _msg;
}
inline void MigrateRegionRequest::set_allocated_header(::greptime::v1::meta::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.meta.MigrateRegionRequest.header)
}

// uint64 region_id = 3;
inline void MigrateRegionRequest::clear_region_id() {
  _impl_.region_id_ = uint64_t{0u};
}
inline uint64_t MigrateRegionRequest::_internal_region_id() const {
  return _impl_.region_id_;
}
inline uint64_t MigrateRegionRequest::region_id() const {
  // @@protoc_insertion_point(field_get:greptime.v1.meta.MigrateRegionRequest.region_id)
  return _internal_region_id();
}
inline void MigrateRegionRequest::_internal_set_region_id(uint64_t value) {
  
  _impl_.region_id_ = value;
}
inline void MigrateRegionRequest::set_region_id(uint64_t value) {
  _internal_set_region_id(value);
  // @@protoc_insertion_point(field_set:greptime.v1.meta.MigrateRegionRequest.region_id)
}

// uint64 from_peer = 4;
inline void MigrateRegionRequest::clear_from_peer() {
  _impl_.from_peer_ = uint64_t{0u};
}
inline uint64_t MigrateRegionRequest::_internal_from_peer() const {
  return _impl_.from_peer_;
}
inline uint64_t MigrateRegionRequest::from_peer() const {
  // @@protoc_insertion_point(field_get:greptime.v1.meta.MigrateRegionRequest.from_peer)
  return _internal_from_peer();
}
inline void MigrateRegionRequest::_internal_set_from_peer(uint64_t value) {
  
  _impl_.from_peer_ = value;
}
inline void MigrateRegionRequest::set_from_peer(uint64_t value) {
  _internal_set_from_peer(value);
  // @@protoc_insertion_point(field_set:greptime.v1.meta.MigrateRegionRequest.from_peer)
}

// uint64 to_peer = 5;
inline void MigrateRegionRequest::clear_to_peer() {
  _impl_.to_peer_ = uint64_t{0u};
}
inline uint64_t MigrateRegionRequest::_internal_to_peer() const {
  return _impl_.to_peer_;
}
inline uint64_t MigrateRegionRequest::to_peer() const {
  // @@protoc_insertion_point(field_get:greptime.v1.meta.MigrateRegionRequest.to_peer)
  return _internal_to_peer();
}
inline void MigrateRegionRequest::_internal_set_to_peer(uint64_t value) {
  
  _impl_.to_peer_ = value;
}
inline void MigrateRegionRequest::set_to_peer(uint64_t value) {
  _internal_set_to_peer(value);
  // @@protoc_insertion_point(field_set:greptime.v1.meta.MigrateRegionRequest.to_peer)
}

// uint32 replay_timeout_secs = 6;
inline void MigrateRegionRequest::clear_replay_timeout_secs() {
  _impl_.replay_timeout_secs_ = 0u;
}
inline uint32_t MigrateRegionRequest::_internal_replay_timeout_secs() const {
  return _impl_.replay_timeout_secs_;
}
inline uint32_t MigrateRegionRequest::replay_timeout_secs() const {
  // @@protoc_insertion_point(field_get:greptime.v1.meta.MigrateRegionRequest.replay_timeout_secs)
  return _internal_replay_timeout_secs();
}
inline void MigrateRegionRequest::_internal_set_replay_timeout_secs(uint32_t value) {
  
  _impl_.replay_timeout_secs_ = value;
}
inline void MigrateRegionRequest::set_replay_timeout_secs(uint32_t value) {
  _internal_set_replay_timeout_secs(value);
  // @@protoc_insertion_point(field_set:greptime.v1.meta.MigrateRegionRequest.replay_timeout_secs)
}

// -------------------------------------------------------------------

// MigrateRegionResponse

// .greptime.v1.meta.ResponseHeader header = 1;
inline bool MigrateRegionResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool MigrateRegionResponse::has_header() const {
  return _internal_has_header();
}
inline const ::greptime::v1::meta::ResponseHeader& MigrateRegionResponse::_internal_header() const {
  const ::greptime::v1::meta::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::greptime::v1::meta::ResponseHeader&>(
      ::greptime::v1::meta::_ResponseHeader_default_instance_);
}
inline const ::greptime::v1::meta::ResponseHeader& MigrateRegionResponse::header() const {
  // @@protoc_insertion_point(field_get:greptime.v1.meta.MigrateRegionResponse.header)
  return _internal_header();
}
inline void MigrateRegionResponse::unsafe_arena_set_allocated_header(
    ::greptime::v1::meta::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:greptime.v1.meta.MigrateRegionResponse.header)
}
inline ::greptime::v1::meta::ResponseHeader* MigrateRegionResponse::release_header() {
  
  ::greptime::v1::meta::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::greptime::v1::meta::ResponseHeader* MigrateRegionResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:greptime.v1.meta.MigrateRegionResponse.header)
  
  ::greptime::v1::meta::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::greptime::v1::meta::ResponseHeader* MigrateRegionResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::greptime::v1::meta::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::greptime::v1::meta::ResponseHeader* MigrateRegionResponse::mutable_header() {
  ::greptime::v1::meta::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:greptime.v1.meta.MigrateRegionResponse.header)
  return _msg;
}
inline void MigrateRegionResponse::set_allocated_header(::greptime::v1::meta::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.meta.MigrateRegionResponse.header)
}

// .greptime.v1.meta.ProcedureId pid = 2;
inline bool MigrateRegionResponse::_internal_has_pid() const {
  return this != internal_default_instance() && _impl_.pid_ != nullptr;
}
inline bool MigrateRegionResponse::has_pid() const {
  return _internal_has_pid();
}
inline const ::greptime::v1::meta::ProcedureId& MigrateRegionResponse::_internal_pid() const {
  const ::greptime::v1::meta::ProcedureId* p = _impl_.pid_;
  return p != nullptr ? *p : reinterpret_cast<const ::greptime::v1::meta::ProcedureId&>(
      ::greptime::v1::meta::_ProcedureId_default_instance_);
}
inline const ::greptime::v1::meta::ProcedureId& MigrateRegionResponse::pid() const {
  // @@protoc_insertion_point(field_get:greptime.v1.meta.MigrateRegionResponse.pid)
  return _internal_pid();
}
inline void MigrateRegionResponse::unsafe_arena_set_allocated_pid(
    ::greptime::v1::meta::ProcedureId* pid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pid_);
  }
  _impl_.pid_ = pid;
  if (pid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:greptime.v1.meta.MigrateRegionResponse.pid)
}
inline ::greptime::v1::meta::ProcedureId* MigrateRegionResponse::release_pid() {
  
  ::greptime::v1::meta::ProcedureId* temp = _impl_.pid_;
  _impl_.pid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::greptime::v1::meta::ProcedureId* MigrateRegionResponse::unsafe_arena_release_pid() {
  // @@protoc_insertion_point(field_release:greptime.v1.meta.MigrateRegionResponse.pid)
  
  ::greptime::v1::meta::ProcedureId* temp = _impl_.pid_;
  _impl_.pid_ = nullptr;
  return temp;
}
inline ::greptime::v1::meta::ProcedureId* MigrateRegionResponse::_internal_mutable_pid() {
  
  if (_impl_.pid_ == nullptr) {
    auto* p = CreateMaybeMessage<::greptime::v1::meta::ProcedureId>(GetArenaForAllocation());
    _impl_.pid_ = p;
  }
  return _impl_.pid_;
}
inline ::greptime::v1::meta::ProcedureId* MigrateRegionResponse::mutable_pid() {
  ::greptime::v1::meta::ProcedureId* _msg = _internal_mutable_pid();
  // @@protoc_insertion_point(field_mutable:greptime.v1.meta.MigrateRegionResponse.pid)
  return _msg;
}
inline void MigrateRegionResponse::set_allocated_pid(::greptime::v1::meta::ProcedureId* pid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pid_);
  }
  if (pid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pid));
    if (message_arena != submessage_arena) {
      pid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pid_ = pid;
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.meta.MigrateRegionResponse.pid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace meta
}  // namespace v1
}  // namespace greptime

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2fmeta_2fregion_2eproto
