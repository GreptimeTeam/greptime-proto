// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: greptime/v1/meta/pubsub.proto
// Original file comments:
// Copyright 2023 Greptime Team
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_greptime_2fv1_2fmeta_2fpubsub_2eproto__INCLUDED
#define GRPC_greptime_2fv1_2fmeta_2fpubsub_2eproto__INCLUDED

#include "greptime/v1/meta/pubsub.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace greptime {
namespace v1 {
namespace meta {

class PubSub final {
 public:
  static constexpr char const* service_full_name() {
    return "greptime.v1.meta.PubSub";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Subscribe the topics and receive the messages in stream.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::greptime::v1::meta::Message>> Subscribe(::grpc::ClientContext* context, const ::greptime::v1::meta::SubscribeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::greptime::v1::meta::Message>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::greptime::v1::meta::Message>> AsyncSubscribe(::grpc::ClientContext* context, const ::greptime::v1::meta::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::greptime::v1::meta::Message>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::greptime::v1::meta::Message>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::greptime::v1::meta::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::greptime::v1::meta::Message>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    // Unsubscribe the topics.
    virtual ::grpc::Status Unsubscribe(::grpc::ClientContext* context, const ::greptime::v1::meta::UnsubscribeRequest& request, ::greptime::v1::meta::UnsubscribeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::UnsubscribeResponse>> AsyncUnsubscribe(::grpc::ClientContext* context, const ::greptime::v1::meta::UnsubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::UnsubscribeResponse>>(AsyncUnsubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::UnsubscribeResponse>> PrepareAsyncUnsubscribe(::grpc::ClientContext* context, const ::greptime::v1::meta::UnsubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::UnsubscribeResponse>>(PrepareAsyncUnsubscribeRaw(context, request, cq));
    }
    // Publish the message to the topics.
    virtual ::grpc::Status Publish(::grpc::ClientContext* context, const ::greptime::v1::meta::Message& request, ::greptime::v1::meta::PublishResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::PublishResponse>> AsyncPublish(::grpc::ClientContext* context, const ::greptime::v1::meta::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::PublishResponse>>(AsyncPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::PublishResponse>> PrepareAsyncPublish(::grpc::ClientContext* context, const ::greptime::v1::meta::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::PublishResponse>>(PrepareAsyncPublishRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Subscribe the topics and receive the messages in stream.
      virtual void Subscribe(::grpc::ClientContext* context, const ::greptime::v1::meta::SubscribeRequest* request, ::grpc::ClientReadReactor< ::greptime::v1::meta::Message>* reactor) = 0;
      // Unsubscribe the topics.
      virtual void Unsubscribe(::grpc::ClientContext* context, const ::greptime::v1::meta::UnsubscribeRequest* request, ::greptime::v1::meta::UnsubscribeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Unsubscribe(::grpc::ClientContext* context, const ::greptime::v1::meta::UnsubscribeRequest* request, ::greptime::v1::meta::UnsubscribeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Publish the message to the topics.
      virtual void Publish(::grpc::ClientContext* context, const ::greptime::v1::meta::Message* request, ::greptime::v1::meta::PublishResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Publish(::grpc::ClientContext* context, const ::greptime::v1::meta::Message* request, ::greptime::v1::meta::PublishResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::greptime::v1::meta::Message>* SubscribeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::SubscribeRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::greptime::v1::meta::Message>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::greptime::v1::meta::Message>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::SubscribeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::UnsubscribeResponse>* AsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::UnsubscribeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::UnsubscribeResponse>* PrepareAsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::UnsubscribeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::PublishResponse>* AsyncPublishRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::Message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::greptime::v1::meta::PublishResponse>* PrepareAsyncPublishRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::Message& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::greptime::v1::meta::Message>> Subscribe(::grpc::ClientContext* context, const ::greptime::v1::meta::SubscribeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::greptime::v1::meta::Message>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::greptime::v1::meta::Message>> AsyncSubscribe(::grpc::ClientContext* context, const ::greptime::v1::meta::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::greptime::v1::meta::Message>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::greptime::v1::meta::Message>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::greptime::v1::meta::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::greptime::v1::meta::Message>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    ::grpc::Status Unsubscribe(::grpc::ClientContext* context, const ::greptime::v1::meta::UnsubscribeRequest& request, ::greptime::v1::meta::UnsubscribeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::UnsubscribeResponse>> AsyncUnsubscribe(::grpc::ClientContext* context, const ::greptime::v1::meta::UnsubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::UnsubscribeResponse>>(AsyncUnsubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::UnsubscribeResponse>> PrepareAsyncUnsubscribe(::grpc::ClientContext* context, const ::greptime::v1::meta::UnsubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::UnsubscribeResponse>>(PrepareAsyncUnsubscribeRaw(context, request, cq));
    }
    ::grpc::Status Publish(::grpc::ClientContext* context, const ::greptime::v1::meta::Message& request, ::greptime::v1::meta::PublishResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::PublishResponse>> AsyncPublish(::grpc::ClientContext* context, const ::greptime::v1::meta::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::PublishResponse>>(AsyncPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::PublishResponse>> PrepareAsyncPublish(::grpc::ClientContext* context, const ::greptime::v1::meta::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::PublishResponse>>(PrepareAsyncPublishRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Subscribe(::grpc::ClientContext* context, const ::greptime::v1::meta::SubscribeRequest* request, ::grpc::ClientReadReactor< ::greptime::v1::meta::Message>* reactor) override;
      void Unsubscribe(::grpc::ClientContext* context, const ::greptime::v1::meta::UnsubscribeRequest* request, ::greptime::v1::meta::UnsubscribeResponse* response, std::function<void(::grpc::Status)>) override;
      void Unsubscribe(::grpc::ClientContext* context, const ::greptime::v1::meta::UnsubscribeRequest* request, ::greptime::v1::meta::UnsubscribeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Publish(::grpc::ClientContext* context, const ::greptime::v1::meta::Message* request, ::greptime::v1::meta::PublishResponse* response, std::function<void(::grpc::Status)>) override;
      void Publish(::grpc::ClientContext* context, const ::greptime::v1::meta::Message* request, ::greptime::v1::meta::PublishResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::greptime::v1::meta::Message>* SubscribeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::SubscribeRequest& request) override;
    ::grpc::ClientAsyncReader< ::greptime::v1::meta::Message>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::greptime::v1::meta::Message>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::SubscribeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::UnsubscribeResponse>* AsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::UnsubscribeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::UnsubscribeResponse>* PrepareAsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::UnsubscribeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::PublishResponse>* AsyncPublishRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::Message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::PublishResponse>* PrepareAsyncPublishRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::Message& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
    const ::grpc::internal::RpcMethod rpcmethod_Unsubscribe_;
    const ::grpc::internal::RpcMethod rpcmethod_Publish_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Subscribe the topics and receive the messages in stream.
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::greptime::v1::meta::SubscribeRequest* request, ::grpc::ServerWriter< ::greptime::v1::meta::Message>* writer);
    // Unsubscribe the topics.
    virtual ::grpc::Status Unsubscribe(::grpc::ServerContext* context, const ::greptime::v1::meta::UnsubscribeRequest* request, ::greptime::v1::meta::UnsubscribeResponse* response);
    // Publish the message to the topics.
    virtual ::grpc::Status Publish(::grpc::ServerContext* context, const ::greptime::v1::meta::Message* request, ::greptime::v1::meta::PublishResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::greptime::v1::meta::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::greptime::v1::meta::SubscribeRequest* request, ::grpc::ServerAsyncWriter< ::greptime::v1::meta::Message>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Unsubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Unsubscribe() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Unsubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unsubscribe(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::UnsubscribeRequest* /*request*/, ::greptime::v1::meta::UnsubscribeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnsubscribe(::grpc::ServerContext* context, ::greptime::v1::meta::UnsubscribeRequest* request, ::grpc::ServerAsyncResponseWriter< ::greptime::v1::meta::UnsubscribeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Publish() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::Message* /*request*/, ::greptime::v1::meta::PublishResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublish(::grpc::ServerContext* context, ::greptime::v1::meta::Message* request, ::grpc::ServerAsyncResponseWriter< ::greptime::v1::meta::PublishResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Subscribe<WithAsyncMethod_Unsubscribe<WithAsyncMethod_Publish<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::greptime::v1::meta::SubscribeRequest, ::greptime::v1::meta::Message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::greptime::v1::meta::SubscribeRequest* request) { return this->Subscribe(context, request); }));
    }
    ~WithCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::greptime::v1::meta::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::greptime::v1::meta::Message>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::greptime::v1::meta::SubscribeRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Unsubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Unsubscribe() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::greptime::v1::meta::UnsubscribeRequest, ::greptime::v1::meta::UnsubscribeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::greptime::v1::meta::UnsubscribeRequest* request, ::greptime::v1::meta::UnsubscribeResponse* response) { return this->Unsubscribe(context, request, response); }));}
    void SetMessageAllocatorFor_Unsubscribe(
        ::grpc::MessageAllocator< ::greptime::v1::meta::UnsubscribeRequest, ::greptime::v1::meta::UnsubscribeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::greptime::v1::meta::UnsubscribeRequest, ::greptime::v1::meta::UnsubscribeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Unsubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unsubscribe(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::UnsubscribeRequest* /*request*/, ::greptime::v1::meta::UnsubscribeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Unsubscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::greptime::v1::meta::UnsubscribeRequest* /*request*/, ::greptime::v1::meta::UnsubscribeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Publish() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::greptime::v1::meta::Message, ::greptime::v1::meta::PublishResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::greptime::v1::meta::Message* request, ::greptime::v1::meta::PublishResponse* response) { return this->Publish(context, request, response); }));}
    void SetMessageAllocatorFor_Publish(
        ::grpc::MessageAllocator< ::greptime::v1::meta::Message, ::greptime::v1::meta::PublishResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::greptime::v1::meta::Message, ::greptime::v1::meta::PublishResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::Message* /*request*/, ::greptime::v1::meta::PublishResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Publish(
      ::grpc::CallbackServerContext* /*context*/, const ::greptime::v1::meta::Message* /*request*/, ::greptime::v1::meta::PublishResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Subscribe<WithCallbackMethod_Unsubscribe<WithCallbackMethod_Publish<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::greptime::v1::meta::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Unsubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Unsubscribe() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Unsubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unsubscribe(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::UnsubscribeRequest* /*request*/, ::greptime::v1::meta::UnsubscribeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Publish() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::Message* /*request*/, ::greptime::v1::meta::PublishResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Subscribe() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::greptime::v1::meta::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Unsubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Unsubscribe() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Unsubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unsubscribe(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::UnsubscribeRequest* /*request*/, ::greptime::v1::meta::UnsubscribeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnsubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Publish() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::Message* /*request*/, ::greptime::v1::meta::PublishResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublish(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Subscribe(context, request); }));
    }
    ~WithRawCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::greptime::v1::meta::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Unsubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Unsubscribe() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Unsubscribe(context, request, response); }));
    }
    ~WithRawCallbackMethod_Unsubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unsubscribe(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::UnsubscribeRequest* /*request*/, ::greptime::v1::meta::UnsubscribeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Unsubscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Publish() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Publish(context, request, response); }));
    }
    ~WithRawCallbackMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::Message* /*request*/, ::greptime::v1::meta::PublishResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Publish(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Unsubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Unsubscribe() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::greptime::v1::meta::UnsubscribeRequest, ::greptime::v1::meta::UnsubscribeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::greptime::v1::meta::UnsubscribeRequest, ::greptime::v1::meta::UnsubscribeResponse>* streamer) {
                       return this->StreamedUnsubscribe(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Unsubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Unsubscribe(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::UnsubscribeRequest* /*request*/, ::greptime::v1::meta::UnsubscribeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnsubscribe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::greptime::v1::meta::UnsubscribeRequest,::greptime::v1::meta::UnsubscribeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Publish() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::greptime::v1::meta::Message, ::greptime::v1::meta::PublishResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::greptime::v1::meta::Message, ::greptime::v1::meta::PublishResponse>* streamer) {
                       return this->StreamedPublish(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::Message* /*request*/, ::greptime::v1::meta::PublishResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPublish(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::greptime::v1::meta::Message,::greptime::v1::meta::PublishResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Unsubscribe<WithStreamedUnaryMethod_Publish<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::greptime::v1::meta::SubscribeRequest, ::greptime::v1::meta::Message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::greptime::v1::meta::SubscribeRequest, ::greptime::v1::meta::Message>* streamer) {
                       return this->StreamedSubscribe(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::greptime::v1::meta::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::greptime::v1::meta::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribe(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::greptime::v1::meta::SubscribeRequest,::greptime::v1::meta::Message>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Subscribe<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Subscribe<WithStreamedUnaryMethod_Unsubscribe<WithStreamedUnaryMethod_Publish<Service > > > StreamedService;
};

}  // namespace meta
}  // namespace v1
}  // namespace greptime


#endif  // GRPC_greptime_2fv1_2fmeta_2fpubsub_2eproto__INCLUDED
