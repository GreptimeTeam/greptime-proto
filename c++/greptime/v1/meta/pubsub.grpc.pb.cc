// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: greptime/v1/meta/pubsub.proto

#include "greptime/v1/meta/pubsub.pb.h"
#include "greptime/v1/meta/pubsub.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace greptime {
namespace v1 {
namespace meta {

static const char* PubSub_method_names[] = {
  "/greptime.v1.meta.PubSub/Subscribe",
  "/greptime.v1.meta.PubSub/Unsubscribe",
  "/greptime.v1.meta.PubSub/Publish",
};

std::unique_ptr< PubSub::Stub> PubSub::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PubSub::Stub> stub(new PubSub::Stub(channel, options));
  return stub;
}

PubSub::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Subscribe_(PubSub_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Unsubscribe_(PubSub_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Publish_(PubSub_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::greptime::v1::meta::Message>* PubSub::Stub::SubscribeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::SubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::greptime::v1::meta::Message>::Create(channel_.get(), rpcmethod_Subscribe_, context, request);
}

void PubSub::Stub::async::Subscribe(::grpc::ClientContext* context, const ::greptime::v1::meta::SubscribeRequest* request, ::grpc::ClientReadReactor< ::greptime::v1::meta::Message>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::greptime::v1::meta::Message>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::greptime::v1::meta::Message>* PubSub::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::greptime::v1::meta::Message>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::greptime::v1::meta::Message>* PubSub::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::greptime::v1::meta::Message>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false, nullptr);
}

::grpc::Status PubSub::Stub::Unsubscribe(::grpc::ClientContext* context, const ::greptime::v1::meta::UnsubscribeRequest& request, ::greptime::v1::meta::UnsubscribeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::greptime::v1::meta::UnsubscribeRequest, ::greptime::v1::meta::UnsubscribeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Unsubscribe_, context, request, response);
}

void PubSub::Stub::async::Unsubscribe(::grpc::ClientContext* context, const ::greptime::v1::meta::UnsubscribeRequest* request, ::greptime::v1::meta::UnsubscribeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::greptime::v1::meta::UnsubscribeRequest, ::greptime::v1::meta::UnsubscribeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Unsubscribe_, context, request, response, std::move(f));
}

void PubSub::Stub::async::Unsubscribe(::grpc::ClientContext* context, const ::greptime::v1::meta::UnsubscribeRequest* request, ::greptime::v1::meta::UnsubscribeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Unsubscribe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::UnsubscribeResponse>* PubSub::Stub::PrepareAsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::UnsubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::greptime::v1::meta::UnsubscribeResponse, ::greptime::v1::meta::UnsubscribeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Unsubscribe_, context, request);
}

::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::UnsubscribeResponse>* PubSub::Stub::AsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::UnsubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnsubscribeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PubSub::Stub::Publish(::grpc::ClientContext* context, const ::greptime::v1::meta::Message& request, ::greptime::v1::meta::PublishResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::greptime::v1::meta::Message, ::greptime::v1::meta::PublishResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Publish_, context, request, response);
}

void PubSub::Stub::async::Publish(::grpc::ClientContext* context, const ::greptime::v1::meta::Message* request, ::greptime::v1::meta::PublishResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::greptime::v1::meta::Message, ::greptime::v1::meta::PublishResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Publish_, context, request, response, std::move(f));
}

void PubSub::Stub::async::Publish(::grpc::ClientContext* context, const ::greptime::v1::meta::Message* request, ::greptime::v1::meta::PublishResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Publish_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::PublishResponse>* PubSub::Stub::PrepareAsyncPublishRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::Message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::greptime::v1::meta::PublishResponse, ::greptime::v1::meta::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Publish_, context, request);
}

::grpc::ClientAsyncResponseReader< ::greptime::v1::meta::PublishResponse>* PubSub::Stub::AsyncPublishRaw(::grpc::ClientContext* context, const ::greptime::v1::meta::Message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPublishRaw(context, request, cq);
  result->StartCall();
  return result;
}

PubSub::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubSub_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PubSub::Service, ::greptime::v1::meta::SubscribeRequest, ::greptime::v1::meta::Message>(
          [](PubSub::Service* service,
             ::grpc::ServerContext* ctx,
             const ::greptime::v1::meta::SubscribeRequest* req,
             ::grpc::ServerWriter<::greptime::v1::meta::Message>* writer) {
               return service->Subscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubSub_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubSub::Service, ::greptime::v1::meta::UnsubscribeRequest, ::greptime::v1::meta::UnsubscribeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubSub::Service* service,
             ::grpc::ServerContext* ctx,
             const ::greptime::v1::meta::UnsubscribeRequest* req,
             ::greptime::v1::meta::UnsubscribeResponse* resp) {
               return service->Unsubscribe(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubSub_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubSub::Service, ::greptime::v1::meta::Message, ::greptime::v1::meta::PublishResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubSub::Service* service,
             ::grpc::ServerContext* ctx,
             const ::greptime::v1::meta::Message* req,
             ::greptime::v1::meta::PublishResponse* resp) {
               return service->Publish(ctx, req, resp);
             }, this)));
}

PubSub::Service::~Service() {
}

::grpc::Status PubSub::Service::Subscribe(::grpc::ServerContext* context, const ::greptime::v1::meta::SubscribeRequest* request, ::grpc::ServerWriter< ::greptime::v1::meta::Message>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PubSub::Service::Unsubscribe(::grpc::ServerContext* context, const ::greptime::v1::meta::UnsubscribeRequest* request, ::greptime::v1::meta::UnsubscribeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PubSub::Service::Publish(::grpc::ServerContext* context, const ::greptime::v1::meta::Message* request, ::greptime::v1::meta::PublishResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace greptime
}  // namespace v1
}  // namespace meta

