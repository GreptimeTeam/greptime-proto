// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: greptime/v1/meta/procedure.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2fmeta_2fprocedure_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2fmeta_2fprocedure_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "greptime/v1/meta/common.pb.h"
#include "greptime/v1/meta/ddl.pb.h"
#include "greptime/v1/meta/region.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_greptime_2fv1_2fmeta_2fprocedure_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_greptime_2fv1_2fmeta_2fprocedure_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_greptime_2fv1_2fmeta_2fprocedure_2eproto;
namespace greptime {
namespace v1 {
namespace meta {
class ProcedureState;
struct ProcedureStateDefaultTypeInternal;
extern ProcedureStateDefaultTypeInternal _ProcedureState_default_instance_;
}  // namespace meta
}  // namespace v1
}  // namespace greptime
PROTOBUF_NAMESPACE_OPEN
template<> ::greptime::v1::meta::ProcedureState* Arena::CreateMaybeMessage<::greptime::v1::meta::ProcedureState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace greptime {
namespace v1 {
namespace meta {

enum ProcedureStatus : int {
  Executing = 0,
  Suspended = 1,
  Done = 2,
  ProcedureStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ProcedureStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ProcedureStatus_IsValid(int value);
constexpr ProcedureStatus ProcedureStatus_MIN = Executing;
constexpr ProcedureStatus ProcedureStatus_MAX = Done;
constexpr int ProcedureStatus_ARRAYSIZE = ProcedureStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProcedureStatus_descriptor();
template<typename T>
inline const std::string& ProcedureStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProcedureStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProcedureStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProcedureStatus_descriptor(), enum_t_value);
}
inline bool ProcedureStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProcedureStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProcedureStatus>(
    ProcedureStatus_descriptor(), name, value);
}
// ===================================================================

class ProcedureState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greptime.v1.meta.ProcedureState) */ {
 public:
  inline ProcedureState() : ProcedureState(nullptr) {}
  ~ProcedureState() override;
  explicit PROTOBUF_CONSTEXPR ProcedureState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcedureState(const ProcedureState& from);
  ProcedureState(ProcedureState&& from) noexcept
    : ProcedureState() {
    *this = ::std::move(from);
  }

  inline ProcedureState& operator=(const ProcedureState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcedureState& operator=(ProcedureState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcedureState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcedureState* internal_default_instance() {
    return reinterpret_cast<const ProcedureState*>(
               &_ProcedureState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcedureState& a, ProcedureState& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcedureState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcedureState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcedureState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcedureState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcedureState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcedureState& from) {
    ProcedureState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcedureState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greptime.v1.meta.ProcedureState";
  }
  protected:
  explicit ProcedureState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .greptime.v1.meta.ProcedureStatus status = 1;
  void clear_status();
  ::greptime::v1::meta::ProcedureStatus status() const;
  void set_status(::greptime::v1::meta::ProcedureStatus value);
  private:
  ::greptime::v1::meta::ProcedureStatus _internal_status() const;
  void _internal_set_status(::greptime::v1::meta::ProcedureStatus value);
  public:

  // @@protoc_insertion_point(class_scope:greptime.v1.meta.ProcedureState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greptime_2fv1_2fmeta_2fprocedure_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcedureState

// .greptime.v1.meta.ProcedureStatus status = 1;
inline void ProcedureState::clear_status() {
  _impl_.status_ = 0;
}
inline ::greptime::v1::meta::ProcedureStatus ProcedureState::_internal_status() const {
  return static_cast< ::greptime::v1::meta::ProcedureStatus >(_impl_.status_);
}
inline ::greptime::v1::meta::ProcedureStatus ProcedureState::status() const {
  // @@protoc_insertion_point(field_get:greptime.v1.meta.ProcedureState.status)
  return _internal_status();
}
inline void ProcedureState::_internal_set_status(::greptime::v1::meta::ProcedureStatus value) {
  
  _impl_.status_ = value;
}
inline void ProcedureState::set_status(::greptime::v1::meta::ProcedureStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:greptime.v1.meta.ProcedureState.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace meta
}  // namespace v1
}  // namespace greptime

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::greptime::v1::meta::ProcedureStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::greptime::v1::meta::ProcedureStatus>() {
  return ::greptime::v1::meta::ProcedureStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2fmeta_2fprocedure_2eproto
