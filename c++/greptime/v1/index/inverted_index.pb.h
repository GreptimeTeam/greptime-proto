// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: greptime/v1/index/inverted_index.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2findex_2finverted_5findex_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2findex_2finverted_5findex_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_greptime_2fv1_2findex_2finverted_5findex_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_greptime_2fv1_2findex_2finverted_5findex_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_greptime_2fv1_2findex_2finverted_5findex_2eproto;
namespace greptime {
namespace v1 {
namespace index {
class InvertedIndexMeta;
struct InvertedIndexMetaDefaultTypeInternal;
extern InvertedIndexMetaDefaultTypeInternal _InvertedIndexMeta_default_instance_;
class InvertedIndexMetas;
struct InvertedIndexMetasDefaultTypeInternal;
extern InvertedIndexMetasDefaultTypeInternal _InvertedIndexMetas_default_instance_;
class InvertedIndexMetas_MetasEntry_DoNotUse;
struct InvertedIndexMetas_MetasEntry_DoNotUseDefaultTypeInternal;
extern InvertedIndexMetas_MetasEntry_DoNotUseDefaultTypeInternal _InvertedIndexMetas_MetasEntry_DoNotUse_default_instance_;
class InvertedIndexStats;
struct InvertedIndexStatsDefaultTypeInternal;
extern InvertedIndexStatsDefaultTypeInternal _InvertedIndexStats_default_instance_;
}  // namespace index
}  // namespace v1
}  // namespace greptime
PROTOBUF_NAMESPACE_OPEN
template<> ::greptime::v1::index::InvertedIndexMeta* Arena::CreateMaybeMessage<::greptime::v1::index::InvertedIndexMeta>(Arena*);
template<> ::greptime::v1::index::InvertedIndexMetas* Arena::CreateMaybeMessage<::greptime::v1::index::InvertedIndexMetas>(Arena*);
template<> ::greptime::v1::index::InvertedIndexMetas_MetasEntry_DoNotUse* Arena::CreateMaybeMessage<::greptime::v1::index::InvertedIndexMetas_MetasEntry_DoNotUse>(Arena*);
template<> ::greptime::v1::index::InvertedIndexStats* Arena::CreateMaybeMessage<::greptime::v1::index::InvertedIndexStats>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace greptime {
namespace v1 {
namespace index {

// ===================================================================

class InvertedIndexMetas_MetasEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InvertedIndexMetas_MetasEntry_DoNotUse, 
    std::string, ::greptime::v1::index::InvertedIndexMeta,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InvertedIndexMetas_MetasEntry_DoNotUse, 
    std::string, ::greptime::v1::index::InvertedIndexMeta,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  InvertedIndexMetas_MetasEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR InvertedIndexMetas_MetasEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit InvertedIndexMetas_MetasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InvertedIndexMetas_MetasEntry_DoNotUse& other);
  static const InvertedIndexMetas_MetasEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InvertedIndexMetas_MetasEntry_DoNotUse*>(&_InvertedIndexMetas_MetasEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "greptime.v1.index.InvertedIndexMetas.MetasEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_greptime_2fv1_2findex_2finverted_5findex_2eproto;
};

// -------------------------------------------------------------------

class InvertedIndexMetas final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greptime.v1.index.InvertedIndexMetas) */ {
 public:
  inline InvertedIndexMetas() : InvertedIndexMetas(nullptr) {}
  ~InvertedIndexMetas() override;
  explicit PROTOBUF_CONSTEXPR InvertedIndexMetas(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvertedIndexMetas(const InvertedIndexMetas& from);
  InvertedIndexMetas(InvertedIndexMetas&& from) noexcept
    : InvertedIndexMetas() {
    *this = ::std::move(from);
  }

  inline InvertedIndexMetas& operator=(const InvertedIndexMetas& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvertedIndexMetas& operator=(InvertedIndexMetas&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvertedIndexMetas& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvertedIndexMetas* internal_default_instance() {
    return reinterpret_cast<const InvertedIndexMetas*>(
               &_InvertedIndexMetas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InvertedIndexMetas& a, InvertedIndexMetas& b) {
    a.Swap(&b);
  }
  inline void Swap(InvertedIndexMetas* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvertedIndexMetas* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvertedIndexMetas* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvertedIndexMetas>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InvertedIndexMetas& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InvertedIndexMetas& from) {
    InvertedIndexMetas::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvertedIndexMetas* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greptime.v1.index.InvertedIndexMetas";
  }
  protected:
  explicit InvertedIndexMetas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetasFieldNumber = 1,
    kTotalRowCountFieldNumber = 2,
    kSegmentRowCountFieldNumber = 3,
  };
  // map<string, .greptime.v1.index.InvertedIndexMeta> metas = 1;
  int metas_size() const;
  private:
  int _internal_metas_size() const;
  public:
  void clear_metas();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::greptime::v1::index::InvertedIndexMeta >&
      _internal_metas() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::greptime::v1::index::InvertedIndexMeta >*
      _internal_mutable_metas();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::greptime::v1::index::InvertedIndexMeta >&
      metas() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::greptime::v1::index::InvertedIndexMeta >*
      mutable_metas();

  // uint64 total_row_count = 2;
  void clear_total_row_count();
  uint64_t total_row_count() const;
  void set_total_row_count(uint64_t value);
  private:
  uint64_t _internal_total_row_count() const;
  void _internal_set_total_row_count(uint64_t value);
  public:

  // uint64 segment_row_count = 3;
  void clear_segment_row_count();
  uint64_t segment_row_count() const;
  void set_segment_row_count(uint64_t value);
  private:
  uint64_t _internal_segment_row_count() const;
  void _internal_set_segment_row_count(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:greptime.v1.index.InvertedIndexMetas)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        InvertedIndexMetas_MetasEntry_DoNotUse,
        std::string, ::greptime::v1::index::InvertedIndexMeta,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> metas_;
    uint64_t total_row_count_;
    uint64_t segment_row_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greptime_2fv1_2findex_2finverted_5findex_2eproto;
};
// -------------------------------------------------------------------

class InvertedIndexMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greptime.v1.index.InvertedIndexMeta) */ {
 public:
  inline InvertedIndexMeta() : InvertedIndexMeta(nullptr) {}
  ~InvertedIndexMeta() override;
  explicit PROTOBUF_CONSTEXPR InvertedIndexMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvertedIndexMeta(const InvertedIndexMeta& from);
  InvertedIndexMeta(InvertedIndexMeta&& from) noexcept
    : InvertedIndexMeta() {
    *this = ::std::move(from);
  }

  inline InvertedIndexMeta& operator=(const InvertedIndexMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvertedIndexMeta& operator=(InvertedIndexMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvertedIndexMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvertedIndexMeta* internal_default_instance() {
    return reinterpret_cast<const InvertedIndexMeta*>(
               &_InvertedIndexMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InvertedIndexMeta& a, InvertedIndexMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(InvertedIndexMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvertedIndexMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvertedIndexMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvertedIndexMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InvertedIndexMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InvertedIndexMeta& from) {
    InvertedIndexMeta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvertedIndexMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greptime.v1.index.InvertedIndexMeta";
  }
  protected:
  explicit InvertedIndexMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStatsFieldNumber = 8,
    kBaseOffsetFieldNumber = 2,
    kInvertedIndexSizeFieldNumber = 3,
    kRelativeFstOffsetFieldNumber = 4,
    kFstSizeFieldNumber = 5,
    kRelativeNullBitmapOffsetFieldNumber = 6,
    kNullBitmapSizeFieldNumber = 7,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .greptime.v1.index.InvertedIndexStats stats = 8;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::greptime::v1::index::InvertedIndexStats& stats() const;
  PROTOBUF_NODISCARD ::greptime::v1::index::InvertedIndexStats* release_stats();
  ::greptime::v1::index::InvertedIndexStats* mutable_stats();
  void set_allocated_stats(::greptime::v1::index::InvertedIndexStats* stats);
  private:
  const ::greptime::v1::index::InvertedIndexStats& _internal_stats() const;
  ::greptime::v1::index::InvertedIndexStats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::greptime::v1::index::InvertedIndexStats* stats);
  ::greptime::v1::index::InvertedIndexStats* unsafe_arena_release_stats();

  // uint64 base_offset = 2;
  void clear_base_offset();
  uint64_t base_offset() const;
  void set_base_offset(uint64_t value);
  private:
  uint64_t _internal_base_offset() const;
  void _internal_set_base_offset(uint64_t value);
  public:

  // uint64 inverted_index_size = 3;
  void clear_inverted_index_size();
  uint64_t inverted_index_size() const;
  void set_inverted_index_size(uint64_t value);
  private:
  uint64_t _internal_inverted_index_size() const;
  void _internal_set_inverted_index_size(uint64_t value);
  public:

  // uint32 relative_fst_offset = 4;
  void clear_relative_fst_offset();
  uint32_t relative_fst_offset() const;
  void set_relative_fst_offset(uint32_t value);
  private:
  uint32_t _internal_relative_fst_offset() const;
  void _internal_set_relative_fst_offset(uint32_t value);
  public:

  // uint32 fst_size = 5;
  void clear_fst_size();
  uint32_t fst_size() const;
  void set_fst_size(uint32_t value);
  private:
  uint32_t _internal_fst_size() const;
  void _internal_set_fst_size(uint32_t value);
  public:

  // uint32 relative_null_bitmap_offset = 6;
  void clear_relative_null_bitmap_offset();
  uint32_t relative_null_bitmap_offset() const;
  void set_relative_null_bitmap_offset(uint32_t value);
  private:
  uint32_t _internal_relative_null_bitmap_offset() const;
  void _internal_set_relative_null_bitmap_offset(uint32_t value);
  public:

  // uint32 null_bitmap_size = 7;
  void clear_null_bitmap_size();
  uint32_t null_bitmap_size() const;
  void set_null_bitmap_size(uint32_t value);
  private:
  uint32_t _internal_null_bitmap_size() const;
  void _internal_set_null_bitmap_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:greptime.v1.index.InvertedIndexMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::greptime::v1::index::InvertedIndexStats* stats_;
    uint64_t base_offset_;
    uint64_t inverted_index_size_;
    uint32_t relative_fst_offset_;
    uint32_t fst_size_;
    uint32_t relative_null_bitmap_offset_;
    uint32_t null_bitmap_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greptime_2fv1_2findex_2finverted_5findex_2eproto;
};
// -------------------------------------------------------------------

class InvertedIndexStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greptime.v1.index.InvertedIndexStats) */ {
 public:
  inline InvertedIndexStats() : InvertedIndexStats(nullptr) {}
  ~InvertedIndexStats() override;
  explicit PROTOBUF_CONSTEXPR InvertedIndexStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvertedIndexStats(const InvertedIndexStats& from);
  InvertedIndexStats(InvertedIndexStats&& from) noexcept
    : InvertedIndexStats() {
    *this = ::std::move(from);
  }

  inline InvertedIndexStats& operator=(const InvertedIndexStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvertedIndexStats& operator=(InvertedIndexStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvertedIndexStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvertedIndexStats* internal_default_instance() {
    return reinterpret_cast<const InvertedIndexStats*>(
               &_InvertedIndexStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InvertedIndexStats& a, InvertedIndexStats& b) {
    a.Swap(&b);
  }
  inline void Swap(InvertedIndexStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvertedIndexStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvertedIndexStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvertedIndexStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InvertedIndexStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InvertedIndexStats& from) {
    InvertedIndexStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvertedIndexStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greptime.v1.index.InvertedIndexStats";
  }
  protected:
  explicit InvertedIndexStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinValueFieldNumber = 3,
    kMaxValueFieldNumber = 4,
    kNullCountFieldNumber = 1,
    kDistinctCountFieldNumber = 2,
  };
  // bytes min_value = 3;
  void clear_min_value();
  const std::string& min_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_min_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_min_value();
  PROTOBUF_NODISCARD std::string* release_min_value();
  void set_allocated_min_value(std::string* min_value);
  private:
  const std::string& _internal_min_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_min_value(const std::string& value);
  std::string* _internal_mutable_min_value();
  public:

  // bytes max_value = 4;
  void clear_max_value();
  const std::string& max_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_max_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_max_value();
  PROTOBUF_NODISCARD std::string* release_max_value();
  void set_allocated_max_value(std::string* max_value);
  private:
  const std::string& _internal_max_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_max_value(const std::string& value);
  std::string* _internal_mutable_max_value();
  public:

  // uint64 null_count = 1;
  void clear_null_count();
  uint64_t null_count() const;
  void set_null_count(uint64_t value);
  private:
  uint64_t _internal_null_count() const;
  void _internal_set_null_count(uint64_t value);
  public:

  // uint64 distinct_count = 2;
  void clear_distinct_count();
  uint64_t distinct_count() const;
  void set_distinct_count(uint64_t value);
  private:
  uint64_t _internal_distinct_count() const;
  void _internal_set_distinct_count(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:greptime.v1.index.InvertedIndexStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr min_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_value_;
    uint64_t null_count_;
    uint64_t distinct_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greptime_2fv1_2findex_2finverted_5findex_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// InvertedIndexMetas

// map<string, .greptime.v1.index.InvertedIndexMeta> metas = 1;
inline int InvertedIndexMetas::_internal_metas_size() const {
  return _impl_.metas_.size();
}
inline int InvertedIndexMetas::metas_size() const {
  return _internal_metas_size();
}
inline void InvertedIndexMetas::clear_metas() {
  _impl_.metas_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::greptime::v1::index::InvertedIndexMeta >&
InvertedIndexMetas::_internal_metas() const {
  return _impl_.metas_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::greptime::v1::index::InvertedIndexMeta >&
InvertedIndexMetas::metas() const {
  // @@protoc_insertion_point(field_map:greptime.v1.index.InvertedIndexMetas.metas)
  return _internal_metas();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::greptime::v1::index::InvertedIndexMeta >*
InvertedIndexMetas::_internal_mutable_metas() {
  return _impl_.metas_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::greptime::v1::index::InvertedIndexMeta >*
InvertedIndexMetas::mutable_metas() {
  // @@protoc_insertion_point(field_mutable_map:greptime.v1.index.InvertedIndexMetas.metas)
  return _internal_mutable_metas();
}

// uint64 total_row_count = 2;
inline void InvertedIndexMetas::clear_total_row_count() {
  _impl_.total_row_count_ = uint64_t{0u};
}
inline uint64_t InvertedIndexMetas::_internal_total_row_count() const {
  return _impl_.total_row_count_;
}
inline uint64_t InvertedIndexMetas::total_row_count() const {
  // @@protoc_insertion_point(field_get:greptime.v1.index.InvertedIndexMetas.total_row_count)
  return _internal_total_row_count();
}
inline void InvertedIndexMetas::_internal_set_total_row_count(uint64_t value) {
  
  _impl_.total_row_count_ = value;
}
inline void InvertedIndexMetas::set_total_row_count(uint64_t value) {
  _internal_set_total_row_count(value);
  // @@protoc_insertion_point(field_set:greptime.v1.index.InvertedIndexMetas.total_row_count)
}

// uint64 segment_row_count = 3;
inline void InvertedIndexMetas::clear_segment_row_count() {
  _impl_.segment_row_count_ = uint64_t{0u};
}
inline uint64_t InvertedIndexMetas::_internal_segment_row_count() const {
  return _impl_.segment_row_count_;
}
inline uint64_t InvertedIndexMetas::segment_row_count() const {
  // @@protoc_insertion_point(field_get:greptime.v1.index.InvertedIndexMetas.segment_row_count)
  return _internal_segment_row_count();
}
inline void InvertedIndexMetas::_internal_set_segment_row_count(uint64_t value) {
  
  _impl_.segment_row_count_ = value;
}
inline void InvertedIndexMetas::set_segment_row_count(uint64_t value) {
  _internal_set_segment_row_count(value);
  // @@protoc_insertion_point(field_set:greptime.v1.index.InvertedIndexMetas.segment_row_count)
}

// -------------------------------------------------------------------

// InvertedIndexMeta

// string name = 1;
inline void InvertedIndexMeta::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& InvertedIndexMeta::name() const {
  // @@protoc_insertion_point(field_get:greptime.v1.index.InvertedIndexMeta.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InvertedIndexMeta::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.index.InvertedIndexMeta.name)
}
inline std::string* InvertedIndexMeta::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:greptime.v1.index.InvertedIndexMeta.name)
  return _s;
}
inline const std::string& InvertedIndexMeta::_internal_name() const {
  return _impl_.name_.Get();
}
inline void InvertedIndexMeta::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* InvertedIndexMeta::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* InvertedIndexMeta::release_name() {
  // @@protoc_insertion_point(field_release:greptime.v1.index.InvertedIndexMeta.name)
  return _impl_.name_.Release();
}
inline void InvertedIndexMeta::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.index.InvertedIndexMeta.name)
}

// uint64 base_offset = 2;
inline void InvertedIndexMeta::clear_base_offset() {
  _impl_.base_offset_ = uint64_t{0u};
}
inline uint64_t InvertedIndexMeta::_internal_base_offset() const {
  return _impl_.base_offset_;
}
inline uint64_t InvertedIndexMeta::base_offset() const {
  // @@protoc_insertion_point(field_get:greptime.v1.index.InvertedIndexMeta.base_offset)
  return _internal_base_offset();
}
inline void InvertedIndexMeta::_internal_set_base_offset(uint64_t value) {
  
  _impl_.base_offset_ = value;
}
inline void InvertedIndexMeta::set_base_offset(uint64_t value) {
  _internal_set_base_offset(value);
  // @@protoc_insertion_point(field_set:greptime.v1.index.InvertedIndexMeta.base_offset)
}

// uint64 inverted_index_size = 3;
inline void InvertedIndexMeta::clear_inverted_index_size() {
  _impl_.inverted_index_size_ = uint64_t{0u};
}
inline uint64_t InvertedIndexMeta::_internal_inverted_index_size() const {
  return _impl_.inverted_index_size_;
}
inline uint64_t InvertedIndexMeta::inverted_index_size() const {
  // @@protoc_insertion_point(field_get:greptime.v1.index.InvertedIndexMeta.inverted_index_size)
  return _internal_inverted_index_size();
}
inline void InvertedIndexMeta::_internal_set_inverted_index_size(uint64_t value) {
  
  _impl_.inverted_index_size_ = value;
}
inline void InvertedIndexMeta::set_inverted_index_size(uint64_t value) {
  _internal_set_inverted_index_size(value);
  // @@protoc_insertion_point(field_set:greptime.v1.index.InvertedIndexMeta.inverted_index_size)
}

// uint32 relative_fst_offset = 4;
inline void InvertedIndexMeta::clear_relative_fst_offset() {
  _impl_.relative_fst_offset_ = 0u;
}
inline uint32_t InvertedIndexMeta::_internal_relative_fst_offset() const {
  return _impl_.relative_fst_offset_;
}
inline uint32_t InvertedIndexMeta::relative_fst_offset() const {
  // @@protoc_insertion_point(field_get:greptime.v1.index.InvertedIndexMeta.relative_fst_offset)
  return _internal_relative_fst_offset();
}
inline void InvertedIndexMeta::_internal_set_relative_fst_offset(uint32_t value) {
  
  _impl_.relative_fst_offset_ = value;
}
inline void InvertedIndexMeta::set_relative_fst_offset(uint32_t value) {
  _internal_set_relative_fst_offset(value);
  // @@protoc_insertion_point(field_set:greptime.v1.index.InvertedIndexMeta.relative_fst_offset)
}

// uint32 fst_size = 5;
inline void InvertedIndexMeta::clear_fst_size() {
  _impl_.fst_size_ = 0u;
}
inline uint32_t InvertedIndexMeta::_internal_fst_size() const {
  return _impl_.fst_size_;
}
inline uint32_t InvertedIndexMeta::fst_size() const {
  // @@protoc_insertion_point(field_get:greptime.v1.index.InvertedIndexMeta.fst_size)
  return _internal_fst_size();
}
inline void InvertedIndexMeta::_internal_set_fst_size(uint32_t value) {
  
  _impl_.fst_size_ = value;
}
inline void InvertedIndexMeta::set_fst_size(uint32_t value) {
  _internal_set_fst_size(value);
  // @@protoc_insertion_point(field_set:greptime.v1.index.InvertedIndexMeta.fst_size)
}

// uint32 relative_null_bitmap_offset = 6;
inline void InvertedIndexMeta::clear_relative_null_bitmap_offset() {
  _impl_.relative_null_bitmap_offset_ = 0u;
}
inline uint32_t InvertedIndexMeta::_internal_relative_null_bitmap_offset() const {
  return _impl_.relative_null_bitmap_offset_;
}
inline uint32_t InvertedIndexMeta::relative_null_bitmap_offset() const {
  // @@protoc_insertion_point(field_get:greptime.v1.index.InvertedIndexMeta.relative_null_bitmap_offset)
  return _internal_relative_null_bitmap_offset();
}
inline void InvertedIndexMeta::_internal_set_relative_null_bitmap_offset(uint32_t value) {
  
  _impl_.relative_null_bitmap_offset_ = value;
}
inline void InvertedIndexMeta::set_relative_null_bitmap_offset(uint32_t value) {
  _internal_set_relative_null_bitmap_offset(value);
  // @@protoc_insertion_point(field_set:greptime.v1.index.InvertedIndexMeta.relative_null_bitmap_offset)
}

// uint32 null_bitmap_size = 7;
inline void InvertedIndexMeta::clear_null_bitmap_size() {
  _impl_.null_bitmap_size_ = 0u;
}
inline uint32_t InvertedIndexMeta::_internal_null_bitmap_size() const {
  return _impl_.null_bitmap_size_;
}
inline uint32_t InvertedIndexMeta::null_bitmap_size() const {
  // @@protoc_insertion_point(field_get:greptime.v1.index.InvertedIndexMeta.null_bitmap_size)
  return _internal_null_bitmap_size();
}
inline void InvertedIndexMeta::_internal_set_null_bitmap_size(uint32_t value) {
  
  _impl_.null_bitmap_size_ = value;
}
inline void InvertedIndexMeta::set_null_bitmap_size(uint32_t value) {
  _internal_set_null_bitmap_size(value);
  // @@protoc_insertion_point(field_set:greptime.v1.index.InvertedIndexMeta.null_bitmap_size)
}

// .greptime.v1.index.InvertedIndexStats stats = 8;
inline bool InvertedIndexMeta::_internal_has_stats() const {
  return this != internal_default_instance() && _impl_.stats_ != nullptr;
}
inline bool InvertedIndexMeta::has_stats() const {
  return _internal_has_stats();
}
inline void InvertedIndexMeta::clear_stats() {
  if (GetArenaForAllocation() == nullptr && _impl_.stats_ != nullptr) {
    delete _impl_.stats_;
  }
  _impl_.stats_ = nullptr;
}
inline const ::greptime::v1::index::InvertedIndexStats& InvertedIndexMeta::_internal_stats() const {
  const ::greptime::v1::index::InvertedIndexStats* p = _impl_.stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::greptime::v1::index::InvertedIndexStats&>(
      ::greptime::v1::index::_InvertedIndexStats_default_instance_);
}
inline const ::greptime::v1::index::InvertedIndexStats& InvertedIndexMeta::stats() const {
  // @@protoc_insertion_point(field_get:greptime.v1.index.InvertedIndexMeta.stats)
  return _internal_stats();
}
inline void InvertedIndexMeta::unsafe_arena_set_allocated_stats(
    ::greptime::v1::index::InvertedIndexStats* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stats_);
  }
  _impl_.stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:greptime.v1.index.InvertedIndexMeta.stats)
}
inline ::greptime::v1::index::InvertedIndexStats* InvertedIndexMeta::release_stats() {
  
  ::greptime::v1::index::InvertedIndexStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::greptime::v1::index::InvertedIndexStats* InvertedIndexMeta::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:greptime.v1.index.InvertedIndexMeta.stats)
  
  ::greptime::v1::index::InvertedIndexStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
  return temp;
}
inline ::greptime::v1::index::InvertedIndexStats* InvertedIndexMeta::_internal_mutable_stats() {
  
  if (_impl_.stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::greptime::v1::index::InvertedIndexStats>(GetArenaForAllocation());
    _impl_.stats_ = p;
  }
  return _impl_.stats_;
}
inline ::greptime::v1::index::InvertedIndexStats* InvertedIndexMeta::mutable_stats() {
  ::greptime::v1::index::InvertedIndexStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:greptime.v1.index.InvertedIndexMeta.stats)
  return _msg;
}
inline void InvertedIndexMeta::set_allocated_stats(::greptime::v1::index::InvertedIndexStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stats);
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.index.InvertedIndexMeta.stats)
}

// -------------------------------------------------------------------

// InvertedIndexStats

// uint64 null_count = 1;
inline void InvertedIndexStats::clear_null_count() {
  _impl_.null_count_ = uint64_t{0u};
}
inline uint64_t InvertedIndexStats::_internal_null_count() const {
  return _impl_.null_count_;
}
inline uint64_t InvertedIndexStats::null_count() const {
  // @@protoc_insertion_point(field_get:greptime.v1.index.InvertedIndexStats.null_count)
  return _internal_null_count();
}
inline void InvertedIndexStats::_internal_set_null_count(uint64_t value) {
  
  _impl_.null_count_ = value;
}
inline void InvertedIndexStats::set_null_count(uint64_t value) {
  _internal_set_null_count(value);
  // @@protoc_insertion_point(field_set:greptime.v1.index.InvertedIndexStats.null_count)
}

// uint64 distinct_count = 2;
inline void InvertedIndexStats::clear_distinct_count() {
  _impl_.distinct_count_ = uint64_t{0u};
}
inline uint64_t InvertedIndexStats::_internal_distinct_count() const {
  return _impl_.distinct_count_;
}
inline uint64_t InvertedIndexStats::distinct_count() const {
  // @@protoc_insertion_point(field_get:greptime.v1.index.InvertedIndexStats.distinct_count)
  return _internal_distinct_count();
}
inline void InvertedIndexStats::_internal_set_distinct_count(uint64_t value) {
  
  _impl_.distinct_count_ = value;
}
inline void InvertedIndexStats::set_distinct_count(uint64_t value) {
  _internal_set_distinct_count(value);
  // @@protoc_insertion_point(field_set:greptime.v1.index.InvertedIndexStats.distinct_count)
}

// bytes min_value = 3;
inline void InvertedIndexStats::clear_min_value() {
  _impl_.min_value_.ClearToEmpty();
}
inline const std::string& InvertedIndexStats::min_value() const {
  // @@protoc_insertion_point(field_get:greptime.v1.index.InvertedIndexStats.min_value)
  return _internal_min_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InvertedIndexStats::set_min_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.min_value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.index.InvertedIndexStats.min_value)
}
inline std::string* InvertedIndexStats::mutable_min_value() {
  std::string* _s = _internal_mutable_min_value();
  // @@protoc_insertion_point(field_mutable:greptime.v1.index.InvertedIndexStats.min_value)
  return _s;
}
inline const std::string& InvertedIndexStats::_internal_min_value() const {
  return _impl_.min_value_.Get();
}
inline void InvertedIndexStats::_internal_set_min_value(const std::string& value) {
  
  _impl_.min_value_.Set(value, GetArenaForAllocation());
}
inline std::string* InvertedIndexStats::_internal_mutable_min_value() {
  
  return _impl_.min_value_.Mutable(GetArenaForAllocation());
}
inline std::string* InvertedIndexStats::release_min_value() {
  // @@protoc_insertion_point(field_release:greptime.v1.index.InvertedIndexStats.min_value)
  return _impl_.min_value_.Release();
}
inline void InvertedIndexStats::set_allocated_min_value(std::string* min_value) {
  if (min_value != nullptr) {
    
  } else {
    
  }
  _impl_.min_value_.SetAllocated(min_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.min_value_.IsDefault()) {
    _impl_.min_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.index.InvertedIndexStats.min_value)
}

// bytes max_value = 4;
inline void InvertedIndexStats::clear_max_value() {
  _impl_.max_value_.ClearToEmpty();
}
inline const std::string& InvertedIndexStats::max_value() const {
  // @@protoc_insertion_point(field_get:greptime.v1.index.InvertedIndexStats.max_value)
  return _internal_max_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InvertedIndexStats::set_max_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.max_value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.index.InvertedIndexStats.max_value)
}
inline std::string* InvertedIndexStats::mutable_max_value() {
  std::string* _s = _internal_mutable_max_value();
  // @@protoc_insertion_point(field_mutable:greptime.v1.index.InvertedIndexStats.max_value)
  return _s;
}
inline const std::string& InvertedIndexStats::_internal_max_value() const {
  return _impl_.max_value_.Get();
}
inline void InvertedIndexStats::_internal_set_max_value(const std::string& value) {
  
  _impl_.max_value_.Set(value, GetArenaForAllocation());
}
inline std::string* InvertedIndexStats::_internal_mutable_max_value() {
  
  return _impl_.max_value_.Mutable(GetArenaForAllocation());
}
inline std::string* InvertedIndexStats::release_max_value() {
  // @@protoc_insertion_point(field_release:greptime.v1.index.InvertedIndexStats.max_value)
  return _impl_.max_value_.Release();
}
inline void InvertedIndexStats::set_allocated_max_value(std::string* max_value) {
  if (max_value != nullptr) {
    
  } else {
    
  }
  _impl_.max_value_.SetAllocated(max_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.max_value_.IsDefault()) {
    _impl_.max_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.index.InvertedIndexStats.max_value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace index
}  // namespace v1
}  // namespace greptime

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2findex_2finverted_5findex_2eproto
