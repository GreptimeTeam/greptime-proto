// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: greptime/v1/index/bloom_filter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2findex_2fbloom_5ffilter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2findex_2fbloom_5ffilter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_greptime_2fv1_2findex_2fbloom_5ffilter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_greptime_2fv1_2findex_2fbloom_5ffilter_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_greptime_2fv1_2findex_2fbloom_5ffilter_2eproto;
namespace greptime {
namespace v1 {
namespace index {
class BloomFilterLoc;
struct BloomFilterLocDefaultTypeInternal;
extern BloomFilterLocDefaultTypeInternal _BloomFilterLoc_default_instance_;
class BloomFilterMeta;
struct BloomFilterMetaDefaultTypeInternal;
extern BloomFilterMetaDefaultTypeInternal _BloomFilterMeta_default_instance_;
}  // namespace index
}  // namespace v1
}  // namespace greptime
PROTOBUF_NAMESPACE_OPEN
template<> ::greptime::v1::index::BloomFilterLoc* Arena::CreateMaybeMessage<::greptime::v1::index::BloomFilterLoc>(Arena*);
template<> ::greptime::v1::index::BloomFilterMeta* Arena::CreateMaybeMessage<::greptime::v1::index::BloomFilterMeta>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace greptime {
namespace v1 {
namespace index {

// ===================================================================

class BloomFilterMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greptime.v1.index.BloomFilterMeta) */ {
 public:
  inline BloomFilterMeta() : BloomFilterMeta(nullptr) {}
  ~BloomFilterMeta() override;
  explicit PROTOBUF_CONSTEXPR BloomFilterMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BloomFilterMeta(const BloomFilterMeta& from);
  BloomFilterMeta(BloomFilterMeta&& from) noexcept
    : BloomFilterMeta() {
    *this = ::std::move(from);
  }

  inline BloomFilterMeta& operator=(const BloomFilterMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline BloomFilterMeta& operator=(BloomFilterMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BloomFilterMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const BloomFilterMeta* internal_default_instance() {
    return reinterpret_cast<const BloomFilterMeta*>(
               &_BloomFilterMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BloomFilterMeta& a, BloomFilterMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(BloomFilterMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BloomFilterMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BloomFilterMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BloomFilterMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BloomFilterMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BloomFilterMeta& from) {
    BloomFilterMeta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BloomFilterMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greptime.v1.index.BloomFilterMeta";
  }
  protected:
  explicit BloomFilterMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentLocIndicesFieldNumber = 5,
    kBloomFilterLocsFieldNumber = 6,
    kRowsPerSegmentFieldNumber = 1,
    kSegmentCountFieldNumber = 2,
    kRowCountFieldNumber = 3,
    kBloomFilterSizeFieldNumber = 4,
  };
  // repeated uint64 segment_loc_indices = 5;
  int segment_loc_indices_size() const;
  private:
  int _internal_segment_loc_indices_size() const;
  public:
  void clear_segment_loc_indices();
  private:
  uint64_t _internal_segment_loc_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_segment_loc_indices() const;
  void _internal_add_segment_loc_indices(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_segment_loc_indices();
  public:
  uint64_t segment_loc_indices(int index) const;
  void set_segment_loc_indices(int index, uint64_t value);
  void add_segment_loc_indices(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      segment_loc_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_segment_loc_indices();

  // repeated .greptime.v1.index.BloomFilterLoc bloom_filter_locs = 6;
  int bloom_filter_locs_size() const;
  private:
  int _internal_bloom_filter_locs_size() const;
  public:
  void clear_bloom_filter_locs();
  ::greptime::v1::index::BloomFilterLoc* mutable_bloom_filter_locs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::greptime::v1::index::BloomFilterLoc >*
      mutable_bloom_filter_locs();
  private:
  const ::greptime::v1::index::BloomFilterLoc& _internal_bloom_filter_locs(int index) const;
  ::greptime::v1::index::BloomFilterLoc* _internal_add_bloom_filter_locs();
  public:
  const ::greptime::v1::index::BloomFilterLoc& bloom_filter_locs(int index) const;
  ::greptime::v1::index::BloomFilterLoc* add_bloom_filter_locs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::greptime::v1::index::BloomFilterLoc >&
      bloom_filter_locs() const;

  // uint64 rows_per_segment = 1;
  void clear_rows_per_segment();
  uint64_t rows_per_segment() const;
  void set_rows_per_segment(uint64_t value);
  private:
  uint64_t _internal_rows_per_segment() const;
  void _internal_set_rows_per_segment(uint64_t value);
  public:

  // uint64 segment_count = 2;
  void clear_segment_count();
  uint64_t segment_count() const;
  void set_segment_count(uint64_t value);
  private:
  uint64_t _internal_segment_count() const;
  void _internal_set_segment_count(uint64_t value);
  public:

  // uint64 row_count = 3;
  void clear_row_count();
  uint64_t row_count() const;
  void set_row_count(uint64_t value);
  private:
  uint64_t _internal_row_count() const;
  void _internal_set_row_count(uint64_t value);
  public:

  // uint64 bloom_filter_size = 4;
  void clear_bloom_filter_size();
  uint64_t bloom_filter_size() const;
  void set_bloom_filter_size(uint64_t value);
  private:
  uint64_t _internal_bloom_filter_size() const;
  void _internal_set_bloom_filter_size(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:greptime.v1.index.BloomFilterMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > segment_loc_indices_;
    mutable std::atomic<int> _segment_loc_indices_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::greptime::v1::index::BloomFilterLoc > bloom_filter_locs_;
    uint64_t rows_per_segment_;
    uint64_t segment_count_;
    uint64_t row_count_;
    uint64_t bloom_filter_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greptime_2fv1_2findex_2fbloom_5ffilter_2eproto;
};
// -------------------------------------------------------------------

class BloomFilterLoc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greptime.v1.index.BloomFilterLoc) */ {
 public:
  inline BloomFilterLoc() : BloomFilterLoc(nullptr) {}
  ~BloomFilterLoc() override;
  explicit PROTOBUF_CONSTEXPR BloomFilterLoc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BloomFilterLoc(const BloomFilterLoc& from);
  BloomFilterLoc(BloomFilterLoc&& from) noexcept
    : BloomFilterLoc() {
    *this = ::std::move(from);
  }

  inline BloomFilterLoc& operator=(const BloomFilterLoc& from) {
    CopyFrom(from);
    return *this;
  }
  inline BloomFilterLoc& operator=(BloomFilterLoc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BloomFilterLoc& default_instance() {
    return *internal_default_instance();
  }
  static inline const BloomFilterLoc* internal_default_instance() {
    return reinterpret_cast<const BloomFilterLoc*>(
               &_BloomFilterLoc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BloomFilterLoc& a, BloomFilterLoc& b) {
    a.Swap(&b);
  }
  inline void Swap(BloomFilterLoc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BloomFilterLoc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BloomFilterLoc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BloomFilterLoc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BloomFilterLoc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BloomFilterLoc& from) {
    BloomFilterLoc::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BloomFilterLoc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greptime.v1.index.BloomFilterLoc";
  }
  protected:
  explicit BloomFilterLoc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
    kSizeFieldNumber = 2,
    kElementCountFieldNumber = 3,
  };
  // uint64 offset = 1;
  void clear_offset();
  uint64_t offset() const;
  void set_offset(uint64_t value);
  private:
  uint64_t _internal_offset() const;
  void _internal_set_offset(uint64_t value);
  public:

  // uint64 size = 2;
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // uint64 element_count = 3;
  void clear_element_count();
  uint64_t element_count() const;
  void set_element_count(uint64_t value);
  private:
  uint64_t _internal_element_count() const;
  void _internal_set_element_count(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:greptime.v1.index.BloomFilterLoc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t offset_;
    uint64_t size_;
    uint64_t element_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greptime_2fv1_2findex_2fbloom_5ffilter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BloomFilterMeta

// uint64 rows_per_segment = 1;
inline void BloomFilterMeta::clear_rows_per_segment() {
  _impl_.rows_per_segment_ = uint64_t{0u};
}
inline uint64_t BloomFilterMeta::_internal_rows_per_segment() const {
  return _impl_.rows_per_segment_;
}
inline uint64_t BloomFilterMeta::rows_per_segment() const {
  // @@protoc_insertion_point(field_get:greptime.v1.index.BloomFilterMeta.rows_per_segment)
  return _internal_rows_per_segment();
}
inline void BloomFilterMeta::_internal_set_rows_per_segment(uint64_t value) {
  
  _impl_.rows_per_segment_ = value;
}
inline void BloomFilterMeta::set_rows_per_segment(uint64_t value) {
  _internal_set_rows_per_segment(value);
  // @@protoc_insertion_point(field_set:greptime.v1.index.BloomFilterMeta.rows_per_segment)
}

// uint64 segment_count = 2;
inline void BloomFilterMeta::clear_segment_count() {
  _impl_.segment_count_ = uint64_t{0u};
}
inline uint64_t BloomFilterMeta::_internal_segment_count() const {
  return _impl_.segment_count_;
}
inline uint64_t BloomFilterMeta::segment_count() const {
  // @@protoc_insertion_point(field_get:greptime.v1.index.BloomFilterMeta.segment_count)
  return _internal_segment_count();
}
inline void BloomFilterMeta::_internal_set_segment_count(uint64_t value) {
  
  _impl_.segment_count_ = value;
}
inline void BloomFilterMeta::set_segment_count(uint64_t value) {
  _internal_set_segment_count(value);
  // @@protoc_insertion_point(field_set:greptime.v1.index.BloomFilterMeta.segment_count)
}

// uint64 row_count = 3;
inline void BloomFilterMeta::clear_row_count() {
  _impl_.row_count_ = uint64_t{0u};
}
inline uint64_t BloomFilterMeta::_internal_row_count() const {
  return _impl_.row_count_;
}
inline uint64_t BloomFilterMeta::row_count() const {
  // @@protoc_insertion_point(field_get:greptime.v1.index.BloomFilterMeta.row_count)
  return _internal_row_count();
}
inline void BloomFilterMeta::_internal_set_row_count(uint64_t value) {
  
  _impl_.row_count_ = value;
}
inline void BloomFilterMeta::set_row_count(uint64_t value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:greptime.v1.index.BloomFilterMeta.row_count)
}

// uint64 bloom_filter_size = 4;
inline void BloomFilterMeta::clear_bloom_filter_size() {
  _impl_.bloom_filter_size_ = uint64_t{0u};
}
inline uint64_t BloomFilterMeta::_internal_bloom_filter_size() const {
  return _impl_.bloom_filter_size_;
}
inline uint64_t BloomFilterMeta::bloom_filter_size() const {
  // @@protoc_insertion_point(field_get:greptime.v1.index.BloomFilterMeta.bloom_filter_size)
  return _internal_bloom_filter_size();
}
inline void BloomFilterMeta::_internal_set_bloom_filter_size(uint64_t value) {
  
  _impl_.bloom_filter_size_ = value;
}
inline void BloomFilterMeta::set_bloom_filter_size(uint64_t value) {
  _internal_set_bloom_filter_size(value);
  // @@protoc_insertion_point(field_set:greptime.v1.index.BloomFilterMeta.bloom_filter_size)
}

// repeated uint64 segment_loc_indices = 5;
inline int BloomFilterMeta::_internal_segment_loc_indices_size() const {
  return _impl_.segment_loc_indices_.size();
}
inline int BloomFilterMeta::segment_loc_indices_size() const {
  return _internal_segment_loc_indices_size();
}
inline void BloomFilterMeta::clear_segment_loc_indices() {
  _impl_.segment_loc_indices_.Clear();
}
inline uint64_t BloomFilterMeta::_internal_segment_loc_indices(int index) const {
  return _impl_.segment_loc_indices_.Get(index);
}
inline uint64_t BloomFilterMeta::segment_loc_indices(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.index.BloomFilterMeta.segment_loc_indices)
  return _internal_segment_loc_indices(index);
}
inline void BloomFilterMeta::set_segment_loc_indices(int index, uint64_t value) {
  _impl_.segment_loc_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:greptime.v1.index.BloomFilterMeta.segment_loc_indices)
}
inline void BloomFilterMeta::_internal_add_segment_loc_indices(uint64_t value) {
  _impl_.segment_loc_indices_.Add(value);
}
inline void BloomFilterMeta::add_segment_loc_indices(uint64_t value) {
  _internal_add_segment_loc_indices(value);
  // @@protoc_insertion_point(field_add:greptime.v1.index.BloomFilterMeta.segment_loc_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
BloomFilterMeta::_internal_segment_loc_indices() const {
  return _impl_.segment_loc_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
BloomFilterMeta::segment_loc_indices() const {
  // @@protoc_insertion_point(field_list:greptime.v1.index.BloomFilterMeta.segment_loc_indices)
  return _internal_segment_loc_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
BloomFilterMeta::_internal_mutable_segment_loc_indices() {
  return &_impl_.segment_loc_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
BloomFilterMeta::mutable_segment_loc_indices() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.index.BloomFilterMeta.segment_loc_indices)
  return _internal_mutable_segment_loc_indices();
}

// repeated .greptime.v1.index.BloomFilterLoc bloom_filter_locs = 6;
inline int BloomFilterMeta::_internal_bloom_filter_locs_size() const {
  return _impl_.bloom_filter_locs_.size();
}
inline int BloomFilterMeta::bloom_filter_locs_size() const {
  return _internal_bloom_filter_locs_size();
}
inline void BloomFilterMeta::clear_bloom_filter_locs() {
  _impl_.bloom_filter_locs_.Clear();
}
inline ::greptime::v1::index::BloomFilterLoc* BloomFilterMeta::mutable_bloom_filter_locs(int index) {
  // @@protoc_insertion_point(field_mutable:greptime.v1.index.BloomFilterMeta.bloom_filter_locs)
  return _impl_.bloom_filter_locs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::greptime::v1::index::BloomFilterLoc >*
BloomFilterMeta::mutable_bloom_filter_locs() {
  // @@protoc_insertion_point(field_mutable_list:greptime.v1.index.BloomFilterMeta.bloom_filter_locs)
  return &_impl_.bloom_filter_locs_;
}
inline const ::greptime::v1::index::BloomFilterLoc& BloomFilterMeta::_internal_bloom_filter_locs(int index) const {
  return _impl_.bloom_filter_locs_.Get(index);
}
inline const ::greptime::v1::index::BloomFilterLoc& BloomFilterMeta::bloom_filter_locs(int index) const {
  // @@protoc_insertion_point(field_get:greptime.v1.index.BloomFilterMeta.bloom_filter_locs)
  return _internal_bloom_filter_locs(index);
}
inline ::greptime::v1::index::BloomFilterLoc* BloomFilterMeta::_internal_add_bloom_filter_locs() {
  return _impl_.bloom_filter_locs_.Add();
}
inline ::greptime::v1::index::BloomFilterLoc* BloomFilterMeta::add_bloom_filter_locs() {
  ::greptime::v1::index::BloomFilterLoc* _add = _internal_add_bloom_filter_locs();
  // @@protoc_insertion_point(field_add:greptime.v1.index.BloomFilterMeta.bloom_filter_locs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::greptime::v1::index::BloomFilterLoc >&
BloomFilterMeta::bloom_filter_locs() const {
  // @@protoc_insertion_point(field_list:greptime.v1.index.BloomFilterMeta.bloom_filter_locs)
  return _impl_.bloom_filter_locs_;
}

// -------------------------------------------------------------------

// BloomFilterLoc

// uint64 offset = 1;
inline void BloomFilterLoc::clear_offset() {
  _impl_.offset_ = uint64_t{0u};
}
inline uint64_t BloomFilterLoc::_internal_offset() const {
  return _impl_.offset_;
}
inline uint64_t BloomFilterLoc::offset() const {
  // @@protoc_insertion_point(field_get:greptime.v1.index.BloomFilterLoc.offset)
  return _internal_offset();
}
inline void BloomFilterLoc::_internal_set_offset(uint64_t value) {
  
  _impl_.offset_ = value;
}
inline void BloomFilterLoc::set_offset(uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:greptime.v1.index.BloomFilterLoc.offset)
}

// uint64 size = 2;
inline void BloomFilterLoc::clear_size() {
  _impl_.size_ = uint64_t{0u};
}
inline uint64_t BloomFilterLoc::_internal_size() const {
  return _impl_.size_;
}
inline uint64_t BloomFilterLoc::size() const {
  // @@protoc_insertion_point(field_get:greptime.v1.index.BloomFilterLoc.size)
  return _internal_size();
}
inline void BloomFilterLoc::_internal_set_size(uint64_t value) {
  
  _impl_.size_ = value;
}
inline void BloomFilterLoc::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:greptime.v1.index.BloomFilterLoc.size)
}

// uint64 element_count = 3;
inline void BloomFilterLoc::clear_element_count() {
  _impl_.element_count_ = uint64_t{0u};
}
inline uint64_t BloomFilterLoc::_internal_element_count() const {
  return _impl_.element_count_;
}
inline uint64_t BloomFilterLoc::element_count() const {
  // @@protoc_insertion_point(field_get:greptime.v1.index.BloomFilterLoc.element_count)
  return _internal_element_count();
}
inline void BloomFilterLoc::_internal_set_element_count(uint64_t value) {
  
  _impl_.element_count_ = value;
}
inline void BloomFilterLoc::set_element_count(uint64_t value) {
  _internal_set_element_count(value);
  // @@protoc_insertion_point(field_set:greptime.v1.index.BloomFilterLoc.element_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace index
}  // namespace v1
}  // namespace greptime

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2findex_2fbloom_5ffilter_2eproto
