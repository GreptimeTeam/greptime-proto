// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: greptime/v1/prom.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2fprom_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2fprom_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "greptime/v1/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_greptime_2fv1_2fprom_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_greptime_2fv1_2fprom_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_greptime_2fv1_2fprom_2eproto;
namespace greptime {
namespace v1 {
class PromInstantQuery;
struct PromInstantQueryDefaultTypeInternal;
extern PromInstantQueryDefaultTypeInternal _PromInstantQuery_default_instance_;
class PromRangeQuery;
struct PromRangeQueryDefaultTypeInternal;
extern PromRangeQueryDefaultTypeInternal _PromRangeQuery_default_instance_;
class PromqlRequest;
struct PromqlRequestDefaultTypeInternal;
extern PromqlRequestDefaultTypeInternal _PromqlRequest_default_instance_;
class PromqlResponse;
struct PromqlResponseDefaultTypeInternal;
extern PromqlResponseDefaultTypeInternal _PromqlResponse_default_instance_;
}  // namespace v1
}  // namespace greptime
PROTOBUF_NAMESPACE_OPEN
template<> ::greptime::v1::PromInstantQuery* Arena::CreateMaybeMessage<::greptime::v1::PromInstantQuery>(Arena*);
template<> ::greptime::v1::PromRangeQuery* Arena::CreateMaybeMessage<::greptime::v1::PromRangeQuery>(Arena*);
template<> ::greptime::v1::PromqlRequest* Arena::CreateMaybeMessage<::greptime::v1::PromqlRequest>(Arena*);
template<> ::greptime::v1::PromqlResponse* Arena::CreateMaybeMessage<::greptime::v1::PromqlResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace greptime {
namespace v1 {

// ===================================================================

class PromqlRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greptime.v1.PromqlRequest) */ {
 public:
  inline PromqlRequest() : PromqlRequest(nullptr) {}
  ~PromqlRequest() override;
  explicit PROTOBUF_CONSTEXPR PromqlRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PromqlRequest(const PromqlRequest& from);
  PromqlRequest(PromqlRequest&& from) noexcept
    : PromqlRequest() {
    *this = ::std::move(from);
  }

  inline PromqlRequest& operator=(const PromqlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PromqlRequest& operator=(PromqlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PromqlRequest& default_instance() {
    return *internal_default_instance();
  }
  enum PromqlCase {
    kInstantQuery = 2,
    kRangeQuery = 3,
    PROMQL_NOT_SET = 0,
  };

  static inline const PromqlRequest* internal_default_instance() {
    return reinterpret_cast<const PromqlRequest*>(
               &_PromqlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PromqlRequest& a, PromqlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PromqlRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PromqlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PromqlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PromqlRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PromqlRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PromqlRequest& from) {
    PromqlRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PromqlRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greptime.v1.PromqlRequest";
  }
  protected:
  explicit PromqlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kInstantQueryFieldNumber = 2,
    kRangeQueryFieldNumber = 3,
  };
  // .greptime.v1.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::greptime::v1::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::greptime::v1::RequestHeader* release_header();
  ::greptime::v1::RequestHeader* mutable_header();
  void set_allocated_header(::greptime::v1::RequestHeader* header);
  private:
  const ::greptime::v1::RequestHeader& _internal_header() const;
  ::greptime::v1::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::greptime::v1::RequestHeader* header);
  ::greptime::v1::RequestHeader* unsafe_arena_release_header();

  // .greptime.v1.PromInstantQuery instant_query = 2;
  bool has_instant_query() const;
  private:
  bool _internal_has_instant_query() const;
  public:
  void clear_instant_query();
  const ::greptime::v1::PromInstantQuery& instant_query() const;
  PROTOBUF_NODISCARD ::greptime::v1::PromInstantQuery* release_instant_query();
  ::greptime::v1::PromInstantQuery* mutable_instant_query();
  void set_allocated_instant_query(::greptime::v1::PromInstantQuery* instant_query);
  private:
  const ::greptime::v1::PromInstantQuery& _internal_instant_query() const;
  ::greptime::v1::PromInstantQuery* _internal_mutable_instant_query();
  public:
  void unsafe_arena_set_allocated_instant_query(
      ::greptime::v1::PromInstantQuery* instant_query);
  ::greptime::v1::PromInstantQuery* unsafe_arena_release_instant_query();

  // .greptime.v1.PromRangeQuery range_query = 3;
  bool has_range_query() const;
  private:
  bool _internal_has_range_query() const;
  public:
  void clear_range_query();
  const ::greptime::v1::PromRangeQuery& range_query() const;
  PROTOBUF_NODISCARD ::greptime::v1::PromRangeQuery* release_range_query();
  ::greptime::v1::PromRangeQuery* mutable_range_query();
  void set_allocated_range_query(::greptime::v1::PromRangeQuery* range_query);
  private:
  const ::greptime::v1::PromRangeQuery& _internal_range_query() const;
  ::greptime::v1::PromRangeQuery* _internal_mutable_range_query();
  public:
  void unsafe_arena_set_allocated_range_query(
      ::greptime::v1::PromRangeQuery* range_query);
  ::greptime::v1::PromRangeQuery* unsafe_arena_release_range_query();

  void clear_promql();
  PromqlCase promql_case() const;
  // @@protoc_insertion_point(class_scope:greptime.v1.PromqlRequest)
 private:
  class _Internal;
  void set_has_instant_query();
  void set_has_range_query();

  inline bool has_promql() const;
  inline void clear_has_promql();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::greptime::v1::RequestHeader* header_;
    union PromqlUnion {
      constexpr PromqlUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::greptime::v1::PromInstantQuery* instant_query_;
      ::greptime::v1::PromRangeQuery* range_query_;
    } promql_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greptime_2fv1_2fprom_2eproto;
};
// -------------------------------------------------------------------

class PromqlResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greptime.v1.PromqlResponse) */ {
 public:
  inline PromqlResponse() : PromqlResponse(nullptr) {}
  ~PromqlResponse() override;
  explicit PROTOBUF_CONSTEXPR PromqlResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PromqlResponse(const PromqlResponse& from);
  PromqlResponse(PromqlResponse&& from) noexcept
    : PromqlResponse() {
    *this = ::std::move(from);
  }

  inline PromqlResponse& operator=(const PromqlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PromqlResponse& operator=(PromqlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PromqlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PromqlResponse* internal_default_instance() {
    return reinterpret_cast<const PromqlResponse*>(
               &_PromqlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PromqlResponse& a, PromqlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PromqlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PromqlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PromqlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PromqlResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PromqlResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PromqlResponse& from) {
    PromqlResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PromqlResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greptime.v1.PromqlResponse";
  }
  protected:
  explicit PromqlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // bytes body = 2;
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // .greptime.v1.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::greptime::v1::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::greptime::v1::ResponseHeader* release_header();
  ::greptime::v1::ResponseHeader* mutable_header();
  void set_allocated_header(::greptime::v1::ResponseHeader* header);
  private:
  const ::greptime::v1::ResponseHeader& _internal_header() const;
  ::greptime::v1::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::greptime::v1::ResponseHeader* header);
  ::greptime::v1::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:greptime.v1.PromqlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    ::greptime::v1::ResponseHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greptime_2fv1_2fprom_2eproto;
};
// -------------------------------------------------------------------

class PromInstantQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greptime.v1.PromInstantQuery) */ {
 public:
  inline PromInstantQuery() : PromInstantQuery(nullptr) {}
  ~PromInstantQuery() override;
  explicit PROTOBUF_CONSTEXPR PromInstantQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PromInstantQuery(const PromInstantQuery& from);
  PromInstantQuery(PromInstantQuery&& from) noexcept
    : PromInstantQuery() {
    *this = ::std::move(from);
  }

  inline PromInstantQuery& operator=(const PromInstantQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline PromInstantQuery& operator=(PromInstantQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PromInstantQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const PromInstantQuery* internal_default_instance() {
    return reinterpret_cast<const PromInstantQuery*>(
               &_PromInstantQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PromInstantQuery& a, PromInstantQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(PromInstantQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PromInstantQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PromInstantQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PromInstantQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PromInstantQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PromInstantQuery& from) {
    PromInstantQuery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PromInstantQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greptime.v1.PromInstantQuery";
  }
  protected:
  explicit PromInstantQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // string time = 2;
  void clear_time();
  const std::string& time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time();
  PROTOBUF_NODISCARD std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // @@protoc_insertion_point(class_scope:greptime.v1.PromInstantQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greptime_2fv1_2fprom_2eproto;
};
// -------------------------------------------------------------------

class PromRangeQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greptime.v1.PromRangeQuery) */ {
 public:
  inline PromRangeQuery() : PromRangeQuery(nullptr) {}
  ~PromRangeQuery() override;
  explicit PROTOBUF_CONSTEXPR PromRangeQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PromRangeQuery(const PromRangeQuery& from);
  PromRangeQuery(PromRangeQuery&& from) noexcept
    : PromRangeQuery() {
    *this = ::std::move(from);
  }

  inline PromRangeQuery& operator=(const PromRangeQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline PromRangeQuery& operator=(PromRangeQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PromRangeQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const PromRangeQuery* internal_default_instance() {
    return reinterpret_cast<const PromRangeQuery*>(
               &_PromRangeQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PromRangeQuery& a, PromRangeQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(PromRangeQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PromRangeQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PromRangeQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PromRangeQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PromRangeQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PromRangeQuery& from) {
    PromRangeQuery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PromRangeQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greptime.v1.PromRangeQuery";
  }
  protected:
  explicit PromRangeQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
    kStepFieldNumber = 4,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // string start = 2;
  void clear_start();
  const std::string& start() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start();
  PROTOBUF_NODISCARD std::string* release_start();
  void set_allocated_start(std::string* start);
  private:
  const std::string& _internal_start() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start(const std::string& value);
  std::string* _internal_mutable_start();
  public:

  // string end = 3;
  void clear_end();
  const std::string& end() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_end(ArgT0&& arg0, ArgT... args);
  std::string* mutable_end();
  PROTOBUF_NODISCARD std::string* release_end();
  void set_allocated_end(std::string* end);
  private:
  const std::string& _internal_end() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end(const std::string& value);
  std::string* _internal_mutable_end();
  public:

  // string step = 4;
  void clear_step();
  const std::string& step() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_step(ArgT0&& arg0, ArgT... args);
  std::string* mutable_step();
  PROTOBUF_NODISCARD std::string* release_step();
  void set_allocated_step(std::string* step);
  private:
  const std::string& _internal_step() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_step(const std::string& value);
  std::string* _internal_mutable_step();
  public:

  // @@protoc_insertion_point(class_scope:greptime.v1.PromRangeQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr step_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greptime_2fv1_2fprom_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PromqlRequest

// .greptime.v1.RequestHeader header = 1;
inline bool PromqlRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool PromqlRequest::has_header() const {
  return _internal_has_header();
}
inline const ::greptime::v1::RequestHeader& PromqlRequest::_internal_header() const {
  const ::greptime::v1::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::greptime::v1::RequestHeader&>(
      ::greptime::v1::_RequestHeader_default_instance_);
}
inline const ::greptime::v1::RequestHeader& PromqlRequest::header() const {
  // @@protoc_insertion_point(field_get:greptime.v1.PromqlRequest.header)
  return _internal_header();
}
inline void PromqlRequest::unsafe_arena_set_allocated_header(
    ::greptime::v1::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:greptime.v1.PromqlRequest.header)
}
inline ::greptime::v1::RequestHeader* PromqlRequest::release_header() {
  
  ::greptime::v1::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::greptime::v1::RequestHeader* PromqlRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:greptime.v1.PromqlRequest.header)
  
  ::greptime::v1::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::greptime::v1::RequestHeader* PromqlRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::greptime::v1::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::greptime::v1::RequestHeader* PromqlRequest::mutable_header() {
  ::greptime::v1::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:greptime.v1.PromqlRequest.header)
  return _msg;
}
inline void PromqlRequest::set_allocated_header(::greptime::v1::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.PromqlRequest.header)
}

// .greptime.v1.PromInstantQuery instant_query = 2;
inline bool PromqlRequest::_internal_has_instant_query() const {
  return promql_case() == kInstantQuery;
}
inline bool PromqlRequest::has_instant_query() const {
  return _internal_has_instant_query();
}
inline void PromqlRequest::set_has_instant_query() {
  _impl_._oneof_case_[0] = kInstantQuery;
}
inline void PromqlRequest::clear_instant_query() {
  if (_internal_has_instant_query()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.promql_.instant_query_;
    }
    clear_has_promql();
  }
}
inline ::greptime::v1::PromInstantQuery* PromqlRequest::release_instant_query() {
  // @@protoc_insertion_point(field_release:greptime.v1.PromqlRequest.instant_query)
  if (_internal_has_instant_query()) {
    clear_has_promql();
    ::greptime::v1::PromInstantQuery* temp = _impl_.promql_.instant_query_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.promql_.instant_query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::greptime::v1::PromInstantQuery& PromqlRequest::_internal_instant_query() const {
  return _internal_has_instant_query()
      ? *_impl_.promql_.instant_query_
      : reinterpret_cast< ::greptime::v1::PromInstantQuery&>(::greptime::v1::_PromInstantQuery_default_instance_);
}
inline const ::greptime::v1::PromInstantQuery& PromqlRequest::instant_query() const {
  // @@protoc_insertion_point(field_get:greptime.v1.PromqlRequest.instant_query)
  return _internal_instant_query();
}
inline ::greptime::v1::PromInstantQuery* PromqlRequest::unsafe_arena_release_instant_query() {
  // @@protoc_insertion_point(field_unsafe_arena_release:greptime.v1.PromqlRequest.instant_query)
  if (_internal_has_instant_query()) {
    clear_has_promql();
    ::greptime::v1::PromInstantQuery* temp = _impl_.promql_.instant_query_;
    _impl_.promql_.instant_query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PromqlRequest::unsafe_arena_set_allocated_instant_query(::greptime::v1::PromInstantQuery* instant_query) {
  clear_promql();
  if (instant_query) {
    set_has_instant_query();
    _impl_.promql_.instant_query_ = instant_query;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:greptime.v1.PromqlRequest.instant_query)
}
inline ::greptime::v1::PromInstantQuery* PromqlRequest::_internal_mutable_instant_query() {
  if (!_internal_has_instant_query()) {
    clear_promql();
    set_has_instant_query();
    _impl_.promql_.instant_query_ = CreateMaybeMessage< ::greptime::v1::PromInstantQuery >(GetArenaForAllocation());
  }
  return _impl_.promql_.instant_query_;
}
inline ::greptime::v1::PromInstantQuery* PromqlRequest::mutable_instant_query() {
  ::greptime::v1::PromInstantQuery* _msg = _internal_mutable_instant_query();
  // @@protoc_insertion_point(field_mutable:greptime.v1.PromqlRequest.instant_query)
  return _msg;
}

// .greptime.v1.PromRangeQuery range_query = 3;
inline bool PromqlRequest::_internal_has_range_query() const {
  return promql_case() == kRangeQuery;
}
inline bool PromqlRequest::has_range_query() const {
  return _internal_has_range_query();
}
inline void PromqlRequest::set_has_range_query() {
  _impl_._oneof_case_[0] = kRangeQuery;
}
inline void PromqlRequest::clear_range_query() {
  if (_internal_has_range_query()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.promql_.range_query_;
    }
    clear_has_promql();
  }
}
inline ::greptime::v1::PromRangeQuery* PromqlRequest::release_range_query() {
  // @@protoc_insertion_point(field_release:greptime.v1.PromqlRequest.range_query)
  if (_internal_has_range_query()) {
    clear_has_promql();
    ::greptime::v1::PromRangeQuery* temp = _impl_.promql_.range_query_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.promql_.range_query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::greptime::v1::PromRangeQuery& PromqlRequest::_internal_range_query() const {
  return _internal_has_range_query()
      ? *_impl_.promql_.range_query_
      : reinterpret_cast< ::greptime::v1::PromRangeQuery&>(::greptime::v1::_PromRangeQuery_default_instance_);
}
inline const ::greptime::v1::PromRangeQuery& PromqlRequest::range_query() const {
  // @@protoc_insertion_point(field_get:greptime.v1.PromqlRequest.range_query)
  return _internal_range_query();
}
inline ::greptime::v1::PromRangeQuery* PromqlRequest::unsafe_arena_release_range_query() {
  // @@protoc_insertion_point(field_unsafe_arena_release:greptime.v1.PromqlRequest.range_query)
  if (_internal_has_range_query()) {
    clear_has_promql();
    ::greptime::v1::PromRangeQuery* temp = _impl_.promql_.range_query_;
    _impl_.promql_.range_query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PromqlRequest::unsafe_arena_set_allocated_range_query(::greptime::v1::PromRangeQuery* range_query) {
  clear_promql();
  if (range_query) {
    set_has_range_query();
    _impl_.promql_.range_query_ = range_query;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:greptime.v1.PromqlRequest.range_query)
}
inline ::greptime::v1::PromRangeQuery* PromqlRequest::_internal_mutable_range_query() {
  if (!_internal_has_range_query()) {
    clear_promql();
    set_has_range_query();
    _impl_.promql_.range_query_ = CreateMaybeMessage< ::greptime::v1::PromRangeQuery >(GetArenaForAllocation());
  }
  return _impl_.promql_.range_query_;
}
inline ::greptime::v1::PromRangeQuery* PromqlRequest::mutable_range_query() {
  ::greptime::v1::PromRangeQuery* _msg = _internal_mutable_range_query();
  // @@protoc_insertion_point(field_mutable:greptime.v1.PromqlRequest.range_query)
  return _msg;
}

inline bool PromqlRequest::has_promql() const {
  return promql_case() != PROMQL_NOT_SET;
}
inline void PromqlRequest::clear_has_promql() {
  _impl_._oneof_case_[0] = PROMQL_NOT_SET;
}
inline PromqlRequest::PromqlCase PromqlRequest::promql_case() const {
  return PromqlRequest::PromqlCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// PromqlResponse

// .greptime.v1.ResponseHeader header = 1;
inline bool PromqlResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool PromqlResponse::has_header() const {
  return _internal_has_header();
}
inline const ::greptime::v1::ResponseHeader& PromqlResponse::_internal_header() const {
  const ::greptime::v1::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::greptime::v1::ResponseHeader&>(
      ::greptime::v1::_ResponseHeader_default_instance_);
}
inline const ::greptime::v1::ResponseHeader& PromqlResponse::header() const {
  // @@protoc_insertion_point(field_get:greptime.v1.PromqlResponse.header)
  return _internal_header();
}
inline void PromqlResponse::unsafe_arena_set_allocated_header(
    ::greptime::v1::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:greptime.v1.PromqlResponse.header)
}
inline ::greptime::v1::ResponseHeader* PromqlResponse::release_header() {
  
  ::greptime::v1::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::greptime::v1::ResponseHeader* PromqlResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:greptime.v1.PromqlResponse.header)
  
  ::greptime::v1::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::greptime::v1::ResponseHeader* PromqlResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::greptime::v1::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::greptime::v1::ResponseHeader* PromqlResponse::mutable_header() {
  ::greptime::v1::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:greptime.v1.PromqlResponse.header)
  return _msg;
}
inline void PromqlResponse::set_allocated_header(::greptime::v1::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.PromqlResponse.header)
}

// bytes body = 2;
inline void PromqlResponse::clear_body() {
  _impl_.body_.ClearToEmpty();
}
inline const std::string& PromqlResponse::body() const {
  // @@protoc_insertion_point(field_get:greptime.v1.PromqlResponse.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PromqlResponse::set_body(ArgT0&& arg0, ArgT... args) {
 
 _impl_.body_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.PromqlResponse.body)
}
inline std::string* PromqlResponse::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:greptime.v1.PromqlResponse.body)
  return _s;
}
inline const std::string& PromqlResponse::_internal_body() const {
  return _impl_.body_.Get();
}
inline void PromqlResponse::_internal_set_body(const std::string& value) {
  
  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* PromqlResponse::_internal_mutable_body() {
  
  return _impl_.body_.Mutable(GetArenaForAllocation());
}
inline std::string* PromqlResponse::release_body() {
  // @@protoc_insertion_point(field_release:greptime.v1.PromqlResponse.body)
  return _impl_.body_.Release();
}
inline void PromqlResponse::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  _impl_.body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.PromqlResponse.body)
}

// -------------------------------------------------------------------

// PromInstantQuery

// string query = 1;
inline void PromInstantQuery::clear_query() {
  _impl_.query_.ClearToEmpty();
}
inline const std::string& PromInstantQuery::query() const {
  // @@protoc_insertion_point(field_get:greptime.v1.PromInstantQuery.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PromInstantQuery::set_query(ArgT0&& arg0, ArgT... args) {
 
 _impl_.query_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.PromInstantQuery.query)
}
inline std::string* PromInstantQuery::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:greptime.v1.PromInstantQuery.query)
  return _s;
}
inline const std::string& PromInstantQuery::_internal_query() const {
  return _impl_.query_.Get();
}
inline void PromInstantQuery::_internal_set_query(const std::string& value) {
  
  _impl_.query_.Set(value, GetArenaForAllocation());
}
inline std::string* PromInstantQuery::_internal_mutable_query() {
  
  return _impl_.query_.Mutable(GetArenaForAllocation());
}
inline std::string* PromInstantQuery::release_query() {
  // @@protoc_insertion_point(field_release:greptime.v1.PromInstantQuery.query)
  return _impl_.query_.Release();
}
inline void PromInstantQuery::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  _impl_.query_.SetAllocated(query, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_.IsDefault()) {
    _impl_.query_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.PromInstantQuery.query)
}

// string time = 2;
inline void PromInstantQuery::clear_time() {
  _impl_.time_.ClearToEmpty();
}
inline const std::string& PromInstantQuery::time() const {
  // @@protoc_insertion_point(field_get:greptime.v1.PromInstantQuery.time)
  return _internal_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PromInstantQuery::set_time(ArgT0&& arg0, ArgT... args) {
 
 _impl_.time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.PromInstantQuery.time)
}
inline std::string* PromInstantQuery::mutable_time() {
  std::string* _s = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:greptime.v1.PromInstantQuery.time)
  return _s;
}
inline const std::string& PromInstantQuery::_internal_time() const {
  return _impl_.time_.Get();
}
inline void PromInstantQuery::_internal_set_time(const std::string& value) {
  
  _impl_.time_.Set(value, GetArenaForAllocation());
}
inline std::string* PromInstantQuery::_internal_mutable_time() {
  
  return _impl_.time_.Mutable(GetArenaForAllocation());
}
inline std::string* PromInstantQuery::release_time() {
  // @@protoc_insertion_point(field_release:greptime.v1.PromInstantQuery.time)
  return _impl_.time_.Release();
}
inline void PromInstantQuery::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  _impl_.time_.SetAllocated(time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.time_.IsDefault()) {
    _impl_.time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.PromInstantQuery.time)
}

// -------------------------------------------------------------------

// PromRangeQuery

// string query = 1;
inline void PromRangeQuery::clear_query() {
  _impl_.query_.ClearToEmpty();
}
inline const std::string& PromRangeQuery::query() const {
  // @@protoc_insertion_point(field_get:greptime.v1.PromRangeQuery.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PromRangeQuery::set_query(ArgT0&& arg0, ArgT... args) {
 
 _impl_.query_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.PromRangeQuery.query)
}
inline std::string* PromRangeQuery::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:greptime.v1.PromRangeQuery.query)
  return _s;
}
inline const std::string& PromRangeQuery::_internal_query() const {
  return _impl_.query_.Get();
}
inline void PromRangeQuery::_internal_set_query(const std::string& value) {
  
  _impl_.query_.Set(value, GetArenaForAllocation());
}
inline std::string* PromRangeQuery::_internal_mutable_query() {
  
  return _impl_.query_.Mutable(GetArenaForAllocation());
}
inline std::string* PromRangeQuery::release_query() {
  // @@protoc_insertion_point(field_release:greptime.v1.PromRangeQuery.query)
  return _impl_.query_.Release();
}
inline void PromRangeQuery::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  _impl_.query_.SetAllocated(query, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_.IsDefault()) {
    _impl_.query_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.PromRangeQuery.query)
}

// string start = 2;
inline void PromRangeQuery::clear_start() {
  _impl_.start_.ClearToEmpty();
}
inline const std::string& PromRangeQuery::start() const {
  // @@protoc_insertion_point(field_get:greptime.v1.PromRangeQuery.start)
  return _internal_start();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PromRangeQuery::set_start(ArgT0&& arg0, ArgT... args) {
 
 _impl_.start_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.PromRangeQuery.start)
}
inline std::string* PromRangeQuery::mutable_start() {
  std::string* _s = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:greptime.v1.PromRangeQuery.start)
  return _s;
}
inline const std::string& PromRangeQuery::_internal_start() const {
  return _impl_.start_.Get();
}
inline void PromRangeQuery::_internal_set_start(const std::string& value) {
  
  _impl_.start_.Set(value, GetArenaForAllocation());
}
inline std::string* PromRangeQuery::_internal_mutable_start() {
  
  return _impl_.start_.Mutable(GetArenaForAllocation());
}
inline std::string* PromRangeQuery::release_start() {
  // @@protoc_insertion_point(field_release:greptime.v1.PromRangeQuery.start)
  return _impl_.start_.Release();
}
inline void PromRangeQuery::set_allocated_start(std::string* start) {
  if (start != nullptr) {
    
  } else {
    
  }
  _impl_.start_.SetAllocated(start, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.start_.IsDefault()) {
    _impl_.start_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.PromRangeQuery.start)
}

// string end = 3;
inline void PromRangeQuery::clear_end() {
  _impl_.end_.ClearToEmpty();
}
inline const std::string& PromRangeQuery::end() const {
  // @@protoc_insertion_point(field_get:greptime.v1.PromRangeQuery.end)
  return _internal_end();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PromRangeQuery::set_end(ArgT0&& arg0, ArgT... args) {
 
 _impl_.end_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.PromRangeQuery.end)
}
inline std::string* PromRangeQuery::mutable_end() {
  std::string* _s = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:greptime.v1.PromRangeQuery.end)
  return _s;
}
inline const std::string& PromRangeQuery::_internal_end() const {
  return _impl_.end_.Get();
}
inline void PromRangeQuery::_internal_set_end(const std::string& value) {
  
  _impl_.end_.Set(value, GetArenaForAllocation());
}
inline std::string* PromRangeQuery::_internal_mutable_end() {
  
  return _impl_.end_.Mutable(GetArenaForAllocation());
}
inline std::string* PromRangeQuery::release_end() {
  // @@protoc_insertion_point(field_release:greptime.v1.PromRangeQuery.end)
  return _impl_.end_.Release();
}
inline void PromRangeQuery::set_allocated_end(std::string* end) {
  if (end != nullptr) {
    
  } else {
    
  }
  _impl_.end_.SetAllocated(end, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.end_.IsDefault()) {
    _impl_.end_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.PromRangeQuery.end)
}

// string step = 4;
inline void PromRangeQuery::clear_step() {
  _impl_.step_.ClearToEmpty();
}
inline const std::string& PromRangeQuery::step() const {
  // @@protoc_insertion_point(field_get:greptime.v1.PromRangeQuery.step)
  return _internal_step();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PromRangeQuery::set_step(ArgT0&& arg0, ArgT... args) {
 
 _impl_.step_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.PromRangeQuery.step)
}
inline std::string* PromRangeQuery::mutable_step() {
  std::string* _s = _internal_mutable_step();
  // @@protoc_insertion_point(field_mutable:greptime.v1.PromRangeQuery.step)
  return _s;
}
inline const std::string& PromRangeQuery::_internal_step() const {
  return _impl_.step_.Get();
}
inline void PromRangeQuery::_internal_set_step(const std::string& value) {
  
  _impl_.step_.Set(value, GetArenaForAllocation());
}
inline std::string* PromRangeQuery::_internal_mutable_step() {
  
  return _impl_.step_.Mutable(GetArenaForAllocation());
}
inline std::string* PromRangeQuery::release_step() {
  // @@protoc_insertion_point(field_release:greptime.v1.PromRangeQuery.step)
  return _impl_.step_.Release();
}
inline void PromRangeQuery::set_allocated_step(std::string* step) {
  if (step != nullptr) {
    
  } else {
    
  }
  _impl_.step_.SetAllocated(step, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.step_.IsDefault()) {
    _impl_.step_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.PromRangeQuery.step)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace greptime

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2fprom_2eproto
