// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait_extension/promql_plan.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_substrait_5fextension_2fpromql_5fplan_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_substrait_5fextension_2fpromql_5fplan_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_substrait_5fextension_2fpromql_5fplan_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_substrait_5fextension_2fpromql_5fplan_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_substrait_5fextension_2fpromql_5fplan_2eproto;
namespace substrait_extension {
class EmptyMetric;
struct EmptyMetricDefaultTypeInternal;
extern EmptyMetricDefaultTypeInternal _EmptyMetric_default_instance_;
class InstantManipulate;
struct InstantManipulateDefaultTypeInternal;
extern InstantManipulateDefaultTypeInternal _InstantManipulate_default_instance_;
class RangeManipulate;
struct RangeManipulateDefaultTypeInternal;
extern RangeManipulateDefaultTypeInternal _RangeManipulate_default_instance_;
class SeriesDivide;
struct SeriesDivideDefaultTypeInternal;
extern SeriesDivideDefaultTypeInternal _SeriesDivide_default_instance_;
class SeriesNormalize;
struct SeriesNormalizeDefaultTypeInternal;
extern SeriesNormalizeDefaultTypeInternal _SeriesNormalize_default_instance_;
}  // namespace substrait_extension
PROTOBUF_NAMESPACE_OPEN
template<> ::substrait_extension::EmptyMetric* Arena::CreateMaybeMessage<::substrait_extension::EmptyMetric>(Arena*);
template<> ::substrait_extension::InstantManipulate* Arena::CreateMaybeMessage<::substrait_extension::InstantManipulate>(Arena*);
template<> ::substrait_extension::RangeManipulate* Arena::CreateMaybeMessage<::substrait_extension::RangeManipulate>(Arena*);
template<> ::substrait_extension::SeriesDivide* Arena::CreateMaybeMessage<::substrait_extension::SeriesDivide>(Arena*);
template<> ::substrait_extension::SeriesNormalize* Arena::CreateMaybeMessage<::substrait_extension::SeriesNormalize>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace substrait_extension {

// ===================================================================

class EmptyMetric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait_extension.EmptyMetric) */ {
 public:
  inline EmptyMetric() : EmptyMetric(nullptr) {}
  ~EmptyMetric() override;
  explicit PROTOBUF_CONSTEXPR EmptyMetric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmptyMetric(const EmptyMetric& from);
  EmptyMetric(EmptyMetric&& from) noexcept
    : EmptyMetric() {
    *this = ::std::move(from);
  }

  inline EmptyMetric& operator=(const EmptyMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyMetric& operator=(EmptyMetric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmptyMetric& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmptyMetric* internal_default_instance() {
    return reinterpret_cast<const EmptyMetric*>(
               &_EmptyMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EmptyMetric& a, EmptyMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyMetric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptyMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmptyMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmptyMetric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmptyMetric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EmptyMetric& from) {
    EmptyMetric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyMetric* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait_extension.EmptyMetric";
  }
  protected:
  explicit EmptyMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
    kIntervalFieldNumber = 3,
  };
  // int64 start = 1;
  void clear_start();
  int64_t start() const;
  void set_start(int64_t value);
  private:
  int64_t _internal_start() const;
  void _internal_set_start(int64_t value);
  public:

  // int64 end = 2;
  void clear_end();
  int64_t end() const;
  void set_end(int64_t value);
  private:
  int64_t _internal_end() const;
  void _internal_set_end(int64_t value);
  public:

  // int64 interval = 3;
  void clear_interval();
  int64_t interval() const;
  void set_interval(int64_t value);
  private:
  int64_t _internal_interval() const;
  void _internal_set_interval(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:substrait_extension.EmptyMetric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t start_;
    int64_t end_;
    int64_t interval_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_5fextension_2fpromql_5fplan_2eproto;
};
// -------------------------------------------------------------------

class InstantManipulate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait_extension.InstantManipulate) */ {
 public:
  inline InstantManipulate() : InstantManipulate(nullptr) {}
  ~InstantManipulate() override;
  explicit PROTOBUF_CONSTEXPR InstantManipulate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InstantManipulate(const InstantManipulate& from);
  InstantManipulate(InstantManipulate&& from) noexcept
    : InstantManipulate() {
    *this = ::std::move(from);
  }

  inline InstantManipulate& operator=(const InstantManipulate& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstantManipulate& operator=(InstantManipulate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstantManipulate& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstantManipulate* internal_default_instance() {
    return reinterpret_cast<const InstantManipulate*>(
               &_InstantManipulate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InstantManipulate& a, InstantManipulate& b) {
    a.Swap(&b);
  }
  inline void Swap(InstantManipulate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstantManipulate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstantManipulate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstantManipulate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InstantManipulate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InstantManipulate& from) {
    InstantManipulate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstantManipulate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait_extension.InstantManipulate";
  }
  protected:
  explicit InstantManipulate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeIndexFieldNumber = 5,
    kFieldIndexFieldNumber = 6,
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
    kIntervalFieldNumber = 3,
    kLookbackDeltaFieldNumber = 4,
  };
  // string time_index = 5;
  void clear_time_index();
  const std::string& time_index() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time_index(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time_index();
  PROTOBUF_NODISCARD std::string* release_time_index();
  void set_allocated_time_index(std::string* time_index);
  private:
  const std::string& _internal_time_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_index(const std::string& value);
  std::string* _internal_mutable_time_index();
  public:

  // string field_index = 6;
  void clear_field_index();
  const std::string& field_index() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_index(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_index();
  PROTOBUF_NODISCARD std::string* release_field_index();
  void set_allocated_field_index(std::string* field_index);
  private:
  const std::string& _internal_field_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_index(const std::string& value);
  std::string* _internal_mutable_field_index();
  public:

  // int64 start = 1;
  void clear_start();
  int64_t start() const;
  void set_start(int64_t value);
  private:
  int64_t _internal_start() const;
  void _internal_set_start(int64_t value);
  public:

  // int64 end = 2;
  void clear_end();
  int64_t end() const;
  void set_end(int64_t value);
  private:
  int64_t _internal_end() const;
  void _internal_set_end(int64_t value);
  public:

  // int64 interval = 3;
  void clear_interval();
  int64_t interval() const;
  void set_interval(int64_t value);
  private:
  int64_t _internal_interval() const;
  void _internal_set_interval(int64_t value);
  public:

  // int64 lookback_delta = 4;
  void clear_lookback_delta();
  int64_t lookback_delta() const;
  void set_lookback_delta(int64_t value);
  private:
  int64_t _internal_lookback_delta() const;
  void _internal_set_lookback_delta(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:substrait_extension.InstantManipulate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_index_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_index_;
    int64_t start_;
    int64_t end_;
    int64_t interval_;
    int64_t lookback_delta_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_5fextension_2fpromql_5fplan_2eproto;
};
// -------------------------------------------------------------------

class SeriesNormalize final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait_extension.SeriesNormalize) */ {
 public:
  inline SeriesNormalize() : SeriesNormalize(nullptr) {}
  ~SeriesNormalize() override;
  explicit PROTOBUF_CONSTEXPR SeriesNormalize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SeriesNormalize(const SeriesNormalize& from);
  SeriesNormalize(SeriesNormalize&& from) noexcept
    : SeriesNormalize() {
    *this = ::std::move(from);
  }

  inline SeriesNormalize& operator=(const SeriesNormalize& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeriesNormalize& operator=(SeriesNormalize&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeriesNormalize& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeriesNormalize* internal_default_instance() {
    return reinterpret_cast<const SeriesNormalize*>(
               &_SeriesNormalize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SeriesNormalize& a, SeriesNormalize& b) {
    a.Swap(&b);
  }
  inline void Swap(SeriesNormalize* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeriesNormalize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeriesNormalize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SeriesNormalize>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SeriesNormalize& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SeriesNormalize& from) {
    SeriesNormalize::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeriesNormalize* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait_extension.SeriesNormalize";
  }
  protected:
  explicit SeriesNormalize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeIndexFieldNumber = 2,
    kOffsetFieldNumber = 1,
    kFilterNanFieldNumber = 3,
  };
  // string time_index = 2;
  void clear_time_index();
  const std::string& time_index() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time_index(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time_index();
  PROTOBUF_NODISCARD std::string* release_time_index();
  void set_allocated_time_index(std::string* time_index);
  private:
  const std::string& _internal_time_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_index(const std::string& value);
  std::string* _internal_mutable_time_index();
  public:

  // int64 offset = 1;
  void clear_offset();
  int64_t offset() const;
  void set_offset(int64_t value);
  private:
  int64_t _internal_offset() const;
  void _internal_set_offset(int64_t value);
  public:

  // bool filter_nan = 3;
  void clear_filter_nan();
  bool filter_nan() const;
  void set_filter_nan(bool value);
  private:
  bool _internal_filter_nan() const;
  void _internal_set_filter_nan(bool value);
  public:

  // @@protoc_insertion_point(class_scope:substrait_extension.SeriesNormalize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_index_;
    int64_t offset_;
    bool filter_nan_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_5fextension_2fpromql_5fplan_2eproto;
};
// -------------------------------------------------------------------

class SeriesDivide final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait_extension.SeriesDivide) */ {
 public:
  inline SeriesDivide() : SeriesDivide(nullptr) {}
  ~SeriesDivide() override;
  explicit PROTOBUF_CONSTEXPR SeriesDivide(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SeriesDivide(const SeriesDivide& from);
  SeriesDivide(SeriesDivide&& from) noexcept
    : SeriesDivide() {
    *this = ::std::move(from);
  }

  inline SeriesDivide& operator=(const SeriesDivide& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeriesDivide& operator=(SeriesDivide&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeriesDivide& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeriesDivide* internal_default_instance() {
    return reinterpret_cast<const SeriesDivide*>(
               &_SeriesDivide_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SeriesDivide& a, SeriesDivide& b) {
    a.Swap(&b);
  }
  inline void Swap(SeriesDivide* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeriesDivide* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeriesDivide* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SeriesDivide>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SeriesDivide& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SeriesDivide& from) {
    SeriesDivide::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeriesDivide* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait_extension.SeriesDivide";
  }
  protected:
  explicit SeriesDivide(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagColumnsFieldNumber = 1,
  };
  // repeated string tag_columns = 1;
  int tag_columns_size() const;
  private:
  int _internal_tag_columns_size() const;
  public:
  void clear_tag_columns();
  const std::string& tag_columns(int index) const;
  std::string* mutable_tag_columns(int index);
  void set_tag_columns(int index, const std::string& value);
  void set_tag_columns(int index, std::string&& value);
  void set_tag_columns(int index, const char* value);
  void set_tag_columns(int index, const char* value, size_t size);
  std::string* add_tag_columns();
  void add_tag_columns(const std::string& value);
  void add_tag_columns(std::string&& value);
  void add_tag_columns(const char* value);
  void add_tag_columns(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tag_columns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tag_columns();
  private:
  const std::string& _internal_tag_columns(int index) const;
  std::string* _internal_add_tag_columns();
  public:

  // @@protoc_insertion_point(class_scope:substrait_extension.SeriesDivide)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tag_columns_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_5fextension_2fpromql_5fplan_2eproto;
};
// -------------------------------------------------------------------

class RangeManipulate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait_extension.RangeManipulate) */ {
 public:
  inline RangeManipulate() : RangeManipulate(nullptr) {}
  ~RangeManipulate() override;
  explicit PROTOBUF_CONSTEXPR RangeManipulate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RangeManipulate(const RangeManipulate& from);
  RangeManipulate(RangeManipulate&& from) noexcept
    : RangeManipulate() {
    *this = ::std::move(from);
  }

  inline RangeManipulate& operator=(const RangeManipulate& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeManipulate& operator=(RangeManipulate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangeManipulate& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangeManipulate* internal_default_instance() {
    return reinterpret_cast<const RangeManipulate*>(
               &_RangeManipulate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RangeManipulate& a, RangeManipulate& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeManipulate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeManipulate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RangeManipulate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RangeManipulate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RangeManipulate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RangeManipulate& from) {
    RangeManipulate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeManipulate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait_extension.RangeManipulate";
  }
  protected:
  explicit RangeManipulate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagColumnsFieldNumber = 6,
    kTimeIndexFieldNumber = 5,
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
    kIntervalFieldNumber = 3,
    kRangeFieldNumber = 4,
  };
  // repeated string tag_columns = 6;
  int tag_columns_size() const;
  private:
  int _internal_tag_columns_size() const;
  public:
  void clear_tag_columns();
  const std::string& tag_columns(int index) const;
  std::string* mutable_tag_columns(int index);
  void set_tag_columns(int index, const std::string& value);
  void set_tag_columns(int index, std::string&& value);
  void set_tag_columns(int index, const char* value);
  void set_tag_columns(int index, const char* value, size_t size);
  std::string* add_tag_columns();
  void add_tag_columns(const std::string& value);
  void add_tag_columns(std::string&& value);
  void add_tag_columns(const char* value);
  void add_tag_columns(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tag_columns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tag_columns();
  private:
  const std::string& _internal_tag_columns(int index) const;
  std::string* _internal_add_tag_columns();
  public:

  // string time_index = 5;
  void clear_time_index();
  const std::string& time_index() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time_index(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time_index();
  PROTOBUF_NODISCARD std::string* release_time_index();
  void set_allocated_time_index(std::string* time_index);
  private:
  const std::string& _internal_time_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_index(const std::string& value);
  std::string* _internal_mutable_time_index();
  public:

  // int64 start = 1;
  void clear_start();
  int64_t start() const;
  void set_start(int64_t value);
  private:
  int64_t _internal_start() const;
  void _internal_set_start(int64_t value);
  public:

  // int64 end = 2;
  void clear_end();
  int64_t end() const;
  void set_end(int64_t value);
  private:
  int64_t _internal_end() const;
  void _internal_set_end(int64_t value);
  public:

  // int64 interval = 3;
  void clear_interval();
  int64_t interval() const;
  void set_interval(int64_t value);
  private:
  int64_t _internal_interval() const;
  void _internal_set_interval(int64_t value);
  public:

  // int64 range = 4;
  void clear_range();
  int64_t range() const;
  void set_range(int64_t value);
  private:
  int64_t _internal_range() const;
  void _internal_set_range(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:substrait_extension.RangeManipulate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tag_columns_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_index_;
    int64_t start_;
    int64_t end_;
    int64_t interval_;
    int64_t range_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_5fextension_2fpromql_5fplan_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EmptyMetric

// int64 start = 1;
inline void EmptyMetric::clear_start() {
  _impl_.start_ = int64_t{0};
}
inline int64_t EmptyMetric::_internal_start() const {
  return _impl_.start_;
}
inline int64_t EmptyMetric::start() const {
  // @@protoc_insertion_point(field_get:substrait_extension.EmptyMetric.start)
  return _internal_start();
}
inline void EmptyMetric::_internal_set_start(int64_t value) {
  
  _impl_.start_ = value;
}
inline void EmptyMetric::set_start(int64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:substrait_extension.EmptyMetric.start)
}

// int64 end = 2;
inline void EmptyMetric::clear_end() {
  _impl_.end_ = int64_t{0};
}
inline int64_t EmptyMetric::_internal_end() const {
  return _impl_.end_;
}
inline int64_t EmptyMetric::end() const {
  // @@protoc_insertion_point(field_get:substrait_extension.EmptyMetric.end)
  return _internal_end();
}
inline void EmptyMetric::_internal_set_end(int64_t value) {
  
  _impl_.end_ = value;
}
inline void EmptyMetric::set_end(int64_t value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:substrait_extension.EmptyMetric.end)
}

// int64 interval = 3;
inline void EmptyMetric::clear_interval() {
  _impl_.interval_ = int64_t{0};
}
inline int64_t EmptyMetric::_internal_interval() const {
  return _impl_.interval_;
}
inline int64_t EmptyMetric::interval() const {
  // @@protoc_insertion_point(field_get:substrait_extension.EmptyMetric.interval)
  return _internal_interval();
}
inline void EmptyMetric::_internal_set_interval(int64_t value) {
  
  _impl_.interval_ = value;
}
inline void EmptyMetric::set_interval(int64_t value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:substrait_extension.EmptyMetric.interval)
}

// -------------------------------------------------------------------

// InstantManipulate

// int64 start = 1;
inline void InstantManipulate::clear_start() {
  _impl_.start_ = int64_t{0};
}
inline int64_t InstantManipulate::_internal_start() const {
  return _impl_.start_;
}
inline int64_t InstantManipulate::start() const {
  // @@protoc_insertion_point(field_get:substrait_extension.InstantManipulate.start)
  return _internal_start();
}
inline void InstantManipulate::_internal_set_start(int64_t value) {
  
  _impl_.start_ = value;
}
inline void InstantManipulate::set_start(int64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:substrait_extension.InstantManipulate.start)
}

// int64 end = 2;
inline void InstantManipulate::clear_end() {
  _impl_.end_ = int64_t{0};
}
inline int64_t InstantManipulate::_internal_end() const {
  return _impl_.end_;
}
inline int64_t InstantManipulate::end() const {
  // @@protoc_insertion_point(field_get:substrait_extension.InstantManipulate.end)
  return _internal_end();
}
inline void InstantManipulate::_internal_set_end(int64_t value) {
  
  _impl_.end_ = value;
}
inline void InstantManipulate::set_end(int64_t value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:substrait_extension.InstantManipulate.end)
}

// int64 interval = 3;
inline void InstantManipulate::clear_interval() {
  _impl_.interval_ = int64_t{0};
}
inline int64_t InstantManipulate::_internal_interval() const {
  return _impl_.interval_;
}
inline int64_t InstantManipulate::interval() const {
  // @@protoc_insertion_point(field_get:substrait_extension.InstantManipulate.interval)
  return _internal_interval();
}
inline void InstantManipulate::_internal_set_interval(int64_t value) {
  
  _impl_.interval_ = value;
}
inline void InstantManipulate::set_interval(int64_t value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:substrait_extension.InstantManipulate.interval)
}

// int64 lookback_delta = 4;
inline void InstantManipulate::clear_lookback_delta() {
  _impl_.lookback_delta_ = int64_t{0};
}
inline int64_t InstantManipulate::_internal_lookback_delta() const {
  return _impl_.lookback_delta_;
}
inline int64_t InstantManipulate::lookback_delta() const {
  // @@protoc_insertion_point(field_get:substrait_extension.InstantManipulate.lookback_delta)
  return _internal_lookback_delta();
}
inline void InstantManipulate::_internal_set_lookback_delta(int64_t value) {
  
  _impl_.lookback_delta_ = value;
}
inline void InstantManipulate::set_lookback_delta(int64_t value) {
  _internal_set_lookback_delta(value);
  // @@protoc_insertion_point(field_set:substrait_extension.InstantManipulate.lookback_delta)
}

// string time_index = 5;
inline void InstantManipulate::clear_time_index() {
  _impl_.time_index_.ClearToEmpty();
}
inline const std::string& InstantManipulate::time_index() const {
  // @@protoc_insertion_point(field_get:substrait_extension.InstantManipulate.time_index)
  return _internal_time_index();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstantManipulate::set_time_index(ArgT0&& arg0, ArgT... args) {
 
 _impl_.time_index_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait_extension.InstantManipulate.time_index)
}
inline std::string* InstantManipulate::mutable_time_index() {
  std::string* _s = _internal_mutable_time_index();
  // @@protoc_insertion_point(field_mutable:substrait_extension.InstantManipulate.time_index)
  return _s;
}
inline const std::string& InstantManipulate::_internal_time_index() const {
  return _impl_.time_index_.Get();
}
inline void InstantManipulate::_internal_set_time_index(const std::string& value) {
  
  _impl_.time_index_.Set(value, GetArenaForAllocation());
}
inline std::string* InstantManipulate::_internal_mutable_time_index() {
  
  return _impl_.time_index_.Mutable(GetArenaForAllocation());
}
inline std::string* InstantManipulate::release_time_index() {
  // @@protoc_insertion_point(field_release:substrait_extension.InstantManipulate.time_index)
  return _impl_.time_index_.Release();
}
inline void InstantManipulate::set_allocated_time_index(std::string* time_index) {
  if (time_index != nullptr) {
    
  } else {
    
  }
  _impl_.time_index_.SetAllocated(time_index, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.time_index_.IsDefault()) {
    _impl_.time_index_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:substrait_extension.InstantManipulate.time_index)
}

// string field_index = 6;
inline void InstantManipulate::clear_field_index() {
  _impl_.field_index_.ClearToEmpty();
}
inline const std::string& InstantManipulate::field_index() const {
  // @@protoc_insertion_point(field_get:substrait_extension.InstantManipulate.field_index)
  return _internal_field_index();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstantManipulate::set_field_index(ArgT0&& arg0, ArgT... args) {
 
 _impl_.field_index_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait_extension.InstantManipulate.field_index)
}
inline std::string* InstantManipulate::mutable_field_index() {
  std::string* _s = _internal_mutable_field_index();
  // @@protoc_insertion_point(field_mutable:substrait_extension.InstantManipulate.field_index)
  return _s;
}
inline const std::string& InstantManipulate::_internal_field_index() const {
  return _impl_.field_index_.Get();
}
inline void InstantManipulate::_internal_set_field_index(const std::string& value) {
  
  _impl_.field_index_.Set(value, GetArenaForAllocation());
}
inline std::string* InstantManipulate::_internal_mutable_field_index() {
  
  return _impl_.field_index_.Mutable(GetArenaForAllocation());
}
inline std::string* InstantManipulate::release_field_index() {
  // @@protoc_insertion_point(field_release:substrait_extension.InstantManipulate.field_index)
  return _impl_.field_index_.Release();
}
inline void InstantManipulate::set_allocated_field_index(std::string* field_index) {
  if (field_index != nullptr) {
    
  } else {
    
  }
  _impl_.field_index_.SetAllocated(field_index, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.field_index_.IsDefault()) {
    _impl_.field_index_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:substrait_extension.InstantManipulate.field_index)
}

// -------------------------------------------------------------------

// SeriesNormalize

// int64 offset = 1;
inline void SeriesNormalize::clear_offset() {
  _impl_.offset_ = int64_t{0};
}
inline int64_t SeriesNormalize::_internal_offset() const {
  return _impl_.offset_;
}
inline int64_t SeriesNormalize::offset() const {
  // @@protoc_insertion_point(field_get:substrait_extension.SeriesNormalize.offset)
  return _internal_offset();
}
inline void SeriesNormalize::_internal_set_offset(int64_t value) {
  
  _impl_.offset_ = value;
}
inline void SeriesNormalize::set_offset(int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:substrait_extension.SeriesNormalize.offset)
}

// string time_index = 2;
inline void SeriesNormalize::clear_time_index() {
  _impl_.time_index_.ClearToEmpty();
}
inline const std::string& SeriesNormalize::time_index() const {
  // @@protoc_insertion_point(field_get:substrait_extension.SeriesNormalize.time_index)
  return _internal_time_index();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SeriesNormalize::set_time_index(ArgT0&& arg0, ArgT... args) {
 
 _impl_.time_index_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait_extension.SeriesNormalize.time_index)
}
inline std::string* SeriesNormalize::mutable_time_index() {
  std::string* _s = _internal_mutable_time_index();
  // @@protoc_insertion_point(field_mutable:substrait_extension.SeriesNormalize.time_index)
  return _s;
}
inline const std::string& SeriesNormalize::_internal_time_index() const {
  return _impl_.time_index_.Get();
}
inline void SeriesNormalize::_internal_set_time_index(const std::string& value) {
  
  _impl_.time_index_.Set(value, GetArenaForAllocation());
}
inline std::string* SeriesNormalize::_internal_mutable_time_index() {
  
  return _impl_.time_index_.Mutable(GetArenaForAllocation());
}
inline std::string* SeriesNormalize::release_time_index() {
  // @@protoc_insertion_point(field_release:substrait_extension.SeriesNormalize.time_index)
  return _impl_.time_index_.Release();
}
inline void SeriesNormalize::set_allocated_time_index(std::string* time_index) {
  if (time_index != nullptr) {
    
  } else {
    
  }
  _impl_.time_index_.SetAllocated(time_index, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.time_index_.IsDefault()) {
    _impl_.time_index_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:substrait_extension.SeriesNormalize.time_index)
}

// bool filter_nan = 3;
inline void SeriesNormalize::clear_filter_nan() {
  _impl_.filter_nan_ = false;
}
inline bool SeriesNormalize::_internal_filter_nan() const {
  return _impl_.filter_nan_;
}
inline bool SeriesNormalize::filter_nan() const {
  // @@protoc_insertion_point(field_get:substrait_extension.SeriesNormalize.filter_nan)
  return _internal_filter_nan();
}
inline void SeriesNormalize::_internal_set_filter_nan(bool value) {
  
  _impl_.filter_nan_ = value;
}
inline void SeriesNormalize::set_filter_nan(bool value) {
  _internal_set_filter_nan(value);
  // @@protoc_insertion_point(field_set:substrait_extension.SeriesNormalize.filter_nan)
}

// -------------------------------------------------------------------

// SeriesDivide

// repeated string tag_columns = 1;
inline int SeriesDivide::_internal_tag_columns_size() const {
  return _impl_.tag_columns_.size();
}
inline int SeriesDivide::tag_columns_size() const {
  return _internal_tag_columns_size();
}
inline void SeriesDivide::clear_tag_columns() {
  _impl_.tag_columns_.Clear();
}
inline std::string* SeriesDivide::add_tag_columns() {
  std::string* _s = _internal_add_tag_columns();
  // @@protoc_insertion_point(field_add_mutable:substrait_extension.SeriesDivide.tag_columns)
  return _s;
}
inline const std::string& SeriesDivide::_internal_tag_columns(int index) const {
  return _impl_.tag_columns_.Get(index);
}
inline const std::string& SeriesDivide::tag_columns(int index) const {
  // @@protoc_insertion_point(field_get:substrait_extension.SeriesDivide.tag_columns)
  return _internal_tag_columns(index);
}
inline std::string* SeriesDivide::mutable_tag_columns(int index) {
  // @@protoc_insertion_point(field_mutable:substrait_extension.SeriesDivide.tag_columns)
  return _impl_.tag_columns_.Mutable(index);
}
inline void SeriesDivide::set_tag_columns(int index, const std::string& value) {
  _impl_.tag_columns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:substrait_extension.SeriesDivide.tag_columns)
}
inline void SeriesDivide::set_tag_columns(int index, std::string&& value) {
  _impl_.tag_columns_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:substrait_extension.SeriesDivide.tag_columns)
}
inline void SeriesDivide::set_tag_columns(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tag_columns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait_extension.SeriesDivide.tag_columns)
}
inline void SeriesDivide::set_tag_columns(int index, const char* value, size_t size) {
  _impl_.tag_columns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait_extension.SeriesDivide.tag_columns)
}
inline std::string* SeriesDivide::_internal_add_tag_columns() {
  return _impl_.tag_columns_.Add();
}
inline void SeriesDivide::add_tag_columns(const std::string& value) {
  _impl_.tag_columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait_extension.SeriesDivide.tag_columns)
}
inline void SeriesDivide::add_tag_columns(std::string&& value) {
  _impl_.tag_columns_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait_extension.SeriesDivide.tag_columns)
}
inline void SeriesDivide::add_tag_columns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tag_columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait_extension.SeriesDivide.tag_columns)
}
inline void SeriesDivide::add_tag_columns(const char* value, size_t size) {
  _impl_.tag_columns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait_extension.SeriesDivide.tag_columns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SeriesDivide::tag_columns() const {
  // @@protoc_insertion_point(field_list:substrait_extension.SeriesDivide.tag_columns)
  return _impl_.tag_columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SeriesDivide::mutable_tag_columns() {
  // @@protoc_insertion_point(field_mutable_list:substrait_extension.SeriesDivide.tag_columns)
  return &_impl_.tag_columns_;
}

// -------------------------------------------------------------------

// RangeManipulate

// int64 start = 1;
inline void RangeManipulate::clear_start() {
  _impl_.start_ = int64_t{0};
}
inline int64_t RangeManipulate::_internal_start() const {
  return _impl_.start_;
}
inline int64_t RangeManipulate::start() const {
  // @@protoc_insertion_point(field_get:substrait_extension.RangeManipulate.start)
  return _internal_start();
}
inline void RangeManipulate::_internal_set_start(int64_t value) {
  
  _impl_.start_ = value;
}
inline void RangeManipulate::set_start(int64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:substrait_extension.RangeManipulate.start)
}

// int64 end = 2;
inline void RangeManipulate::clear_end() {
  _impl_.end_ = int64_t{0};
}
inline int64_t RangeManipulate::_internal_end() const {
  return _impl_.end_;
}
inline int64_t RangeManipulate::end() const {
  // @@protoc_insertion_point(field_get:substrait_extension.RangeManipulate.end)
  return _internal_end();
}
inline void RangeManipulate::_internal_set_end(int64_t value) {
  
  _impl_.end_ = value;
}
inline void RangeManipulate::set_end(int64_t value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:substrait_extension.RangeManipulate.end)
}

// int64 interval = 3;
inline void RangeManipulate::clear_interval() {
  _impl_.interval_ = int64_t{0};
}
inline int64_t RangeManipulate::_internal_interval() const {
  return _impl_.interval_;
}
inline int64_t RangeManipulate::interval() const {
  // @@protoc_insertion_point(field_get:substrait_extension.RangeManipulate.interval)
  return _internal_interval();
}
inline void RangeManipulate::_internal_set_interval(int64_t value) {
  
  _impl_.interval_ = value;
}
inline void RangeManipulate::set_interval(int64_t value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:substrait_extension.RangeManipulate.interval)
}

// int64 range = 4;
inline void RangeManipulate::clear_range() {
  _impl_.range_ = int64_t{0};
}
inline int64_t RangeManipulate::_internal_range() const {
  return _impl_.range_;
}
inline int64_t RangeManipulate::range() const {
  // @@protoc_insertion_point(field_get:substrait_extension.RangeManipulate.range)
  return _internal_range();
}
inline void RangeManipulate::_internal_set_range(int64_t value) {
  
  _impl_.range_ = value;
}
inline void RangeManipulate::set_range(int64_t value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:substrait_extension.RangeManipulate.range)
}

// string time_index = 5;
inline void RangeManipulate::clear_time_index() {
  _impl_.time_index_.ClearToEmpty();
}
inline const std::string& RangeManipulate::time_index() const {
  // @@protoc_insertion_point(field_get:substrait_extension.RangeManipulate.time_index)
  return _internal_time_index();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RangeManipulate::set_time_index(ArgT0&& arg0, ArgT... args) {
 
 _impl_.time_index_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait_extension.RangeManipulate.time_index)
}
inline std::string* RangeManipulate::mutable_time_index() {
  std::string* _s = _internal_mutable_time_index();
  // @@protoc_insertion_point(field_mutable:substrait_extension.RangeManipulate.time_index)
  return _s;
}
inline const std::string& RangeManipulate::_internal_time_index() const {
  return _impl_.time_index_.Get();
}
inline void RangeManipulate::_internal_set_time_index(const std::string& value) {
  
  _impl_.time_index_.Set(value, GetArenaForAllocation());
}
inline std::string* RangeManipulate::_internal_mutable_time_index() {
  
  return _impl_.time_index_.Mutable(GetArenaForAllocation());
}
inline std::string* RangeManipulate::release_time_index() {
  // @@protoc_insertion_point(field_release:substrait_extension.RangeManipulate.time_index)
  return _impl_.time_index_.Release();
}
inline void RangeManipulate::set_allocated_time_index(std::string* time_index) {
  if (time_index != nullptr) {
    
  } else {
    
  }
  _impl_.time_index_.SetAllocated(time_index, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.time_index_.IsDefault()) {
    _impl_.time_index_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:substrait_extension.RangeManipulate.time_index)
}

// repeated string tag_columns = 6;
inline int RangeManipulate::_internal_tag_columns_size() const {
  return _impl_.tag_columns_.size();
}
inline int RangeManipulate::tag_columns_size() const {
  return _internal_tag_columns_size();
}
inline void RangeManipulate::clear_tag_columns() {
  _impl_.tag_columns_.Clear();
}
inline std::string* RangeManipulate::add_tag_columns() {
  std::string* _s = _internal_add_tag_columns();
  // @@protoc_insertion_point(field_add_mutable:substrait_extension.RangeManipulate.tag_columns)
  return _s;
}
inline const std::string& RangeManipulate::_internal_tag_columns(int index) const {
  return _impl_.tag_columns_.Get(index);
}
inline const std::string& RangeManipulate::tag_columns(int index) const {
  // @@protoc_insertion_point(field_get:substrait_extension.RangeManipulate.tag_columns)
  return _internal_tag_columns(index);
}
inline std::string* RangeManipulate::mutable_tag_columns(int index) {
  // @@protoc_insertion_point(field_mutable:substrait_extension.RangeManipulate.tag_columns)
  return _impl_.tag_columns_.Mutable(index);
}
inline void RangeManipulate::set_tag_columns(int index, const std::string& value) {
  _impl_.tag_columns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:substrait_extension.RangeManipulate.tag_columns)
}
inline void RangeManipulate::set_tag_columns(int index, std::string&& value) {
  _impl_.tag_columns_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:substrait_extension.RangeManipulate.tag_columns)
}
inline void RangeManipulate::set_tag_columns(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tag_columns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait_extension.RangeManipulate.tag_columns)
}
inline void RangeManipulate::set_tag_columns(int index, const char* value, size_t size) {
  _impl_.tag_columns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait_extension.RangeManipulate.tag_columns)
}
inline std::string* RangeManipulate::_internal_add_tag_columns() {
  return _impl_.tag_columns_.Add();
}
inline void RangeManipulate::add_tag_columns(const std::string& value) {
  _impl_.tag_columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait_extension.RangeManipulate.tag_columns)
}
inline void RangeManipulate::add_tag_columns(std::string&& value) {
  _impl_.tag_columns_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait_extension.RangeManipulate.tag_columns)
}
inline void RangeManipulate::add_tag_columns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tag_columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait_extension.RangeManipulate.tag_columns)
}
inline void RangeManipulate::add_tag_columns(const char* value, size_t size) {
  _impl_.tag_columns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait_extension.RangeManipulate.tag_columns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RangeManipulate::tag_columns() const {
  // @@protoc_insertion_point(field_list:substrait_extension.RangeManipulate.tag_columns)
  return _impl_.tag_columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RangeManipulate::mutable_tag_columns() {
  // @@protoc_insertion_point(field_mutable_list:substrait_extension.RangeManipulate.tag_columns)
  return &_impl_.tag_columns_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace substrait_extension

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_substrait_5fextension_2fpromql_5fplan_2eproto
