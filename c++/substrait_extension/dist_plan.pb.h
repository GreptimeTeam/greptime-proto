// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait_extension/dist_plan.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_substrait_5fextension_2fdist_5fplan_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_substrait_5fextension_2fdist_5fplan_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_substrait_5fextension_2fdist_5fplan_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_substrait_5fextension_2fdist_5fplan_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_substrait_5fextension_2fdist_5fplan_2eproto;
namespace substrait_extension {
class MergeScan;
struct MergeScanDefaultTypeInternal;
extern MergeScanDefaultTypeInternal _MergeScan_default_instance_;
}  // namespace substrait_extension
PROTOBUF_NAMESPACE_OPEN
template<> ::substrait_extension::MergeScan* Arena::CreateMaybeMessage<::substrait_extension::MergeScan>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace substrait_extension {

// ===================================================================

class MergeScan final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait_extension.MergeScan) */ {
 public:
  inline MergeScan() : MergeScan(nullptr) {}
  ~MergeScan() override;
  explicit PROTOBUF_CONSTEXPR MergeScan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MergeScan(const MergeScan& from);
  MergeScan(MergeScan&& from) noexcept
    : MergeScan() {
    *this = ::std::move(from);
  }

  inline MergeScan& operator=(const MergeScan& from) {
    CopyFrom(from);
    return *this;
  }
  inline MergeScan& operator=(MergeScan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MergeScan& default_instance() {
    return *internal_default_instance();
  }
  static inline const MergeScan* internal_default_instance() {
    return reinterpret_cast<const MergeScan*>(
               &_MergeScan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MergeScan& a, MergeScan& b) {
    a.Swap(&b);
  }
  inline void Swap(MergeScan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MergeScan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MergeScan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MergeScan>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MergeScan& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MergeScan& from) {
    MergeScan::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MergeScan* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait_extension.MergeScan";
  }
  protected:
  explicit MergeScan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 1,
    kIsPlaceholderFieldNumber = 2,
  };
  // bytes input = 1;
  void clear_input();
  const std::string& input() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input();
  PROTOBUF_NODISCARD std::string* release_input();
  void set_allocated_input(std::string* input);
  private:
  const std::string& _internal_input() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input(const std::string& value);
  std::string* _internal_mutable_input();
  public:

  // bool is_placeholder = 2;
  void clear_is_placeholder();
  bool is_placeholder() const;
  void set_is_placeholder(bool value);
  private:
  bool _internal_is_placeholder() const;
  void _internal_set_is_placeholder(bool value);
  public:

  // @@protoc_insertion_point(class_scope:substrait_extension.MergeScan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_;
    bool is_placeholder_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_5fextension_2fdist_5fplan_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MergeScan

// bytes input = 1;
inline void MergeScan::clear_input() {
  _impl_.input_.ClearToEmpty();
}
inline const std::string& MergeScan::input() const {
  // @@protoc_insertion_point(field_get:substrait_extension.MergeScan.input)
  return _internal_input();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MergeScan::set_input(ArgT0&& arg0, ArgT... args) {
 
 _impl_.input_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait_extension.MergeScan.input)
}
inline std::string* MergeScan::mutable_input() {
  std::string* _s = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:substrait_extension.MergeScan.input)
  return _s;
}
inline const std::string& MergeScan::_internal_input() const {
  return _impl_.input_.Get();
}
inline void MergeScan::_internal_set_input(const std::string& value) {
  
  _impl_.input_.Set(value, GetArenaForAllocation());
}
inline std::string* MergeScan::_internal_mutable_input() {
  
  return _impl_.input_.Mutable(GetArenaForAllocation());
}
inline std::string* MergeScan::release_input() {
  // @@protoc_insertion_point(field_release:substrait_extension.MergeScan.input)
  return _impl_.input_.Release();
}
inline void MergeScan::set_allocated_input(std::string* input) {
  if (input != nullptr) {
    
  } else {
    
  }
  _impl_.input_.SetAllocated(input, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.input_.IsDefault()) {
    _impl_.input_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:substrait_extension.MergeScan.input)
}

// bool is_placeholder = 2;
inline void MergeScan::clear_is_placeholder() {
  _impl_.is_placeholder_ = false;
}
inline bool MergeScan::_internal_is_placeholder() const {
  return _impl_.is_placeholder_;
}
inline bool MergeScan::is_placeholder() const {
  // @@protoc_insertion_point(field_get:substrait_extension.MergeScan.is_placeholder)
  return _internal_is_placeholder();
}
inline void MergeScan::_internal_set_is_placeholder(bool value) {
  
  _impl_.is_placeholder_ = value;
}
inline void MergeScan::set_is_placeholder(bool value) {
  _internal_set_is_placeholder(value);
  // @@protoc_insertion_point(field_set:substrait_extension.MergeScan.is_placeholder)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace substrait_extension

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_substrait_5fextension_2fdist_5fplan_2eproto
